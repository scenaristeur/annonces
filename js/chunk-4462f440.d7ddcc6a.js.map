{"version":3,"sources":["webpack:///./node_modules/@rdfjs/data-model/lib/named-node.js","webpack:///./node_modules/@rdfjs/data-model/lib/data-factory.js","webpack:///./node_modules/@rdfjs/data-model/lib/blank-node.js","webpack:///./node_modules/@rdfjs/data-model/lib/literal.js","webpack:///./node_modules/cross-fetch/dist/browser-ponyfill.js","webpack:///./src/components/solid/SolidFetchTest.vue?f351","webpack:///./node_modules/@inrupt/solid-client/dist/index.es.js","webpack:///src/components/solid/SolidFetchTest.vue","webpack:///./src/components/solid/SolidFetchTest.vue?8065","webpack:///./src/components/solid/SolidFetchTest.vue","webpack:///./node_modules/@rdfjs/data-model/index.js","webpack:///./node_modules/@rdfjs/data-model/lib/variable.js","webpack:///./node_modules/http-link-header/lib/link.js","webpack:///./node_modules/@rdfjs/dataset/index.js","webpack:///./node_modules/@inrupt/vocab-common-rdf/dist/index.es.js","webpack:///./node_modules/@rdfjs/data-model/lib/default-graph.js","webpack:///./node_modules/@rdfjs/data-model/lib/quad.js","webpack:///./node_modules/@rdfjs/dataset/DatasetCore.js"],"names":["NamedNode","iri","this","value","prototype","equals","other","termType","module","exports","BlankNode","DefaultGraph","Literal","Quad","Variable","DataFactory","namedNode","blankNode","literal","languageOrDatatype","indexOf","defaultGraph","defaultGraphInstance","variable","triple","subject","predicate","object","quad","graph","id","nextId","language","datatype","stringDatatype","langStringDatatype","global","self","__self__","F","fetch","DOMException","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","Object","toString","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","undefined","Headers","headers","map","forEach","append","Array","isArray","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","length","i","fromCharCode","join","bufferClone","slice","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","Error","then","text","decode","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","normalizeMethod","method","upcased","toUpperCase","Request","input","options","url","credentials","mode","signal","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","err","message","stack","create","constructor","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","ponyfill","ctx","default","render","_vm","_h","$createElement","_c","_self","on","_v","staticRenderFns","hasResourceInfo","resource","potentialResourceInfo","internal_resourceInfo","hasServerResourceInfo","linkedResources","hasChangelog","dataset","potentialChangeLog","internal_changeLog","additions","deletions","SolidClientError","internal_toIriString","async","output","add","filter","internal_parseResourceInfo","_a","_b","contentTypeParts","isSolidDataset","includes","resourceInfo","sourceIri","isRawData","contentType","linkHeader","parsedLinks","aclLinks","aclUrl","URL","uri","href","refs","reduce","rels","ref","rel","wacAllowHeader","permissions","parseWacAllowHeader","parsePermissionStatement","permissionStatement","writePermission","read","write","control","getStatementFor","scope","relevantEntries","rawEntry","relevantStatement","charAt","substring","user","public","internal_cloneResource","clonedResource","match","assign","copyNonClassProperties","source","copy","internal_isUnsuccessfulResponse","internal_defaultFetchOptions","getResourceInfo","config","FetchError","getSourceUrl","errorResponse","super","defaultGetFileOptions","getFile","data","fileWithResourceInfo","acl","Authorization","AuthenticatedAgent","accessTo","agent","agentGroup","agentClass","defaultForNew","origin","rdf","ldp","BasicContainer","Container","Resource","contains","acp","Policy","AccessControl","Read","Append","Write","Rule","accessControl","apply","applyMembers","allow","deny","allOf","anyOf","noneOf","access","accessMembers","group","PublicAgent","CreatorAgent","triplesToTurtle","quads","n3","loadN3","format","writer","Writer","triples","addQuads","writePromise","end","rawTurtle","turtleToTriples","raw","resourceIri","parser","Parser","baseIRI","parsingPromise","parsedTriples","_prefixes","n3Module","xmlSchemaTypes","boolean","dateTime","decimal","integer","string","langString","deserializeBoolean","deserializeDatetime","literalString","datetimeRegEx","signedDateString","rest","yearMultiplier","dateString","yearString","monthString","dayString","utcFullYear","Number","parseInt","utcMonth","utcDate","timeString","timezoneString","splitTimeFromTimezone","hourOffset","minuteOffset","getTimezoneOffsets","hourString","minuteString","timeRest","utcHours","utcMinutes","secondString","optionalMillisecondString","utcSeconds","utcMilliseconds","date","Date","UTC","setUTCFullYear","getUTCFullYear","endsWith","splitOnPlus","splitOnMinus","multiplier","hours","minutes","deserializeDecimal","deserialized","parseFloat","isNaN","deserializeInteger","isNamedNode","isTerm","isLiteral","isLocalNode","internal_name","getLocalNode","localNode","internal_isValidUrl","iriString","asNamedNode","ValidUrlExpectedError","isEqual","node1","node2","namedNode1","resolveIriForLocalNode","namedNode2","resolveIriForLocalNodes","resolveLocalIri","thingIri","hash","receivedValue","internal_isDatasetCore","size","delete","from","internal_getReadableValue","_d","_e","_f","_g","val","valueOf","toUTCString","internal_toNode","thing","isThingLocal","internal_localSubject","asUrl","internal_cloneThing","cloned","internal_url","internal_filterThing","filtered","internal_throwIfNotThing","isThing","ThingExpectedError","internal_withChangeLog","solidDataset","newSolidDataset","getUrl","property","namedNodeMatcher","getNamedNodeMatcher","matchingQuad","findOne","getUrlAll","iriMatcher","matchingQuads","findAll","getIriAll","getStringNoLocale","getLiteralOfType","getTermAll","getTermMatcher","matcher","matched","ValidPropertyUrlExpectedError","predicateNode","getLiteralOfTypeMatcher","literalType","literalOfTypeMatcher","getThing","thingUrl","ValidThingUrlExpectedError","thingDataset","getThingAll","subjectNodes","quadSubject","some","subjectNode","things","setThing","newDataset","removeThing","alreadyDeletedQuad","find","deletedQuad","equalsExcludingBlankNodes","deletion","a","b","thingSubject","existingQuads","addition","createThing","generateName","localSubject","baseUrl","asIri","thingAsMarkdown","predicates","Set","receivedProperty","ValidValueUrlExpectedError","now","Math","random","createSolidDataset","getSolidDataset","Accept","resourceWithResourceInfo","prepareSolidDatasetUpdate","deleteStatement","getNamedNodesForLocalNodes","insertStatement","prepareSolidDatasetCreation","Link","saveSolidDatasetAt","datasetWithChangelog","requestInit","isUpdate","diagnostics","changeLogAsMarkdown","solidDatasetAsMarkdown","storedDataset","storedDatasetWithResolvedIris","resolveLocalIrisInSolidDataset","readableSolidDataset","getReadableChangeLogSummary","readableChangeLog","changeLogsByThingAndProperty","sortChangeLogByThingAndProperty","changeLogByProperty","propertyUrl","deleted","added","deletedValue","addedValue","nrOfAdditions","count","nrOfDeletions","additionString","deletionString","getNamedNodeFromLocalNode","unresolvedQuads","unresolvedQuad","resolvedQuad","mockSolidDatasetFrom","solidDatasetWithResourceInfo","addUrl","newThing","addIri","removeAll","updatedThing","removeUrl","iriNode","removeIri","setUrl","setIri","internal_fetchAcl","hasAccessibleAcl","resourceAcl","fallbackAcl","internal_fetchResourceAcl","internal_fetchFallbackAcl","aclSolidDataset","internal_accessTo","resourceUrl","resourcePath","pathname","containerPath","internal_getContainerPath","containerIri","containerInfo","containerAcl","resourcePathWithoutTrailingSlash","lastIndexOf","internal_setAcl","internal_acl","internal_getAcr","hasAccessibleAcr","internal_acp","acr","internal_setAcr","internal_createControl","internal_getControl","withAccessControlResource","foundThing","internal_getControlAll","foundThings","internal_setControl","updatedAcr","updatedResource","internal_addPolicyUrl","policyUrl","internal_getPolicyUrlAll","internal_removePolicyUrl","internal_removePolicyUrlAll","internal_addMemberPolicyUrl","internal_getMemberPolicyUrlAll","internal_removeMemberPolicyUrl","internal_removeMemberPolicyUrlAll","internal_getInitialisedControl","resourceWithAcr","allControls","hasLinkedAcr","addAcrPolicyUrl","acrUrl","acrThing","addMemberAcrPolicyUrl","getAcrPolicyUrlAll","getMemberAcrPolicyUrlAll","removeAcrPolicyUrl","updatedAcrThing","removeMemberAcrPolicyUrl","removeAcrPolicyUrlAll","removeMemberAcrPolicyUrlAll","addPolicyUrl","updatedControl","addMemberPolicyUrl","getPolicyUrlAll","controls","policyUrlsByControl","uniquePolicyUrls","policyUrls","getMemberPolicyUrlAll","memberPolicyUrlsByControl","removePolicyUrl","updatedControls","removeMemberPolicyUrl","removePolicyUrlAll","removeMemberPolicyUrlAll","acrAsMarkdown","markdown","memberPolicyUrls","acrPolicyUrls","memberAcrPolicyUrls","acpControl","freeze","__proto__","getSolidDatasetWithAcr","urlString","fetchAcr","getFileWithAcr","file","getResourceInfoWithAcr","getSolidDatasetWithAccessDatasets","getFileWithAccessDatasets","getResourceInfoWithAccessDatasets","saveAcrFor","savedAcr","acrDataset","acpInfo","getReferencedPolicyUrlAll","withAcr","getResourceUrl","concat","uniqueUrls","urlWithHash","acpAcp","isRule","addRequiredRuleUrl","policy","rule","removeRequiredRuleUrl","setRequiredRuleUrl","getRequiredRuleUrlAll","addOptionalRuleUrl","removeOptionalRuleUrl","setOptionalRuleUrl","getOptionalRuleUrlAll","addForbiddenRuleUrl","removeForbiddenRuleUrl","setForbiddenRuleUrl","getForbiddenRuleUrlAll","createRule","stringUrl","ruleThing","getRule","ruleResource","getRuleAll","removeRule","setRule","getAgentAll","setAgent","isPublic","hasPublic","isAuthenticated","hasAuthenticated","setPublic","setAuthenticated","addAgent","removeAgent","getGroupAll","setGroup","addGroup","removeGroup","authenticated","hasCreator","setCreator","creator","ruleAsMarkdown","targetEnumeration","targetAgents","targetGroups","acpRule","createPolicy","policyThing","getPolicy","policyResource","getPolicyAll","foundPolicies","removePolicy","setPolicy","setAllowModes","modes","newPolicy","getAllowModes","allowedModes","setDenyModes","getDenyModes","deniedModes","policyAsMarkdown","getStatus","allowModes","denyModes","requiredRules","optionalRules","forbiddenRules","acpPolicy","mockAcrFor","addMockAcrTo","accessControlResource","aprs","acpMock","v1ControlFunctions","deprecatedFunctions","createControl","getControl","getAllControl","getControlAll","setControl","removeControl","getForbiddenRuleurlAll","component","COMPATIBLE_ENCODING_PATTERN","WS_TRIM_PATTERN","WS_CHAR_PATTERN","WS_FOLD_PATTERN","DELIMITER_PATTERN","WS_DELIMITER_PATTERN","TOKEN_PATTERN","STATE","IDLE","URI","ATTR","hasWhitespace","skipWhitespace","offset","needsQuotes","links","attr","link","state","expandRelations","attrValue","isSingleOccurenceAttr","parseExtendedValue","formatAttribute","isCompatibleEncoding","isTokenAttr","escapeQuotes","exec","encoding","formatExtendedAttribute","encodedValue","Buffer","isBuffer","encodeURIComponent","item","DatasetCore","commonjsGlobal","globalThis","window","createCommonjsModule","fn","BlankNode_1","DefaultGraph_1","INSTANCE","NamedNode_1","Literal_1","RDF_LANGUAGE_STRING","XSD_STRING","Quad_1","Variable_1","DataFactory_1","dataFactoryCounter","blankNodeCounter","blankNodePrefix","original","fromTerm","rdfDataFactory","__createBinding","o","m","k","k2","enumerable","__exportStar","p","rdfFactory","_NS","localName","SCHEMA_INRUPT_EXT","PREFIX","NAMESPACE","PREFIX_AND_NAMESPACE","NS","familyName","additionalName","license","newTerm","rdfFactory$1","_NS$1","VCARD","Acquaintance","RelatedType","Agent","BBS","TelephoneType","Car","Cell","Child","Colleague","Contact","Coresident","Coworker","Crush","Dom","Type","Emergency","Fax","Female","Gender","Friend","Home","ISDN","Internet","Intl","Kin","Label","Male","Me","Met","Modem","Msg","Muse","Neighbor","None","Other","PCS","Pager","Parcel","Parent","Postal","Pref","Sibling","Spouse","Sweetheart","Tel","Text","TextPhone","Unknown","Video","Voice","Work","X400","Address","Email","Group","Kind","Individual","Location","Organization","Name","VCard","adr","hasAddress","anniversary","bday","category","class","email","hasEmail","extended_address","geo","hasGeo","hasAdditionalName","hasCalendarBusy","hasCalendarLink","hasCalendarRequest","hasCategory","hasCountryName","hasFN","hasFamilyName","hasGender","hasGivenName","hasHonorificPrefix","hasHonorificSuffix","hasInstantMessage","hasLanguage","hasLocality","hasNickname","nickname","hasNote","hasOrganizationName","hasOrganizationUnit","hasPostalCode","hasRegion","hasRelated","hasRole","hasSource","hasStreetAddress","hasTitle","hasUID","hasValue","label","latitude","longitude","mailer","note","org","organization_name","organization_unit","post_office_box","prodid","rev","role","sort_string","title","tz","country_name","locality","postal_code","region","street_address","hasMember","additional_name","family_name","given_name","honorific_prefix","honorific_suffix","hasKey","hasLogo","logo","hasName","n","hasPhoto","photo","hasSound","sound","hasTelephone","tel","hasURL","rdfFactory$2","_NS$2","rdfFactory$3","_NS$3","rdfFactory$4","_NS$4","rdfFactory$5","_NS$5","rdfFactory$6","_NS$6","rdfFactory$7","_NS$7","rdfFactory$8","_NS$8","rdfFactory$9","_NS$9","rdfFactory$a","_NS$a","rdfFactory$b","_NS$b","rdfFactory$c","_NS$c","rdfFactory$d","_NS$d","rdfFactory$e","_NS$e","rdfFactory$f","_NS$f","rdfFactory$g","_NS$g","rdfFactory$h","_NS$h","rdfFactory$i","_NS$i","FOAF","Document","Project","Image","LabelProperty","OnlineAccount","OnlineChatAccount","OnlineEcommerceAccount","OnlineGamingAccount","Person","PersonalProfileDocument","account","accountName","accountServiceHomepage","age","aimChatID","nick","based_near","birthday","currentProject","depiction","depicts","dnaChecksum","firstName","focus","fundedBy","geekcode","gender","givenName","givenname","holdsAccount","homepage","page","isPrimaryTopicOf","icqChatID","img","interest","primaryTopic","jabberID","knows","lastName","made","maker","mbox","mbox_sha1sum","member","membershipClass","msnChatID","myersBriggs","openid","topic","pastProject","phone","plan","publications","schoolHomepage","sha1","skypeID","surname","theme","thumbnail","tipjar","topic_interest","weblog","workInfoHomepage","workplaceHomepage","yahooChatID","rdfFactory$j","_NS$j","rdfFactory$k","_NS$k","rdfFactory$l","_NS$l","rdfFactory$m","_NS$m","rdfFactory$n","_NS$n","rdfFactory$o","_NS$o","rdfFactory$p","_NS$p","isString","s","xsdString","termToId","term","escapedLiteral","_","quoted","_size","_graphs","_id","_ids","_entities","_quads","Map","graphs","subjects","graphKey","subjectKey","predicateKey","graphItem","objects","ids","entities","_addToIndex","_setQuad","_removeFromIndex","_deleteQuad","subjectId","predicateId","objectId","_countInIndex","_createDataset","_match","index0","key0","key1","key2","index1","index2","existed","name0","name1","name2","array","tmp","value0","value1","l","_getQuad","_getGraphs","content","graphId","_findInIndex","_toId"],"mappings":"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","file":"js/chunk-4462f440.d7ddcc6a.js","sourcesContent":["function NamedNode (iri) {\n  this.value = iri\n}\n\nNamedNode.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","var BlankNode = require('./blank-node')\nvar DefaultGraph = require('./default-graph')\nvar Literal = require('./literal')\nvar NamedNode = require('./named-node')\nvar Quad = require('./quad')\nvar Variable = require('./variable')\n\nfunction DataFactory () {}\n\nDataFactory.namedNode = function (value) {\n  return new NamedNode(value)\n}\n\nDataFactory.blankNode = function (value) {\n  return new BlankNode(value)\n}\n\nDataFactory.literal = function (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nDataFactory.defaultGraph = function () {\n  return DataFactory.defaultGraphInstance\n}\n\nDataFactory.variable = function (value) {\n  return new Variable(value)\n}\n\nDataFactory.triple = function (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nDataFactory.quad = function (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nDataFactory.defaultGraphInstance = new DefaultGraph()\n\nmodule.exports = DataFactory\n","function BlankNode (id) {\n  this.value = id || ('b' + (++BlankNode.nextId))\n}\n\nBlankNode.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","var NamedNode = require('./named-node')\n\nfunction Literal (value, language, datatype) {\n  this.value = value\n  this.datatype = Literal.stringDatatype\n  this.language = ''\n\n  if (language) {\n    this.language = language\n    this.datatype = Literal.langStringDatatype\n  } else if (datatype) {\n    this.datatype = datatype\n  }\n}\n\nLiteral.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value &&\n    other.language === this.language && other.datatype.equals(this.datatype)\n}\n\nLiteral.prototype.termType = 'Literal'\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('b-button',{on:{\"click\":_vm.test}},[_vm._v(\"Test\")]),_vm._v(\" see https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-data/ \")],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import LinkHeader from 'http-link-header';\nimport rdfjsDataset from '@rdfjs/dataset';\nimport * as crossFetch from 'cross-fetch';\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was sent to.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was sent to, false if not.\r\n * @since 0.2.0\r\n */\r\nfunction hasResourceInfo(resource) {\r\n    const potentialResourceInfo = resource;\r\n    return (typeof potentialResourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo === \"object\");\r\n}\r\n/**\r\n * Verify whether a given SolidDataset includes metadata about where it was retrieved from.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.\r\n * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.\r\n * @since 0.6.0\r\n */\r\nfunction hasServerResourceInfo(resource) {\r\n    const potentialResourceInfo = resource;\r\n    return (typeof potentialResourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo === \"object\" &&\r\n        typeof potentialResourceInfo.internal_resourceInfo.linkedResources ===\r\n            \"object\");\r\n}\r\n/** @internal */\r\nfunction hasChangelog(dataset) {\r\n    const potentialChangeLog = dataset;\r\n    return (typeof potentialChangeLog.internal_changeLog === \"object\" &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.additions) &&\r\n        Array.isArray(potentialChangeLog.internal_changeLog.deletions));\r\n}\r\n/**\r\n * Errors thrown by solid-client extend this class, and can thereby be distinguished from errors\r\n * thrown in lower-level libraries.\r\n * @since 1.2.0\r\n */\r\nclass SolidClientError extends Error {\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @internal */\r\nfunction internal_toIriString(iri) {\r\n    return typeof iri === \"string\" ? iri : iri.value;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.\r\n */\r\nconst fetch = async (resource, init) => {\r\n    /* istanbul ignore if: `require` is always defined in the unit test environment */\r\n    if (typeof window === \"object\" && typeof require !== \"function\") {\r\n        return await window.fetch(resource, init);\r\n    }\r\n    /* istanbul ignore if: `require` is always defined in the unit test environment */\r\n    if (typeof require !== \"function\") {\r\n        // When using Node.js with ES Modules, require is not defined:\r\n        const crossFetchModule = await import('cross-fetch');\r\n        const fetch = crossFetchModule.default;\r\n        return fetch(resource, init);\r\n    }\r\n    // Implementation note: it's up to the client application to resolve these module names to the\r\n    // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if\r\n    // the module names are literal strings.\r\n    // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js\r\n    // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a\r\n    // warning. Since the use of package names instead of file names requires a bundles anyway, this\r\n    // should not have any practical consequences. For more background, see:\r\n    // https://github.com/webpack/webpack/issues/7713\r\n    let fetch;\r\n    // Unfortunately solid-client-authn-browser does not support a default session yet.\r\n    // Once it does, we can auto-detect if it is available and use it as follows:\r\n    // try {\r\n    //   fetch = require(\"solid-client-authn-browser\").fetch;\r\n    // } catch (e) {\r\n    // When enabling the above, make sure to add a similar try {...} catch block using `import`\r\n    // statements in the elseif above.\r\n    // eslint-disable-next-line prefer-const\r\n    fetch = require(\"cross-fetch\");\r\n    // }\r\n    return await fetch(resource, init);\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst dataset = rdfjsDataset.dataset;\r\nconst { quad, literal, namedNode, blankNode } = rdfjsDataset;\r\n// TODO: Our code should be able to deal with switching the DataFactory\r\n//  implementation to that provided by '@rdfjs/dataset' (which is currently\r\n//  @rdfjs/data-model) - but currently it seems that implementation:\r\n//    - Doesn't treat capitalization of language tags correctly (i.e., according\r\n//      to the RDF specs, they should be case-insensitive).\r\n//    - Doesn't treat a string literal with an empty language tag of \"\" as an\r\n//      xsd:langString, instead treating it as a xsd:string.\r\n//      A fix for this would be here:\r\n//      https://github.com/rdfjs-base/data-model/blob/ed59e75132ee4d8a3a2f58443ff6a4f792a97033/lib/literal.js#L8\r\n//      ...changing this line to be:\r\n//          if (language || language == \"\") {\r\n//      But according to (https://w3c.github.io/rdf-dir-literal/langString.html)\r\n//      it seems the language tag should be non-empty.\r\n//  Our tests include specific checks for these behaviours (which is great), so\r\n//  until '@rdfjs/dataset' (or our tests!) are fixed, we need to avoid it's\r\n//  DataFactory.\r\n//  Currently (Feb 2021), only 4 tests fail now for the reasons above.\r\n/**\r\n * @internal\r\n */\r\nconst DataFactory = { quad, literal, namedNode, blankNode };\r\n/**\r\n * Clone a Dataset.\r\n *\r\n * Note that the Quads are not cloned, i.e. if you modify the Quads in the output Dataset, the Quads\r\n * in the input Dataset will also be changed.\r\n *\r\n * @internal\r\n * @param input Dataset to clone.\r\n * @returns A new Dataset with the same Quads as `input`.\r\n */\r\nfunction clone(input) {\r\n    const output = dataset();\r\n    for (const quad of input) {\r\n        output.add(quad);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * @internal\r\n * @param input Dataset to clone.\r\n * @param callback Function that takes a Quad, and returns a boolean indicating whether that Quad should be included in the cloned Dataset.\r\n * @returns A new Dataset with the same Quads as `input`, excluding the ones for which `callback` returned `false`.\r\n */\r\nfunction filter(input, callback) {\r\n    const output = dataset();\r\n    for (const quad of input) {\r\n        if (callback(quad)) {\r\n            output.add(quad);\r\n        }\r\n    }\r\n    return output;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @internal\r\n */\r\nfunction internal_parseResourceInfo(response) {\r\n    var _a, _b, _c;\r\n    const contentTypeParts = (_b = (_a = response.headers.get(\"Content-Type\")) === null || _a === void 0 ? void 0 : _a.split(\";\")) !== null && _b !== void 0 ? _b : [];\r\n    // If the server offers a Turtle or JSON-LD serialisation on its own accord,\r\n    // that tells us whether it is RDF data that the server can understand\r\n    // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),\r\n    // in which case our SolidDataset-related functions should handle it.\r\n    // For more context, see https://github.com/inrupt/solid-client-js/pull/214.\r\n    const isSolidDataset = contentTypeParts.length > 0 &&\r\n        [\"text/turtle\", \"application/ld+json\"].includes(contentTypeParts[0]);\r\n    const resourceInfo = {\r\n        sourceIri: response.url,\r\n        isRawData: !isSolidDataset,\r\n        contentType: (_c = response.headers.get(\"Content-Type\")) !== null && _c !== void 0 ? _c : undefined,\r\n        linkedResources: {},\r\n    };\r\n    const linkHeader = response.headers.get(\"Link\");\r\n    if (linkHeader) {\r\n        const parsedLinks = LinkHeader.parse(linkHeader);\r\n        // Set ACL link\r\n        const aclLinks = parsedLinks.get(\"rel\", \"acl\");\r\n        if (aclLinks.length === 1) {\r\n            resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;\r\n        }\r\n        // Parse all link headers and expose them in a standard way\r\n        // (this can replace the parsing of the ACL link above):\r\n        resourceInfo.linkedResources = parsedLinks.refs.reduce((rels, ref) => {\r\n            var _a;\r\n            var _b;\r\n            (_a = rels[_b = ref.rel]) !== null && _a !== void 0 ? _a : (rels[_b] = []);\r\n            rels[ref.rel].push(new URL(ref.uri, resourceInfo.sourceIri).href);\r\n            return rels;\r\n        }, resourceInfo.linkedResources);\r\n    }\r\n    const wacAllowHeader = response.headers.get(\"WAC-Allow\");\r\n    if (wacAllowHeader) {\r\n        resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);\r\n    }\r\n    return resourceInfo;\r\n}\r\n/**\r\n * Parse a WAC-Allow header into user and public access booleans.\r\n *\r\n * @param wacAllowHeader A WAC-Allow header in the format `user=\"read append write control\",public=\"read\"`\r\n * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers\r\n */\r\nfunction parseWacAllowHeader(wacAllowHeader) {\r\n    function parsePermissionStatement(permissionStatement) {\r\n        const permissions = permissionStatement.split(\" \");\r\n        const writePermission = permissions.includes(\"write\");\r\n        return writePermission\r\n            ? {\r\n                read: permissions.includes(\"read\"),\r\n                append: true,\r\n                write: true,\r\n                control: permissions.includes(\"control\"),\r\n            }\r\n            : {\r\n                read: permissions.includes(\"read\"),\r\n                append: permissions.includes(\"append\"),\r\n                write: false,\r\n                control: permissions.includes(\"control\"),\r\n            };\r\n    }\r\n    function getStatementFor(header, scope) {\r\n        const relevantEntries = header\r\n            .split(\",\")\r\n            .map((rawEntry) => rawEntry.split(\"=\"))\r\n            .filter((parts) => parts.length === 2 && parts[0].trim() === scope);\r\n        // There should only be one statement with the given scope:\r\n        if (relevantEntries.length !== 1) {\r\n            return \"\";\r\n        }\r\n        const relevantStatement = relevantEntries[0][1].trim();\r\n        // The given statement should be wrapped in double quotes to be valid:\r\n        if (relevantStatement.charAt(0) !== '\"' ||\r\n            relevantStatement.charAt(relevantStatement.length - 1) !== '\"') {\r\n            return \"\";\r\n        }\r\n        // Return the statment without the wrapping quotes, e.g.: read append write control\r\n        return relevantStatement.substring(1, relevantStatement.length - 1);\r\n    }\r\n    return {\r\n        user: parsePermissionStatement(getStatementFor(wacAllowHeader, \"user\")),\r\n        public: parsePermissionStatement(getStatementFor(wacAllowHeader, \"public\")),\r\n    };\r\n}\r\n/** @hidden Used to instantiate a separate instance from input parameters */\r\nfunction internal_cloneResource(resource) {\r\n    let clonedResource;\r\n    if (typeof resource.slice === \"function\") {\r\n        // If given Resource is a File:\r\n        clonedResource = resource.slice();\r\n    }\r\n    else if (typeof resource.match === \"function\") {\r\n        // If given Resource is a SolidDataset:\r\n        // (We use the existince of a `match` method as a heuristic:)\r\n        clonedResource = clone(resource);\r\n    }\r\n    else {\r\n        // If it is just a plain object containing metadata:\r\n        clonedResource = Object.assign({}, resource);\r\n    }\r\n    return Object.assign(clonedResource, \r\n    // Although the RDF/JS data structures use classes and mutation,\r\n    // we only attach atomic properties that we never mutate.\r\n    // Hence, `copyNonClassProperties` is a heuristic that allows us to only clone our own data\r\n    // structures, rather than references to the same mutable instances of RDF/JS data structures:\r\n    copyNonClassProperties(resource));\r\n}\r\nfunction copyNonClassProperties(source) {\r\n    const copy = {};\r\n    Object.keys(source).forEach((key) => {\r\n        const value = source[key];\r\n        if (typeof value !== \"object\" || value === null) {\r\n            copy[key] = value;\r\n            return;\r\n        }\r\n        // Ignore properties that are Class methods, we don't want to copy those\r\n        // across (e.g., copying over an RDF/JS `.add()` method would result in the\r\n        // former instance's implementation of `.add()` being invoked).\r\n        if (typeof value.constructor === \"undefined\" ||\r\n            value.constructor.name !== \"Object\") {\r\n            return;\r\n        }\r\n        copy[key] = value;\r\n    });\r\n    return copy;\r\n}\r\n/** @internal */\r\nfunction internal_isUnsuccessfulResponse(response) {\r\n    return !response.ok;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @ignore For internal use only. */\r\nconst internal_defaultFetchOptions = {\r\n    fetch: fetch,\r\n};\r\n/**\r\n * Retrieve the information about a resource (e.g. access permissions) without\r\n * fetching the resource itself.\r\n *\r\n * @param url URL to fetch Resource metadata from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.\r\n * @since 0.4.0\r\n */\r\nasync function getResourceInfo(url, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, { method: \"HEAD\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the metadata of the Resource at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    return { internal_resourceInfo: resourceInfo };\r\n}\r\n/**\r\n * @param resource Resource for which to check whether it is a Container.\r\n * @returns Whether `resource` is a Container.\r\n */\r\nfunction isContainer(resource) {\r\n    const containerUrl = hasResourceInfo(resource)\r\n        ? getSourceUrl(resource)\r\n        : internal_toIriString(resource);\r\n    return containerUrl.endsWith(\"/\");\r\n}\r\n/**\r\n * This function will tell you whether a given Resource contains raw data, or a SolidDataset.\r\n *\r\n * @param resource Resource for which to check whether it contains raw data.\r\n * @return Whether `resource` contains raw data.\r\n */\r\nfunction isRawData(resource) {\r\n    return resource.internal_resourceInfo.isRawData;\r\n}\r\n/**\r\n * @param resource Resource for which to determine the Content Type.\r\n * @returns The Content Type, if known, or null if not known.\r\n */\r\nfunction getContentType$1(resource) {\r\n    var _a;\r\n    return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;\r\n}\r\nfunction getSourceUrl(resource) {\r\n    if (hasResourceInfo(resource)) {\r\n        return resource.internal_resourceInfo.sourceIri;\r\n    }\r\n    return null;\r\n}\r\n/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */\r\nconst getSourceIri = getSourceUrl;\r\n/**\r\n * Given a Resource that exposes information about the owner of the Pod it is in, returns the WebID of that owner.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns The WebID of the owner of the Pod the Resource is in, if provided, or `null` if not.\r\n * @since 0.6.0\r\n */\r\nfunction getPodOwner(resource) {\r\n    var _a;\r\n    if (!hasServerResourceInfo(resource)) {\r\n        return null;\r\n    }\r\n    const podOwners = (_a = resource.internal_resourceInfo.linkedResources[\"http://www.w3.org/ns/solid/terms#podOwner\"]) !== null && _a !== void 0 ? _a : [];\r\n    return podOwners.length === 1 ? podOwners[0] : null;\r\n}\r\n/**\r\n * Given a WebID and a Resource that exposes information about the owner of the Pod it is in, returns whether the given WebID is the owner of the Pod.\r\n *\r\n * Data about the owner of the Pod is exposed when the following conditions hold:\r\n * - The Pod server supports exposing the Pod owner\r\n * - The current user is allowed to see who the Pod owner is.\r\n *\r\n * If one or more of those conditions are false, this function will return `null`.\r\n *\r\n * @param webId The WebID of which to check whether it is the Pod Owner's.\r\n * @param resource A Resource that contains information about the owner of the Pod it is in.\r\n * @returns Whether the given WebID is the Pod Owner's, if the Pod Owner is exposed, or `null` if it is not exposed.\r\n * @since 0.6.0\r\n */\r\nfunction isPodOwner(webId, resource) {\r\n    const podOwner = getPodOwner(resource);\r\n    if (typeof podOwner !== \"string\") {\r\n        return null;\r\n    }\r\n    return podOwner === webId;\r\n}\r\n/**\r\n * Extends the regular JavaScript error object with access to the status code and status message.\r\n * @since 1.2.0\r\n */\r\nclass FetchError extends SolidClientError {\r\n    constructor(message, errorResponse) {\r\n        super(message);\r\n        this.response = errorResponse;\r\n    }\r\n    get statusCode() {\r\n        return this.response.status;\r\n    }\r\n    get statusText() {\r\n        return this.response.statusText;\r\n    }\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst defaultGetFileOptions = {\r\n    fetch: fetch,\r\n};\r\nconst RESERVED_HEADERS = [\"Slug\", \"If-None-Match\", \"Content-Type\"];\r\n/**\r\n * Some of the headers must be set by the library, rather than directly.\r\n */\r\nfunction containsReserved(header) {\r\n    return RESERVED_HEADERS.some((reserved) => header[reserved] !== undefined);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file from a URL and returns the file as a blob.\r\n *\r\n * @param url The URL of the file to return\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns The file as a blob.\r\n */\r\nasync function getFile(input, options = defaultGetFileOptions) {\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const url = internal_toIriString(input);\r\n    const response = await config.fetch(url, config.init);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the File failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const data = await response.blob();\r\n    const fileWithResourceInfo = Object.assign(data, {\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return fileWithResourceInfo;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Deletes a file at a given URL.\r\n *\r\n * @param file The URL of the file to delete\r\n */\r\nasync function deleteFile(file, options = defaultGetFileOptions) {\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const url = hasResourceInfo(file)\r\n        ? internal_toIriString(getSourceIri(file))\r\n        : internal_toIriString(file);\r\n    const response = await config.fetch(url, Object.assign(Object.assign({}, config.init), { method: \"DELETE\" }));\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the file at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file in a folder associated with the given URL. The final filename may or may\r\n * not be the given `slug`.\r\n *\r\n * If you know the [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)\r\n * of the file you are attempting to save, then you should provide this in the\r\n * `options` parameter. For example, if you know your file is a JPEG image,\r\n * then you should provide the media type `image/jpeg`. If you don't know, or\r\n * don't provide a media type, a default type of `application/octet-stream` will\r\n * be applied (which indicates that the file should be regarded as pure binary\r\n * data).\r\n *\r\n * The Container at the given URL should already exist; if it does not, the returned Promise will\r\n * be rejected. You can initialise it first using [[createContainerAt]], or directly save the file\r\n * at the desired location using [[overwriteFile]].\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[overwriteFile]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param folderUrl The URL of the folder where the new file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g. a slug).\r\n * @returns A Promise that resolves to the saved file, if available, or `null` if the current user does not have Read access to the newly-saved file. It rejects if saving fails.\r\n */\r\nasync function saveFileInContainer(folderUrl, file, options = defaultGetFileOptions) {\r\n    const folderUrlString = internal_toIriString(folderUrl);\r\n    const response = await writeFile(folderUrlString, file, \"POST\", options);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Saving the file in [${folderUrl}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly saved file.\");\r\n    }\r\n    const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;\r\n    const blobClone = internal_cloneResource(file);\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: true,\r\n            sourceIri: fileIri,\r\n            contentType: getContentType(file, options.contentType),\r\n        },\r\n    };\r\n    return Object.assign(blobClone, resourceInfo);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves a file at a given URL, replacing any previous content.\r\n *\r\n * The Solid server will create any intermediary Containers that do not exist yet, so they do not\r\n * need to be created in advance. For example, if the target URL is\r\n * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,\r\n * it will exist after this function resolves successfully.\r\n *\r\n * If you know the [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)\r\n * of the file you are attempting to write, then you should provide this in the\r\n * `options` parameter. For example, if you know your file is a JPEG image,\r\n * then you should provide the media type `image/jpeg`. If you don't know, or\r\n * don't provide a media type, a default type of `application/octet-stream` will\r\n * be applied (which indicates that the file should be regarded as pure binary\r\n * data).\r\n *\r\n * @param fileUrl The URL where the file is saved.\r\n * @param file The file to be written.\r\n * @param options Additional parameters for file creation (e.g. a slug, or media type).\r\n */\r\nasync function overwriteFile(fileUrl, file, options = defaultGetFileOptions) {\r\n    const fileUrlString = internal_toIriString(fileUrl);\r\n    const response = await writeFile(fileUrlString, file, \"PUT\", options);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Overwriting the file at [${fileUrlString}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const blobClone = internal_cloneResource(file);\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    resourceInfo.sourceIri = fileUrlString;\r\n    resourceInfo.isRawData = true;\r\n    return Object.assign(blobClone, { internal_resourceInfo: resourceInfo });\r\n}\r\nfunction isHeadersArray(headers) {\r\n    return Array.isArray(headers);\r\n}\r\n/**\r\n * The return type of this function is misleading: it should ONLY be used to check\r\n * whether an object has a forEach method that returns <key, value> pairs.\r\n *\r\n * @param headers A headers object that might have a forEach\r\n */\r\nfunction hasHeadersObjectForEach(headers) {\r\n    return typeof headers.forEach === \"function\";\r\n}\r\n/**\r\n * @hidden\r\n * This function feels unnecessarily complicated, but is required in order to\r\n * have Headers according to type definitions in both Node and browser environments.\r\n * This might require a fix upstream to be cleaned up.\r\n *\r\n * @param headersToFlatten A structure containing headers potentially in several formats\r\n */\r\nfunction flattenHeaders(headersToFlatten) {\r\n    if (typeof headersToFlatten === \"undefined\") {\r\n        return {};\r\n    }\r\n    let flatHeaders = {};\r\n    if (isHeadersArray(headersToFlatten)) {\r\n        headersToFlatten.forEach(([key, value]) => {\r\n            flatHeaders[key] = value;\r\n        });\r\n        // Note that the following line must be a elsif, because string[][] has a forEach,\r\n        // but it returns string[] instead of <key, value>\r\n    }\r\n    else if (hasHeadersObjectForEach(headersToFlatten)) {\r\n        headersToFlatten.forEach((value, key) => {\r\n            flatHeaders[key] = value;\r\n        });\r\n    }\r\n    else {\r\n        // If the headers are already a Record<string, string>,\r\n        // they can directly be returned.\r\n        flatHeaders = headersToFlatten;\r\n    }\r\n    return flatHeaders;\r\n}\r\n/**\r\n * Internal function that performs the actual write HTTP query, either POST\r\n * or PUT depending on the use case.\r\n *\r\n * @param fileUrl The URL where the file is saved\r\n * @param file The file to be written\r\n * @param method The HTTP method\r\n * @param options Additional parameters for file creation (e.g. a slug, or media type)\r\n */\r\nasync function writeFile(targetUrl, file, method, options) {\r\n    var _a, _b;\r\n    const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);\r\n    const headers = flattenHeaders((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});\r\n    if (containsReserved(headers)) {\r\n        throw new Error(`No reserved header (${RESERVED_HEADERS.join(\", \")}) should be set in the optional RequestInit.`);\r\n    }\r\n    // If a slug is in the parameters, set the request headers accordingly\r\n    if (config.slug !== undefined) {\r\n        headers[\"Slug\"] = config.slug;\r\n    }\r\n    headers[\"Content-Type\"] = getContentType(file, options.contentType);\r\n    const targetUrlString = internal_toIriString(targetUrl);\r\n    return await config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), { headers,\r\n        method, body: file }));\r\n}\r\nfunction getContentType(file, contentTypeOverride) {\r\n    if (typeof contentTypeOverride === \"string\") {\r\n        return contentTypeOverride;\r\n    }\r\n    const fileType = typeof file === \"object\" &&\r\n        file !== null &&\r\n        typeof file.type === \"string\" &&\r\n        file.type.length > 0\r\n        ? file.type\r\n        : undefined;\r\n    return fileType !== null && fileType !== void 0 ? fileType : \"application/octet-stream\";\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n// TODO: These should be replaced by auto-generated constants,\r\n//       if we can ensure that unused constants will be excluded from bundles.\r\n/** @hidden */\r\nconst acl = {\r\n    Authorization: \"http://www.w3.org/ns/auth/acl#Authorization\",\r\n    AuthenticatedAgent: \"http://www.w3.org/ns/auth/acl#AuthenticatedAgent\",\r\n    accessTo: \"http://www.w3.org/ns/auth/acl#accessTo\",\r\n    agent: \"http://www.w3.org/ns/auth/acl#agent\",\r\n    agentGroup: \"http://www.w3.org/ns/auth/acl#agentGroup\",\r\n    agentClass: \"http://www.w3.org/ns/auth/acl#agentClass\",\r\n    default: \"http://www.w3.org/ns/auth/acl#default\",\r\n    defaultForNew: \"http://www.w3.org/ns/auth/acl#defaultForNew\",\r\n    mode: \"http://www.w3.org/ns/auth/acl#mode\",\r\n    origin: \"http://www.w3.org/ns/auth/acl#origin\",\r\n};\r\n/** @hidden */\r\nconst rdf = {\r\n    type: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\r\n};\r\n/** @hidden */\r\nconst ldp = {\r\n    BasicContainer: \"http://www.w3.org/ns/ldp#BasicContainer\",\r\n    Container: \"http://www.w3.org/ns/ldp#Container\",\r\n    Resource: \"http://www.w3.org/ns/ldp#Resource\",\r\n    contains: \"http://www.w3.org/ns/ldp#contains\",\r\n};\r\n/** @hidden */\r\nconst foaf = {\r\n    Agent: \"http://xmlns.com/foaf/0.1/Agent\",\r\n};\r\n/** @hidden */\r\nconst acp = {\r\n    Policy: \"http://www.w3.org/ns/solid/acp#Policy\",\r\n    AccessControl: \"http://www.w3.org/ns/solid/acp#AccessControl\",\r\n    Read: \"http://www.w3.org/ns/solid/acp#Read\",\r\n    Append: \"http://www.w3.org/ns/solid/acp#Append\",\r\n    Write: \"http://www.w3.org/ns/solid/acp#Write\",\r\n    Rule: \"http://www.w3.org/ns/solid/acp#Rule\",\r\n    accessControl: \"http://www.w3.org/ns/solid/acp#accessControl\",\r\n    apply: \"http://www.w3.org/ns/solid/acp#apply\",\r\n    applyMembers: \"http://www.w3.org/ns/solid/acp#applyMembers\",\r\n    allow: \"http://www.w3.org/ns/solid/acp#allow\",\r\n    deny: \"http://www.w3.org/ns/solid/acp#deny\",\r\n    allOf: \"http://www.w3.org/ns/solid/acp#allOf\",\r\n    anyOf: \"http://www.w3.org/ns/solid/acp#anyOf\",\r\n    noneOf: \"http://www.w3.org/ns/solid/acp#noneOf\",\r\n    access: \"http://www.w3.org/ns/solid/acp#access\",\r\n    accessMembers: \"http://www.w3.org/ns/solid/acp#accessMembers\",\r\n    agent: \"http://www.w3.org/ns/solid/acp#agent\",\r\n    group: \"http://www.w3.org/ns/solid/acp#group\",\r\n    PublicAgent: \"http://www.w3.org/ns/solid/acp#PublicAgent\",\r\n    AuthenticatedAgent: \"http://www.w3.org/ns/solid/acp#AuthenticatedAgent\",\r\n    CreatorAgent: \"http://www.w3.org/ns/solid/acp#CreatorAgent\",\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * @param quads Triples that should be serialised to Turtle\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nasync function triplesToTurtle(quads) {\r\n    const n3 = await loadN3();\r\n    const format = \"text/turtle\";\r\n    const writer = new n3.Writer({ format: format });\r\n    // Remove any potentially lingering references to Named Graphs in Quads;\r\n    // they'll be determined by the URL the Turtle will be sent to:\r\n    const triples = quads.map((quad) => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));\r\n    writer.addQuads(triples);\r\n    const writePromise = new Promise((resolve, reject) => {\r\n        writer.end((error, result) => {\r\n            /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */\r\n            if (error) {\r\n                return reject(error);\r\n            }\r\n            resolve(result);\r\n        });\r\n    });\r\n    const rawTurtle = await writePromise;\r\n    return rawTurtle;\r\n}\r\n/**\r\n * @param raw Turtle that should be parsed into Triples\r\n * @internal Utility method for internal use; not part of the public API.\r\n */\r\nasync function turtleToTriples(raw, resourceIri) {\r\n    const format = \"text/turtle\";\r\n    const n3 = await loadN3();\r\n    const parser = new n3.Parser({ format: format, baseIRI: resourceIri });\r\n    const parsingPromise = new Promise((resolve, reject) => {\r\n        const parsedTriples = [];\r\n        parser.parse(raw, (error, triple, _prefixes) => {\r\n            if (error) {\r\n                return reject(error);\r\n            }\r\n            if (triple) {\r\n                parsedTriples.push(triple);\r\n            }\r\n            else {\r\n                resolve(parsedTriples);\r\n            }\r\n        });\r\n    });\r\n    return parsingPromise;\r\n}\r\nasync function loadN3() {\r\n    // When loaded via Webpack or another bundler that looks at the `modules` field in package.json,\r\n    // N3 serves up ES modules with named exports.\r\n    // However, when it is loaded in Node, it serves up a CommonJS module, which, when imported from\r\n    // a Node ES module, is in the shape of a default export that is an object with all the named\r\n    // exports as its properties.\r\n    // This means that if we were to import the default module, our code would fail in Webpack,\r\n    // whereas if we imported the named exports, our code would fail in Node.\r\n    // As a workaround, we use a dynamic import. This way, we can use the same syntax in every\r\n    // environment, where the differences between the environments are in whether the returned object\r\n    // includes a `default` property that contains all exported functions, or whether those functions\r\n    // are available on the returned object directly. We can then respond to those different\r\n    // situations at runtime.\r\n    // Unfortunately, that does mean that tree shaking will not work until N3 also provides ES modules\r\n    // for Node, or adds a default export for Webpack. See\r\n    // https://github.com/rdfjs/N3.js/issues/196\r\n    const n3Module = await import('n3');\r\n    /* istanbul ignore if: the package provides named exports in the unit test environment */\r\n    if (typeof n3Module.default !== \"undefined\") {\r\n        return n3Module.default;\r\n    }\r\n    return n3Module;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * IRIs of the XML Schema data types we support\r\n * @internal\r\n */\r\nconst xmlSchemaTypes = {\r\n    boolean: \"http://www.w3.org/2001/XMLSchema#boolean\",\r\n    dateTime: \"http://www.w3.org/2001/XMLSchema#dateTime\",\r\n    decimal: \"http://www.w3.org/2001/XMLSchema#decimal\",\r\n    integer: \"http://www.w3.org/2001/XMLSchema#integer\",\r\n    string: \"http://www.w3.org/2001/XMLSchema#string\",\r\n    langString: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\r\n};\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\r\nfunction serializeBoolean(value) {\r\n    return value ? \"true\" : \"false\";\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.\r\n * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation\r\n */\r\nfunction deserializeBoolean(value) {\r\n    if (value === \"true\" || value === \"1\") {\r\n        return true;\r\n    }\r\n    else if (value === \"false\" || value === \"0\") {\r\n        return false;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\r\nfunction serializeDatetime(value) {\r\n    // Although the XML Schema DateTime is not _exactly_ an ISO 8601 string\r\n    // (see https://www.w3.org/TR/xmlschema-2/#deviantformats),\r\n    // the deviations only affect the parsing, not the serialisation.\r\n    // Therefore, we can just use .toISOString():\r\n    return value.toISOString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n */\r\nfunction deserializeDatetime(literalString) {\r\n    // DateTime in the format described at\r\n    // https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation\r\n    // (without constraints on the value).\r\n    // -? - An optional leading `-`.\r\n    // \\d{4,}- - Four or more digits followed by a `-` representing the year. Example: \"3000-\".\r\n    // \\d\\d-\\d\\d - Two digits representing the month and two representing the day of the month,\r\n    //             separated by a `-`. Example: \"11-03\".\r\n    // T - The letter T, separating the date from the time.\r\n    // \\d\\d:\\d\\d:\\d\\d - Two digits for the hour, minute and second, respectively, separated by a `:`.\r\n    //                  Example: \"13:37:42\".\r\n    // (\\.\\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.\r\n    //            Example: \".1337\".\r\n    // (Z|(\\+|-)\\d\\d:\\d\\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for\r\n    //                       the hour offset and two for the minute offset, separated by a `:`.\r\n    //                       Example: \"+13:37\".\r\n    const datetimeRegEx = /-?\\d{4,}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(Z|(\\+|-)\\d\\d:\\d\\d)/;\r\n    if (!datetimeRegEx.test(literalString)) {\r\n        return null;\r\n    }\r\n    const [signedDateString, rest] = literalString.split(\"T\");\r\n    // The date string can optionally be prefixed with `-`,\r\n    // in which case the year is negative:\r\n    const [yearMultiplier, dateString] = signedDateString.charAt(0) === \"-\"\r\n        ? [-1, signedDateString.substring(1)]\r\n        : [1, signedDateString];\r\n    const [yearString, monthString, dayString] = dateString.split(\"-\");\r\n    const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;\r\n    const utcMonth = Number.parseInt(monthString, 10) - 1;\r\n    const utcDate = Number.parseInt(dayString, 10);\r\n    const [timeString, timezoneString] = splitTimeFromTimezone(rest);\r\n    const [hourOffset, minuteOffset] = getTimezoneOffsets(timezoneString);\r\n    const [hourString, minuteString, timeRest] = timeString.split(\":\");\r\n    const utcHours = Number.parseInt(hourString, 10) + hourOffset;\r\n    const utcMinutes = Number.parseInt(minuteString, 10) + minuteOffset;\r\n    const [secondString, optionalMillisecondString] = timeRest.split(\".\");\r\n    const utcSeconds = Number.parseInt(secondString, 10);\r\n    const utcMilliseconds = optionalMillisecondString\r\n        ? Number.parseInt(optionalMillisecondString, 10)\r\n        : 0;\r\n    const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, utcHours, utcMinutes, utcSeconds, utcMilliseconds));\r\n    // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation\r\n    // always writes out the years fully, we should correct this to actually map to the years 0 to 99.\r\n    // See\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values\r\n    if (utcFullYear >= 0 && utcFullYear < 100) {\r\n        // Note that we base it on the calculated year, rather than the year that was actually read.\r\n        // This is because the year might actually differ from the value listed in the serialisation,\r\n        // i.e. when moving the timezone offset to UTC pushes it into a different year:\r\n        date.setUTCFullYear(date.getUTCFullYear() - 1900);\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * @param timeString An XML Schema time string.\r\n * @returns A tuple [timeString, timezoneString].\r\n * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr\r\n */\r\nfunction splitTimeFromTimezone(timeString) {\r\n    if (timeString.endsWith(\"Z\")) {\r\n        return [timeString.substring(0, timeString.length - 1), \"Z\"];\r\n    }\r\n    const splitOnPlus = timeString.split(\"+\");\r\n    const splitOnMinus = timeString.split(\"-\");\r\n    return splitOnPlus.length > splitOnMinus.length\r\n        ? [splitOnPlus[0], \"+\" + splitOnPlus[1]]\r\n        : [splitOnMinus[0], \"-\" + splitOnMinus[1]];\r\n}\r\n/**\r\n * @param timezoneString Lexical representation of a time zone in XML Schema.\r\n * @returns A tuple of the hour and minute offset of the time zone.\r\n * @see https://www.w3.org/TR/xmlschema-2/#dateTime-timezones\r\n */\r\nfunction getTimezoneOffsets(timezoneString) {\r\n    if (timezoneString === \"Z\") {\r\n        return [0, 0];\r\n    }\r\n    const multiplier = timezoneString.charAt(0) === \"+\" ? 1 : -1;\r\n    const [hourString, minuteString] = timezoneString.substring(1).split(\":\");\r\n    const hours = Number.parseInt(hourString, 10);\r\n    const minutes = Number.parseInt(minuteString, 10);\r\n    return [hours * multiplier, minutes * multiplier];\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\r\nfunction serializeDecimal(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.\r\n * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation\r\n */\r\nfunction deserializeDecimal(literalString) {\r\n    const deserialized = Number.parseFloat(literalString);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to serialise.\r\n * @returns String representation of `value`.\r\n */\r\nfunction serializeInteger(value) {\r\n    return value.toString();\r\n}\r\n/**\r\n * @internal\r\n * @param value Value to deserialise.\r\n * @returns Deserialized integer, or null if the given value is not a valid serialised integer.\r\n */\r\nfunction deserializeInteger(literalString) {\r\n    const deserialized = Number.parseInt(literalString, 10);\r\n    if (Number.isNaN(deserialized)) {\r\n        return null;\r\n    }\r\n    return deserialized;\r\n}\r\n/**\r\n * @internal\r\n * @param locale Locale to transform into a consistent format.\r\n */\r\nfunction normalizeLocale(locale) {\r\n    return locale.toLowerCase();\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param value The value that might or might not be a Named Node.\r\n * @returns Whether `value` is a Named Node.\r\n */\r\nfunction isNamedNode(value) {\r\n    return isTerm(value) && value.termType === \"NamedNode\";\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Literals.\r\n * @param value The value that might or might not be a Literal.\r\n * @returns Whether `value` is a Literal.\r\n */\r\nfunction isLiteral(value) {\r\n    return isTerm(value) && value.termType === \"Literal\";\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to raw Terms.\r\n * @param value The value that might or might not be a Term.\r\n * @returns Whether `value` is a Term.\r\n */\r\nfunction isTerm(value) {\r\n    return (value !== null &&\r\n        typeof value === \"object\" &&\r\n        typeof value.termType === \"string\" &&\r\n        typeof value.value === \"string\" &&\r\n        typeof value.equals === \"function\");\r\n}\r\n/**\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param value The value that might or might not be a Node with no known IRI yet.\r\n * @returns Whether `value` is a Node with no known IRI yet.\r\n */\r\nfunction isLocalNode(value) {\r\n    return (isTerm(value) &&\r\n        value.termType === \"BlankNode\" &&\r\n        typeof value.internal_name === \"string\");\r\n}\r\n/**\r\n * Construct a new LocalNode.\r\n *\r\n * @internal Library users shouldn't need to be exposed to LocalNodes.\r\n * @param name Name to identify this node by.\r\n * @returns A LocalNode whose name will be resolved when it is persisted to a Pod.\r\n */\r\nfunction getLocalNode(name) {\r\n    const localNode = Object.assign(DataFactory.blankNode(), {\r\n        internal_name: name,\r\n    });\r\n    return localNode;\r\n}\r\n/**\r\n * Ensure that a given value is a valid URL.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw URLs.\r\n * @param iri The value of which to verify that it is a valid URL.\r\n */\r\nfunction internal_isValidUrl(iri) {\r\n    const iriString = internal_toIriString(iri);\r\n    // If the runtime environment supports URL, instantiate one.\r\n    // If the given IRI is not a valid URL, it will throw an error.\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n    /* istanbul ignore if [URL is available in our testing environment, so we cannot test the alternative] */\r\n    if (typeof URL !== \"function\") {\r\n        // If we can't validate the URL, do not throw an error:\r\n        return true;\r\n    }\r\n    try {\r\n        new URL(iriString);\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Ensure that a given value is a Named Node.\r\n *\r\n * If the given parameter is a Named Node already, it will be returned as-is. If it is a string, it\r\n * will check whether it is a valid IRI. If not, it will throw an error; otherwise a Named Node\r\n * representing the given IRI will be returned.\r\n *\r\n * @internal Library users shouldn't need to be exposed to raw NamedNodes.\r\n * @param iri The IRI that should be converted into a Named Node, if it isn't one yet.\r\n */\r\nfunction asNamedNode(iri) {\r\n    if (!internal_isValidUrl(iri)) {\r\n        throw new ValidUrlExpectedError(iri);\r\n    }\r\n    if (isNamedNode(iri)) {\r\n        return iri;\r\n    }\r\n    return DataFactory.namedNode(iri);\r\n}\r\n/**\r\n * Check whether two current- or potential NamedNodes are/will be equal.\r\n *\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n */\r\nfunction isEqual(node1, node2, options = {}) {\r\n    if (isNamedNode(node1) && isNamedNode(node2)) {\r\n        return node1.equals(node2);\r\n    }\r\n    if (isLocalNode(node1) && isLocalNode(node2)) {\r\n        return node1.internal_name === node2.internal_name;\r\n    }\r\n    if (typeof options.resourceIri === \"undefined\") {\r\n        // If we don't know what IRI to resolve the LocalNode to,\r\n        // we cannot conclude that it is equal to the NamedNode's full IRI:\r\n        return false;\r\n    }\r\n    const namedNode1 = isNamedNode(node1)\r\n        ? node1\r\n        : resolveIriForLocalNode(node1, options.resourceIri);\r\n    const namedNode2 = isNamedNode(node2)\r\n        ? node2\r\n        : resolveIriForLocalNode(node2, options.resourceIri);\r\n    return namedNode1.equals(namedNode2);\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param quad The Quad to resolve LocalNodes in.\r\n * @param resourceIri The IRI of the Resource to resolve the LocalNodes against.\r\n */\r\nfunction resolveIriForLocalNodes(quad, resourceIri) {\r\n    const subject = isLocalNode(quad.subject)\r\n        ? resolveIriForLocalNode(quad.subject, resourceIri)\r\n        : quad.subject;\r\n    const object = isLocalNode(quad.object)\r\n        ? resolveIriForLocalNode(quad.object, resourceIri)\r\n        : quad.object;\r\n    return Object.assign(Object.assign({}, quad), { subject: subject, object: object });\r\n}\r\n/**\r\n * @internal Utility method; library users should not need to interact with LocalNodes directly.\r\n * @param localNode The LocalNode to resolve to a NamedNode.\r\n * @param resourceIri The Resource in which the Node will be saved.\r\n */\r\nfunction resolveIriForLocalNode(localNode, resourceIri) {\r\n    return DataFactory.namedNode(resolveLocalIri(localNode.internal_name, resourceIri));\r\n}\r\n/**\r\n * @internal API for internal use only.\r\n * @param name The name identifying a Thing.\r\n * @param resourceIri The Resource in which the Thing can be found.\r\n */\r\nfunction resolveLocalIri(name, resourceIri) {\r\n    /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */\r\n    if (typeof URL !== \"function\") {\r\n        throw new Error(\"The URL interface is not available, so an IRI cannot be determined.\");\r\n    }\r\n    const thingIri = new URL(resourceIri);\r\n    thingIri.hash = name;\r\n    return thingIri.href;\r\n}\r\n/**\r\n * This error is thrown when a given value is not a proper URL.\r\n */\r\nclass ValidUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Verify whether a given value has the required DatasetCore properties.\r\n *\r\n * @param input Value that might or might not be a DatasetCore\r\n * @returns Whether `input` provides the properties prescribed by the RDF/JS Dataset spec 1.0.\r\n * @hidden This is an internal convenience function.\r\n */\r\nfunction internal_isDatasetCore(input) {\r\n    return (typeof input === \"object\" &&\r\n        input !== null &&\r\n        typeof input.size === \"number\" &&\r\n        typeof input.add === \"function\" &&\r\n        typeof input.delete === \"function\" &&\r\n        typeof input.has === \"function\" &&\r\n        typeof input.match === \"function\" &&\r\n        Array.from(input).length === input.size);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @hidden For internal use only. */\r\nfunction internal_getReadableValue(value) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    if (isNamedNode(value)) {\r\n        return `<${value.value}> (URL)`;\r\n    }\r\n    if (isLiteral(value)) {\r\n        if (!isNamedNode(value.datatype)) {\r\n            return `[${value.value}] (RDF/JS Literal of unknown type)`;\r\n        }\r\n        let val;\r\n        switch (value.datatype.value) {\r\n            case xmlSchemaTypes.boolean:\r\n                val =\r\n                    (_b = (_a = deserializeBoolean(value.value)) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (boolean)\";\r\n            case xmlSchemaTypes.dateTime:\r\n                val =\r\n                    (_d = (_c = deserializeDatetime(value.value)) === null || _c === void 0 ? void 0 : _c.toUTCString()) !== null && _d !== void 0 ? _d : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (datetime)\";\r\n            case xmlSchemaTypes.decimal:\r\n                val =\r\n                    (_f = (_e = deserializeDecimal(value.value)) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (decimal)\";\r\n            case xmlSchemaTypes.integer:\r\n                val =\r\n                    (_h = (_g = deserializeInteger(value.value)) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : `Invalid data: \\`${value.value}\\``;\r\n                return val + \" (integer)\";\r\n            case xmlSchemaTypes.langString:\r\n                return `\"${value.value}\" (${value.language} string)`;\r\n            case xmlSchemaTypes.string:\r\n                return `\"${value.value}\" (string)`;\r\n            default:\r\n                return `[${value.value}] (RDF/JS Literal of type: \\`${value.datatype.value}\\`)`;\r\n        }\r\n    }\r\n    if (isLocalNode(value)) {\r\n        return `<#${value.internal_name}> (URL)`;\r\n    }\r\n    if (value.termType === \"BlankNode\") {\r\n        return `[${value.value}] (RDF/JS BlankNode)`;\r\n    }\r\n    if (value.termType === \"Quad\") {\r\n        return `??? (nested RDF* Quad)`;\r\n    }\r\n    /* istanbul ignore else: The if statements are exhaustive; if not, TypeScript will complain. */\r\n    if (value.termType === \"Variable\") {\r\n        return `?${value.value} (RDF/JS Variable)`;\r\n    }\r\n    /* istanbul ignore next: The if statements are exhaustive; if not, TypeScript will complain. */\r\n    return value;\r\n}\r\n/** @hidden */\r\nfunction internal_toNode(thing) {\r\n    if (isNamedNode(thing) || isLocalNode(thing)) {\r\n        return thing;\r\n    }\r\n    if (typeof thing === \"string\") {\r\n        return asNamedNode(thing);\r\n    }\r\n    if (isThingLocal(thing)) {\r\n        return thing.internal_localSubject;\r\n    }\r\n    return asNamedNode(asUrl(thing));\r\n}\r\n/**\r\n * @internal\r\n * @param thing Thing to clone.\r\n * @returns A new Thing with the same Quads as `input`.\r\n */\r\nfunction internal_cloneThing(thing) {\r\n    const cloned = clone(thing);\r\n    if (isThingLocal(thing)) {\r\n        cloned.internal_localSubject = thing.internal_localSubject;\r\n        return cloned;\r\n    }\r\n    cloned.internal_url = thing.internal_url;\r\n    return cloned;\r\n}\r\n/**\r\n * @internal\r\n * @param thing Thing to clone.\r\n * @param callback Function that takes a Quad, and returns a boolean indicating whether that Quad should be included in the cloned Dataset.\r\n * @returns A new Thing with the same Quads as `input`, excluding the ones for which `callback` returned `false`.\r\n */\r\nfunction internal_filterThing(thing, callback) {\r\n    const filtered = filter(thing, callback);\r\n    if (isThingLocal(thing)) {\r\n        filtered.internal_localSubject =\r\n            thing.internal_localSubject;\r\n        return filtered;\r\n    }\r\n    filtered.internal_url = thing.internal_url;\r\n    return filtered;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nfunction internal_throwIfNotThing(thing) {\r\n    if (!isThing(thing)) {\r\n        throw new ThingExpectedError(thing);\r\n    }\r\n}\r\n/**\r\n * Enforces the presence of a Changelog for a given dataset. If a changelog is\r\n * already present, it is unchanged. Otherwise, an empty changelog is created.\r\n * @hidden\r\n * @param solidDataset\r\n */\r\nfunction internal_withChangeLog(solidDataset) {\r\n    const newSolidDataset = hasChangelog(solidDataset)\r\n        ? solidDataset\r\n        : Object.assign(internal_cloneResource(solidDataset), {\r\n            internal_changeLog: { additions: [], deletions: [] },\r\n        });\r\n    return newSolidDataset;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Returns the URL value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type URL, returns null.\r\n * If the Property has multiple URL values, returns one of its URL values.\r\n *\r\n * @param thing The [[Thing]] to read a URL value from.\r\n * @param property The Property whose URL value to return.\r\n * @returns A URL value for the given Property if present, or null if the Property is not present or the value is not of type URL.\r\n */\r\nfunction getUrl(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuad = findOne(thing, namedNodeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */\r\nconst getIri = getUrl;\r\n/**\r\n * Returns the URL values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type URL, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the URL values from.\r\n * @param property The Property whose URL values to return.\r\n * @returns An array of URL values for the given Property.\r\n */\r\nfunction getUrlAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const iriMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuads = findAll(thing, iriMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\r\n/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */\r\nconst getIriAll = getUrlAll;\r\n/**\r\n * Returns the boolean value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type boolean, returns null.\r\n * If the Property has multiple boolean values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a boolean value from.\r\n * @param property The Property whose boolean value to return.\r\n * @returns A boolean value for the given Property if present, or null if the Property is not present or the value is not of type boolean.\r\n */\r\nfunction getBoolean(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeBoolean(literalString);\r\n}\r\n/**\r\n * Returns the boolean values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type boolean, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the boolean values from.\r\n * @param property The Property whose boolean values to return.\r\n * @returns An array of boolean values for the given Property.\r\n */\r\nfunction getBooleanAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);\r\n    return literalStrings\r\n        .map(deserializeBoolean)\r\n        .filter((possibleBoolean) => possibleBoolean !== null);\r\n}\r\n/**\r\n * Returns the datetime value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type datetime, returns null.\r\n * If the Property has multiple datetime values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a datetime value from.\r\n * @param property The Property whose datetime value to return.\r\n * @returns A datetime value for the given Property if present, or null if the Property is not present or the value is not of type datetime.\r\n */\r\nfunction getDatetime(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDatetime(literalString);\r\n}\r\n/**\r\n * Returns the datetime values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type datetime, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the datetime values from.\r\n * @param property The Property whose datetime values to return.\r\n * @returns An array of datetime values for the given Property.\r\n */\r\nfunction getDatetimeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);\r\n    return literalStrings\r\n        .map(deserializeDatetime)\r\n        .filter((potentialDatetime) => potentialDatetime !== null);\r\n}\r\n/**\r\n * Returns the decimal value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type decimal, returns null.\r\n * If the Property has multiple decimal values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a decimal value from.\r\n * @param property The Property whose decimal value to return.\r\n * @returns A decimal value for the given Property if present, or null if the Property is not present or the value is not of type decimal.\r\n */\r\nfunction getDecimal(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeDecimal(literalString);\r\n}\r\n/**\r\n * Returns the decimal values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type decimal, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the decimal values from.\r\n * @param property The Property whose decimal values to return.\r\n * @returns An array of decimal values for the given Property.\r\n */\r\nfunction getDecimalAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);\r\n    return literalStrings\r\n        .map((literalString) => deserializeDecimal(literalString))\r\n        .filter((potentialDecimal) => potentialDecimal !== null);\r\n}\r\n/**\r\n * Returns the integer value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type integer, returns null.\r\n * If the Property has multiple integer values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read an integer value from.\r\n * @param property The Property whose integer value to return.\r\n * @returns A integer value for the given Property if present, or null if the Property is not present or the value is not of type datetime.\r\n */\r\nfunction getInteger(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);\r\n    if (literalString === null) {\r\n        return null;\r\n    }\r\n    return deserializeInteger(literalString);\r\n}\r\n/**\r\n * Returns the integer values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type integer, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the integer values from.\r\n * @param property The Property whose integer values to return.\r\n * @returns An array of integer values for the given Property.\r\n */\r\nfunction getIntegerAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);\r\n    return literalStrings\r\n        .map((literalString) => deserializeInteger(literalString))\r\n        .filter((potentialInteger) => potentialInteger !== null);\r\n}\r\n/**\r\n * Returns the localized string value of the specified Property from a [[Thing]].\r\n * If the Property is not present as a string in the specified locale, returns null.\r\n * If the Property has multiple string values for the specified locale, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a localised string value from.\r\n * @param property The Property whose localised string value to return.\r\n * @param locale The desired locale for the string value.\r\n * @returns A localised string value for the given Property if present in the specified `locale`, or null otherwise.\r\n */\r\nfunction getStringWithLocale(thing, property, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const localeStringMatcher = getLocaleStringMatcher(property, locale);\r\n    const matchingQuad = findOne(thing, localeStringMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/**\r\n * Returns the localized string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not a string of the specified locale, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The Property whose localised string values to return.\r\n * @param locale The desired locale for the string values.\r\n * @returns An array of localised string values for the given Property.\r\n */\r\nfunction getStringWithLocaleAll(thing, property, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const localeStringMatcher = getLocaleStringMatcher(property, locale);\r\n    const matchingQuads = findAll(thing, localeStringMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\r\n/**\r\n * Returns all localized string values mapped by the locales for the specified property from the\r\n * specified [[Thing]] (explicitly filters out non-language string literals).\r\n *\r\n * @param thing The [[Thing]] to read the localised string values from.\r\n * @param property The Property whose localised string values to return.\r\n * @returns A Map of objects, keyed on locale with the value an array of string values (for that locale).\r\n */\r\nfunction getStringByLocaleAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuads = findAll(thing, literalMatcher);\r\n    const result = new Map();\r\n    matchingQuads.map((quad) => {\r\n        if (quad.object.datatype.value === xmlSchemaTypes.langString) {\r\n            const languageTag = quad.object.language;\r\n            const current = result.get(languageTag);\r\n            current\r\n                ? result.set(languageTag, [...current, quad.object.value])\r\n                : result.set(languageTag, [quad.object.value]);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Returns the string value of the specified Property from a [[Thing]].\r\n * If the Property is not present or its value is not of type string, returns null.\r\n * If the Property has multiple string values, returns one of its values.\r\n *\r\n * @param thing The [[Thing]] to read a string value from.\r\n * @param property The Property whose string value to return.\r\n * @returns A string value for the given Property if present, or null if the Property is not present or the value is not of type string.\r\n */\r\nfunction getStringNoLocale(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalString;\r\n}\r\n/**\r\n * Returns the string values of the specified Property from a [[Thing]].\r\n * If the Property is not present, returns an empty array.\r\n * If the Property's value is not of type string, omits that value in the array.\r\n *\r\n * @param thing The [[Thing]] to read the string values from.\r\n * @param property The Property whose string values to return.\r\n * @returns An array of string values for the given Property.\r\n */\r\nfunction getStringNoLocaleAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);\r\n    return literalStrings;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a NamedNode value from.\r\n * @param property The given Property for which you want the NamedNode value.\r\n * @returns A NamedNode value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\r\nfunction getNamedNode(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuad = findOne(thing, namedNodeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the NamedNode values from.\r\n * @param property The given Property for which you want the NamedNode values.\r\n * @returns The NamedNode values for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#namednode-interface\r\n */\r\nfunction getNamedNodeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getNamedNodeMatcher(property);\r\n    const matchingQuads = findAll(thing, namedNodeMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a Literal value from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @returns A Literal value for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\r\nfunction getLiteral(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuad = findOne(thing, literalMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the Literal values from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @returns The Literal values for the given Property.\r\n * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/#literal-interface\r\n */\r\nfunction getLiteralAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const literalMatcher = getLiteralMatcher(property);\r\n    const matchingQuads = findAll(thing, literalMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read a raw RDF/JS value from.\r\n * @param property The given Property for which you want the raw value.\r\n * @returns A Term for the given Property, if present, or null otherwise.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\r\nfunction getTerm(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const termMatcher = getTermMatcher(property);\r\n    const matchingQuad = findOne(thing, termMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to read the raw RDF/JS values from.\r\n * @param property The given Property for which you want the raw values.\r\n * @returns The Terms for the given Property.\r\n * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @see https://rdf.js.org/data-model-spec/\r\n * @since 0.3.0\r\n */\r\nfunction getTermAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    const namedNodeMatcher = getTermMatcher(property);\r\n    const matchingQuads = findAll(thing, namedNodeMatcher);\r\n    return matchingQuads.map((quad) => quad.object);\r\n}\r\n/**\r\n * @param thing The [[Thing]] to extract a Quad from.\r\n * @param matcher Callback function that returns a boolean indicating whether a given Quad should be included.\r\n * @returns First Quad in `thing` for which `matcher` returned true.\r\n */\r\nfunction findOne(thing, matcher) {\r\n    for (const quad of thing) {\r\n        if (matcher(quad)) {\r\n            return quad;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param thing The [[Thing]] to extract Quads from.\r\n * @param matcher Callback function that returns a boolean indicating whether a given Quad should be included.\r\n * @returns All Quads in `thing` for which `matcher` returned true.\r\n */\r\nfunction findAll(thing, matcher) {\r\n    const matched = [];\r\n    for (const quad of thing) {\r\n        if (matcher(quad)) {\r\n            matched.push(quad);\r\n        }\r\n    }\r\n    return matched;\r\n}\r\nfunction getNamedNodeMatcher(property) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isNamedNode(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLiteralMatcher(property) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isLiteral(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getTermMatcher(property) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return predicateNode.equals(quad.predicate) && isTerm(quad.object);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLiteralOfTypeMatcher(property, datatype) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return (predicateNode.equals(quad.predicate) &&\r\n            isLiteral(quad.object) &&\r\n            quad.object.datatype.value === datatype);\r\n    };\r\n    return matcher;\r\n}\r\nfunction getLocaleStringMatcher(property, locale) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const matcher = function matcher(quad) {\r\n        return (predicateNode.equals(quad.predicate) &&\r\n            isLiteral(quad.object) &&\r\n            quad.object.datatype.value === xmlSchemaTypes.langString &&\r\n            quad.object.language.toLowerCase() === locale.toLowerCase());\r\n    };\r\n    return matcher;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read a Literal of the given type from.\r\n * @param property The given Property for which you want the Literal value.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified value for the given Property and type, if present, or null otherwise.\r\n */\r\nfunction getLiteralOfType(thing, property, literalType) {\r\n    const literalOfTypeMatcher = getLiteralOfTypeMatcher(property, literalType);\r\n    const matchingQuad = findOne(thing, literalOfTypeMatcher);\r\n    if (matchingQuad === null) {\r\n        return null;\r\n    }\r\n    return matchingQuad.object.value;\r\n}\r\n/**\r\n * @param thing The [Thing]] to read the Literals of the given type from.\r\n * @param property The given Property for which you want the Literal values.\r\n * @param literalType Set type of the Literal data.\r\n * @returns The stringified values for the given Property and type.\r\n */\r\nfunction getLiteralAllOfType(thing, property, literalType) {\r\n    const literalOfTypeMatcher = getLiteralOfTypeMatcher(property, literalType);\r\n    const matchingQuads = findAll(thing, literalOfTypeMatcher);\r\n    return matchingQuads.map((quad) => quad.object.value);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.\r\n * @param thingUrl The URL of the desired [[Thing]].\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThing(solidDataset, thingUrl, options = {}) {\r\n    if (!isLocalNode(thingUrl) && !internal_isValidUrl(thingUrl)) {\r\n        throw new ValidThingUrlExpectedError(thingUrl);\r\n    }\r\n    const subject = isLocalNode(thingUrl) ? thingUrl : asNamedNode(thingUrl);\r\n    const scope = options.scope\r\n        ? asNamedNode(options.scope)\r\n        : null;\r\n    const thingDataset = solidDataset.match(subject, null, null, scope);\r\n    if (thingDataset.size === 0) {\r\n        return null;\r\n    }\r\n    if (isLocalNode(subject)) {\r\n        const thing = Object.assign(thingDataset, {\r\n            internal_localSubject: subject,\r\n        });\r\n        return thing;\r\n    }\r\n    else {\r\n        const thing = Object.assign(thingDataset, {\r\n            internal_url: subject.value,\r\n        });\r\n        return thing;\r\n    }\r\n}\r\n/**\r\n * Get all [[Thing]]s about which a [[SolidDataset]] contains Quads.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.\r\n * @param options Not yet implemented.\r\n */\r\nfunction getThingAll(solidDataset, options = {}) {\r\n    const subjectNodes = new Array();\r\n    for (const quad of solidDataset) {\r\n        // Because NamedNode objects with the same IRI are actually different\r\n        // object instances, we have to manually check whether `subjectNodes` does\r\n        // not yet include `quadSubject` before adding it.\r\n        const quadSubject = quad.subject;\r\n        if (isNamedNode(quadSubject) &&\r\n            !subjectNodes.some((subjectNode) => isEqual(subjectNode, quadSubject))) {\r\n            subjectNodes.push(quadSubject);\r\n        }\r\n        if (isLocalNode(quadSubject) &&\r\n            !subjectNodes.some((subjectNode) => isEqual(subjectNode, quadSubject))) {\r\n            subjectNodes.push(quadSubject);\r\n        }\r\n    }\r\n    const things = subjectNodes.map((subjectNode) => getThing(solidDataset, subjectNode, options)\r\n    // We can make the type assertion here because `getThing` only returns `null` if no data with\r\n    // the given subject node can be found, and in this case the subject node was extracted from\r\n    // existing data (i.e. that can be found by definition):\r\n    );\r\n    return things;\r\n}\r\n/**\r\n * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.\r\n *\r\n * @param solidDataset The SolidDataset to insert a Thing into.\r\n * @param thing The Thing to insert into the given SolidDataset.\r\n * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.\r\n */\r\nfunction setThing(solidDataset, thing) {\r\n    const newDataset = removeThing(solidDataset, thing);\r\n    newDataset.internal_changeLog = {\r\n        additions: [...newDataset.internal_changeLog.additions],\r\n        deletions: [...newDataset.internal_changeLog.deletions],\r\n    };\r\n    for (const quad of thing) {\r\n        newDataset.add(quad);\r\n        const alreadyDeletedQuad = newDataset.internal_changeLog.deletions.find((deletedQuad) => equalsExcludingBlankNodes(quad, deletedQuad));\r\n        if (typeof alreadyDeletedQuad !== \"undefined\") {\r\n            newDataset.internal_changeLog.deletions = newDataset.internal_changeLog.deletions.filter((deletion) => deletion !== alreadyDeletedQuad);\r\n        }\r\n        else {\r\n            newDataset.internal_changeLog.additions.push(quad);\r\n        }\r\n    }\r\n    return newDataset;\r\n}\r\n/**\r\n * Compare two Quads but, if both Quads have objects that are Blank Nodes and are otherwise equal, treat them as equal.\r\n *\r\n * The reason we do this is because you cannot write Blank Nodes as Quad\r\n * Subjects using solid-client, so they wouldn't be used in an Object position\r\n * either. Thus, if a SolidDataset has a ChangeLog in which a given Quad with a\r\n * Blank node as object is listed as deleted, and then an otherwise equivalent\r\n * Quad but with a different instance of a Blank Node is added, we can assume\r\n * that they are the same, and that rather than adding the new Quad, we can just\r\n * prevent the old Quad from being removed.\r\n * This occurs in situations in which, for example, you extract a Thing from a\r\n * SolidDataset, change that Thing, then re-fetch that same SolidDataset (to\r\n * make sure you are working with up-to-date data) and add the Thing to _that_.\r\n * When the server returns the data in a serialisation that does not assign a\r\n * consistent value to Blank Nodes (e.g. Turtle), our client-side parser will\r\n * have to instantiate unique instances on every parse. Therefore, the Blank\r\n * Nodes in the refetched SolidDataset will now be different instances from the\r\n * ones in the original SolidDataset, even though they're equivalent.\r\n */\r\nfunction equalsExcludingBlankNodes(a, b) {\r\n    // Potential future improvement: compare the actual values of the nodes.\r\n    // For example, currently a decimal serialised as \"1.0\" is considered different from a decimal\r\n    // serialised as \"1.00\".\r\n    return (a.subject.equals(b.subject) &&\r\n        b.predicate.equals(b.predicate) &&\r\n        (a.object.equals(b.object) ||\r\n            (a.object.termType === \"BlankNode\" && b.object.termType === \"BlankNode\")));\r\n}\r\n/**\r\n * Remove a Thing from a SolidDataset.\r\n *\r\n * @param solidDataset The SolidDataset to remove a Thing from.\r\n * @param thing The Thing to remove from `solidDataset`.\r\n * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.\r\n */\r\nfunction removeThing(solidDataset, thing) {\r\n    const newSolidDataset = internal_withChangeLog(internal_cloneResource(solidDataset));\r\n    newSolidDataset.internal_changeLog = {\r\n        additions: [...newSolidDataset.internal_changeLog.additions],\r\n        deletions: [...newSolidDataset.internal_changeLog.deletions],\r\n    };\r\n    const resourceIri = hasResourceInfo(newSolidDataset)\r\n        ? getSourceUrl(newSolidDataset)\r\n        : undefined;\r\n    const thingSubject = internal_toNode(thing);\r\n    const existingQuads = Array.from(newSolidDataset);\r\n    existingQuads.forEach((quad) => {\r\n        if (!isNamedNode(quad.subject) && !isLocalNode(quad.subject)) {\r\n            // This data is unexpected, and hence unlikely to be added by us. Thus, leave it intact:\r\n            return;\r\n        }\r\n        if (isEqual(thingSubject, quad.subject, { resourceIri: resourceIri })) {\r\n            newSolidDataset.delete(quad);\r\n            if (newSolidDataset.internal_changeLog.additions.includes(quad)) {\r\n                newSolidDataset.internal_changeLog.additions = newSolidDataset.internal_changeLog.additions.filter((addition) => addition !== quad);\r\n            }\r\n            else {\r\n                newSolidDataset.internal_changeLog.deletions.push(quad);\r\n            }\r\n        }\r\n    });\r\n    return newSolidDataset;\r\n}\r\nfunction createThing(options = {}) {\r\n    var _a;\r\n    if (typeof options.url !== \"undefined\") {\r\n        const url = options.url;\r\n        if (!internal_isValidUrl(url)) {\r\n            throw new ValidThingUrlExpectedError(url);\r\n        }\r\n        const thing = Object.assign(dataset(), {\r\n            internal_url: url,\r\n        });\r\n        return thing;\r\n    }\r\n    const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();\r\n    const localSubject = getLocalNode(name);\r\n    const thing = Object.assign(dataset(), {\r\n        internal_localSubject: localSubject,\r\n    });\r\n    return thing;\r\n}\r\n/**\r\n * @param input An value that might be a [[Thing]].\r\n * @returns Whether `input` is a Thing.\r\n * @since 0.2.0\r\n */\r\nfunction isThing(input) {\r\n    return (internal_isDatasetCore(input) &&\r\n        (isThingLocal(input) ||\r\n            typeof input.internal_url === \"string\"));\r\n}\r\nfunction asUrl(thing, baseUrl) {\r\n    if (isThingLocal(thing)) {\r\n        if (typeof baseUrl === \"undefined\") {\r\n            throw new Error(\"The URL of a Thing that has not been persisted cannot be determined without a base URL.\");\r\n        }\r\n        return resolveLocalIri(thing.internal_localSubject.internal_name, baseUrl);\r\n    }\r\n    return thing.internal_url;\r\n}\r\n/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */\r\nconst asIri = asUrl;\r\n/**\r\n * Gets a human-readable representation of the given Thing to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param thing The Thing to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\r\nfunction thingAsMarkdown(thing) {\r\n    let thingAsMarkdown = \"\";\r\n    if (isThingLocal(thing)) {\r\n        thingAsMarkdown += `## Thing (no URL yet — identifier: \\`#${thing.internal_localSubject.internal_name}\\`)\\n`;\r\n    }\r\n    else {\r\n        thingAsMarkdown += `## Thing: ${thing.internal_url}\\n`;\r\n    }\r\n    const quads = Array.from(thing);\r\n    if (quads.length === 0) {\r\n        thingAsMarkdown += \"\\n<empty>\\n\";\r\n    }\r\n    else {\r\n        const predicates = new Set(quads.map((quad) => quad.predicate.value));\r\n        for (const predicate of predicates) {\r\n            thingAsMarkdown += `\\nProperty: ${predicate}\\n`;\r\n            const values = getTermAll(thing, predicate);\r\n            values.forEach((value) => {\r\n                thingAsMarkdown += `- ${internal_getReadableValue(value)}\\n`;\r\n            });\r\n        }\r\n    }\r\n    return thingAsMarkdown;\r\n}\r\n/**\r\n * @param thing The [[Thing]] of which a URL might or might not be known.\r\n * @return Whether `thing` has no known URL yet.\r\n */\r\nfunction isThingLocal(thing) {\r\n    var _a;\r\n    return (typeof ((_a = thing.internal_localSubject) === null || _a === void 0 ? void 0 : _a.internal_name) ===\r\n        \"string\" && typeof thing.internal_url === \"undefined\");\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a [[Thing]] but received something else.\r\n * @since 1.2.0\r\n */\r\nclass ThingExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const message = `Expected a Thing, but received: [${receivedValue}].`;\r\n        super(message);\r\n        this.receivedValue = receivedValue;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a property but received something else.\r\n */\r\nclass ValidPropertyUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL to identify a property, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedProperty = value;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL value but received something else.\r\n */\r\nclass ValidValueUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL value, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\r\n/**\r\n * This error is thrown when a function expected to receive a valid URL to identify a [[Thing]] but received something else.\r\n */\r\nclass ValidThingUrlExpectedError extends SolidClientError {\r\n    constructor(receivedValue) {\r\n        const value = isNamedNode(receivedValue)\r\n            ? receivedValue.value\r\n            : receivedValue;\r\n        const message = `Expected a valid URL to identify a Thing, but received: [${value}].`;\r\n        super(message);\r\n        this.receivedValue = value;\r\n    }\r\n}\r\n/**\r\n * Generate a string that can be used as the unique identifier for a Thing\r\n *\r\n * This function works by starting with a date string (so that Things can be\r\n * sorted chronologically), followed by a random number generated by taking a\r\n * random number between 0 and 1, and cutting off the `0.`.\r\n *\r\n * @internal\r\n * @returns An string that's likely to be unique\r\n */\r\nconst generateName = () => {\r\n    return (Date.now().toString() + Math.random().toString().substring(\"0.\".length));\r\n};\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Initialise a new [[SolidDataset]] in memory.\r\n *\r\n * @returns An empty [[SolidDataset]].\r\n */\r\nfunction createSolidDataset() {\r\n    return dataset();\r\n}\r\n/**\r\n * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).\r\n *\r\n * @param url URL to fetch a [[SolidDataset]] from.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.\r\n */\r\nasync function getSolidDataset(url, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, {\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Fetching the Resource at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const data = await response.text();\r\n    const triples = await turtleToTriples(data, url);\r\n    const resource = dataset();\r\n    triples.forEach((triple) => resource.add(triple));\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const resourceWithResourceInfo = Object.assign(resource, {\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return resourceWithResourceInfo;\r\n}\r\n/**\r\n * Create a SPARQL UPDATE Patch request from a [[SolidDataset]] with a changelog.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PATCH request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a SPARQL UPDATE.\r\n * @hidden\r\n */\r\nasync function prepareSolidDatasetUpdate(solidDataset) {\r\n    const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0\r\n        ? `DELETE DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n        : \"\";\r\n    const insertStatement = solidDataset.internal_changeLog.additions.length > 0\r\n        ? `INSERT DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};`\r\n        : \"\";\r\n    return {\r\n        method: \"PATCH\",\r\n        body: `${deleteStatement} ${insertStatement}`,\r\n        headers: {\r\n            \"Content-Type\": \"application/sparql-update\",\r\n        },\r\n    };\r\n}\r\n/**\r\n * Create a Put request to write a locally created [[SolidDataset]] to a Pod.\r\n * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.\r\n * @returns an HTTP PUT request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a serialization of the [[SolidDataset]].\r\n * @hidden\r\n */\r\nasync function prepareSolidDatasetCreation(solidDataset) {\r\n    return {\r\n        method: \"PUT\",\r\n        body: await triplesToTurtle(Array.from(solidDataset).map(getNamedNodesForLocalNodes)),\r\n        headers: {\r\n            \"Content-Type\": \"text/turtle\",\r\n            \"If-None-Match\": \"*\",\r\n            Link: `<${ldp.Resource}>; rel=\"type\"`,\r\n        },\r\n    };\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).\r\n *\r\n * A SolidDataset keeps track of the data changes compared to the data in the Pod; i.e.,\r\n * the changelog tracks both the old value and new values of the property being modified. This\r\n * function applies the changes to the current SolidDataset. If the old value specified in the\r\n * changelog does not correspond to the value currently in the Pod, this function will throw an\r\n * error.\r\n * The SolidDataset returned by this function will contain the data sent to the Pod, and a ChangeLog\r\n * up-to-date with the saved data. Note that if the data on the server was modified in between the\r\n * first fetch and saving it, the updated data will not be reflected in the returned SolidDataset.\r\n * To make sure you have the latest data, call [[getSolidDataset]] again after saving the data.\r\n *\r\n * The Solid server will create any intermediary Containers that do not exist yet, so they do not\r\n * need to be created in advance. For example, if the target URL is\r\n * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,\r\n * it will exist after this function resolves successfully.\r\n *\r\n * @param url URL to save `solidDataset` to.\r\n * @param solidDataset The [[SolidDataset]] to save.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.\r\n */\r\nasync function saveSolidDatasetAt(url, solidDataset, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const datasetWithChangelog = internal_withChangeLog(solidDataset);\r\n    const requestInit = isUpdate(datasetWithChangelog, url)\r\n        ? await prepareSolidDatasetUpdate(datasetWithChangelog)\r\n        : await prepareSolidDatasetCreation(datasetWithChangelog);\r\n    const response = await config.fetch(url, requestInit);\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        const diagnostics = isUpdate(datasetWithChangelog, url)\r\n            ? \"The changes that were sent to the Pod are listed below.\\n\\n\" +\r\n                changeLogAsMarkdown(datasetWithChangelog)\r\n            : \"The SolidDataset that was sent to the Pod is listed below.\\n\\n\" +\r\n                solidDatasetAsMarkdown(datasetWithChangelog);\r\n        throw new FetchError(`Storing the Resource at [${url}] failed: [${response.status}] [${response.statusText}].\\n\\n` +\r\n            diagnostics, response);\r\n    }\r\n    const resourceInfo = Object.assign(Object.assign({}, internal_parseResourceInfo(response)), { sourceIri: url, isRawData: false });\r\n    const storedDataset = Object.assign(internal_cloneResource(datasetWithChangelog), {\r\n        internal_changeLog: { additions: [], deletions: [] },\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);\r\n    return storedDatasetWithResolvedIris;\r\n}\r\n/**\r\n * Deletes the SolidDataset at a given URL.\r\n *\r\n * @param file The (URL of the) SolidDataset to delete\r\n * @since 0.6.0\r\n */\r\nasync function deleteSolidDataset(solidDataset, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const url = hasResourceInfo(solidDataset)\r\n        ? internal_toIriString(getSourceUrl(solidDataset))\r\n        : internal_toIriString(solidDataset);\r\n    const response = await config.fetch(url, { method: \"DELETE\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the SolidDataset at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n}\r\n/**\r\n * Create an empty Container at the given URL.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to, or because the Container already exists.\r\n *\r\n * Note that a Solid server will automatically create the necessary Containers when storing a\r\n * Resource; i.e. there is no need to call this function if it is immediately followed by\r\n * [[saveSolidDatasetAt]] or [[overwriteFile]].\r\n *\r\n * @param url URL of the empty Container that is to be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 0.2.0\r\n */\r\nasync function createContainerAt(url, options = internal_defaultFetchOptions) {\r\n    url = internal_toIriString(url);\r\n    url = url.endsWith(\"/\") ? url : url + \"/\";\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n            \"Content-Type\": \"text/turtle\",\r\n            \"If-None-Match\": \"*\",\r\n            // This header should not be required to create a Container,\r\n            // but ESS currently expects it:\r\n            Link: `<${ldp.BasicContainer}>; rel=\"type\"`,\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        if (response.status === 409 &&\r\n            response.statusText === \"Conflict\" &&\r\n            (await response.text()).trim() ===\r\n                internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465) {\r\n            return createContainerWithNssWorkaroundAt(url, options);\r\n        }\r\n        throw new FetchError(`Creating the empty Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const resourceInfo = internal_parseResourceInfo(response);\r\n    const containerDataset = Object.assign(dataset(), {\r\n        internal_changeLog: { additions: [], deletions: [] },\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return containerDataset;\r\n}\r\n/**\r\n * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container\r\n * creation. When we make the (valid, according to the Solid protocol) request to create a\r\n * Container, NSS responds with the following exact error message. Thus, when we encounter exactly\r\n * this message, we use an NSS-specific workaround ([[createContainerWithNssWorkaroundAt]]). Both\r\n * this constant and that workaround should be removed once the NSS issue has been fixed and\r\n * no versions of NSS with the issue are in common use/supported anymore.\r\n *\r\n * @see https://github.com/solid/node-solid-server/issues/1465\r\n * @internal\r\n */\r\nconst internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465 = \"Can't write file: PUT not supported on containers, use POST instead\";\r\n/**\r\n * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container\r\n * creation. As a workaround, we create a dummy file _inside_ the desired Container (which should\r\n * create the desired Container on the fly), and then delete it again.\r\n *\r\n * @see https://github.com/solid/node-solid-server/issues/1465\r\n */\r\nconst createContainerWithNssWorkaroundAt = async (url, options) => {\r\n    url = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    let existingContainer;\r\n    try {\r\n        existingContainer = await getResourceInfo(url, options);\r\n    }\r\n    catch (e) {\r\n        // To create the Container, we'd want it to not exist yet. In other words, we'd expect to get\r\n        // a 404 error here in the happy path - so do nothing if that's the case.\r\n        if (!(e instanceof FetchError) || e.statusCode !== 404) {\r\n            // (But if we get an error other than a 404, just throw that error like we usually would.)\r\n            throw e;\r\n        }\r\n    }\r\n    if (typeof existingContainer !== \"undefined\") {\r\n        throw new Error(`The Container at [${url}] already exists, and therefore cannot be created again.`);\r\n    }\r\n    const dummyUrl = url + \".dummy\";\r\n    const createResponse = await config.fetch(dummyUrl, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"text/turtle\",\r\n            \"Content-Type\": \"text/turtle\",\r\n        },\r\n    });\r\n    if (internal_isUnsuccessfulResponse(createResponse)) {\r\n        throw new FetchError(`Creating the empty Container at [${url}] failed: [${createResponse.status}] [${createResponse.statusText}].`, createResponse);\r\n    }\r\n    await config.fetch(dummyUrl, { method: \"DELETE\" });\r\n    const containerInfoResponse = await config.fetch(url, { method: \"HEAD\" });\r\n    const resourceInfo = internal_parseResourceInfo(containerInfoResponse);\r\n    const containerDataset = Object.assign(dataset(), {\r\n        internal_changeLog: { additions: [], deletions: [] },\r\n        internal_resourceInfo: resourceInfo,\r\n    });\r\n    return containerDataset;\r\n};\r\nfunction isUpdate(solidDataset, url) {\r\n    return (hasChangelog(solidDataset) &&\r\n        hasResourceInfo(solidDataset) &&\r\n        typeof solidDataset.internal_resourceInfo.sourceIri === \"string\" &&\r\n        solidDataset.internal_resourceInfo.sourceIri === url);\r\n}\r\n/**\r\n * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.\r\n *\r\n * The Container at the given URL should already exist; if it does not, you can initialise it first\r\n * using [[createContainerAt]], or directly save the SolidDataset at the desired location using\r\n * [[saveSolidDatasetAt]].\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[saveSolidDatasetAt]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param containerUrl URL of the Container in which to create a new Resource.\r\n * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Promise resolving to a [[SolidDataset]] containing the saved data. The Promise rejects if the save failed.\r\n */\r\nasync function saveSolidDatasetInContainer(containerUrl, solidDataset, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    containerUrl = internal_toIriString(containerUrl);\r\n    const rawTurtle = await triplesToTurtle(Array.from(solidDataset).map(getNamedNodesForLocalNodes));\r\n    const headers = {\r\n        \"Content-Type\": \"text/turtle\",\r\n        Link: `<${ldp.Resource}>; rel=\"type\"`,\r\n    };\r\n    if (options.slugSuggestion) {\r\n        headers.slug = options.slugSuggestion;\r\n    }\r\n    const response = await config.fetch(containerUrl, {\r\n        method: \"POST\",\r\n        body: rawTurtle,\r\n        headers: headers,\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Storing the Resource in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].\\n\\n` +\r\n            \"The SolidDataset that was sent to the Pod is listed below.\\n\\n\" +\r\n            solidDatasetAsMarkdown(solidDataset), response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly saved SolidDataset.\");\r\n    }\r\n    const resourceIri = new URL(locationHeader, new URL(containerUrl).origin)\r\n        .href;\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: false,\r\n            sourceIri: resourceIri,\r\n        },\r\n    };\r\n    const resourceWithResourceInfo = Object.assign(internal_cloneResource(solidDataset), resourceInfo);\r\n    const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);\r\n    return resourceWithResolvedIris;\r\n}\r\n/**\r\n * Create an empty Container inside the Container at the given URL.\r\n *\r\n * Throws an error if creating the Container failed, e.g. because the current user does not have\r\n * permissions to.\r\n *\r\n * The Container in which to create the new Container should itself already exist.\r\n *\r\n * This function is primarily useful if the current user does not have access to change existing files in\r\n * a Container, but is allowed to add new files; in other words, they have Append, but not Write\r\n * access to a Container. This is useful in situations where someone wants to allow others to,\r\n * for example, send notifications to their Pod, but not to view or delete existing notifications.\r\n * You can pass a suggestion for the new Resource's name, but the server may decide to give it\r\n * another name — for example, if a Resource with that name already exists inside the given\r\n * Container.\r\n * If the user does have access to write directly to a given location, [[createContainerAt]]\r\n * will do the job just fine, and does not require the parent Container to exist in advance.\r\n *\r\n * @param containerUrl URL of the Container in which the empty Container is to be created.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @since 0.2.0\r\n */\r\nasync function createContainerInContainer(containerUrl, options = internal_defaultFetchOptions) {\r\n    containerUrl = internal_toIriString(containerUrl);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const headers = {\r\n        \"Content-Type\": \"text/turtle\",\r\n        Link: `<${ldp.BasicContainer}>; rel=\"type\"`,\r\n    };\r\n    if (options.slugSuggestion) {\r\n        headers.slug = options.slugSuggestion;\r\n    }\r\n    const response = await config.fetch(containerUrl, {\r\n        method: \"POST\",\r\n        headers: headers,\r\n    });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Creating an empty Container in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n    const locationHeader = response.headers.get(\"Location\");\r\n    if (locationHeader === null) {\r\n        throw new Error(\"Could not determine the location of the newly created Container.\");\r\n    }\r\n    const resourceIri = new URL(locationHeader, new URL(containerUrl).origin)\r\n        .href;\r\n    const resourceInfo = {\r\n        internal_resourceInfo: {\r\n            isRawData: false,\r\n            sourceIri: resourceIri,\r\n        },\r\n    };\r\n    const resourceWithResourceInfo = Object.assign(dataset(), resourceInfo);\r\n    return resourceWithResourceInfo;\r\n}\r\n/**\r\n * Deletes the Container at a given URL.\r\n *\r\n * @param file The (URL of the) Container to delete\r\n * @since 0.6.0\r\n */\r\nasync function deleteContainer(container, options = internal_defaultFetchOptions) {\r\n    const url = hasResourceInfo(container)\r\n        ? internal_toIriString(getSourceUrl(container))\r\n        : internal_toIriString(container);\r\n    if (!isContainer(container)) {\r\n        throw new Error(`You're trying to delete the Container at [${url}], but Container URLs should end in a \\`/\\`. Are you sure this is a Container?`);\r\n    }\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(url, { method: \"DELETE\" });\r\n    if (internal_isUnsuccessfulResponse(response)) {\r\n        throw new FetchError(`Deleting the Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);\r\n    }\r\n}\r\n/**\r\n * Given a [[SolidDataset]] representing a Container (see [[isContainer]]), fetch the URLs of all\r\n * contained resources.\r\n * If the solidDataset given is not a container, or is missing resourceInfo, throw an error.\r\n *\r\n * @param solidDataset The container from which to fetch all contained Resource URLs.\r\n * @returns A list of URLs, each of which points to a contained Resource of the given SolidDataset.\r\n * @since 1.3.0\r\n */\r\nfunction getContainedResourceUrlAll(solidDataset) {\r\n    const container = getThing(solidDataset, getSourceUrl(solidDataset));\r\n    // See https://www.w3.org/TR/2015/REC-ldp-20150226/#h-ldpc-http_post:\r\n    // > a containment triple MUST be added to the state of the LDPC whose subject is the LDPC URI,\r\n    // > whose predicate is ldp:contains and whose object is the URI for the newly created document\r\n    return container !== null ? getIriAll(container, ldp.contains) : [];\r\n}\r\n/**\r\n * Gets a human-readable representation of the given SolidDataset to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The [[SolidDataset]] to get a human-readable representation of.\r\n * @since 0.3.0\r\n */\r\nfunction solidDatasetAsMarkdown(solidDataset) {\r\n    let readableSolidDataset = \"\";\r\n    if (hasResourceInfo(solidDataset)) {\r\n        readableSolidDataset += `# SolidDataset: ${solidDataset.internal_resourceInfo.sourceIri}\\n`;\r\n    }\r\n    else {\r\n        readableSolidDataset += `# SolidDataset (no URL yet)\\n`;\r\n    }\r\n    const things = getThingAll(solidDataset);\r\n    if (things.length === 0) {\r\n        readableSolidDataset += \"\\n<empty>\\n\";\r\n    }\r\n    else {\r\n        things.forEach((thing) => {\r\n            readableSolidDataset += \"\\n\" + thingAsMarkdown(thing);\r\n            if (hasChangelog(solidDataset)) {\r\n                readableSolidDataset +=\r\n                    \"\\n\" + getReadableChangeLogSummary(solidDataset, thing) + \"\\n\";\r\n            }\r\n        });\r\n    }\r\n    return readableSolidDataset;\r\n}\r\n/**\r\n * Gets a human-readable representation of the local changes to a Resource to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param solidDataset The Resource of which to get a human-readable representation of the changes applied to it locally.\r\n * @since 0.3.0\r\n */\r\nfunction changeLogAsMarkdown(solidDataset) {\r\n    if (!hasResourceInfo(solidDataset)) {\r\n        return \"This is a newly initialized SolidDataset, so there is no source to compare it to.\";\r\n    }\r\n    if (!hasChangelog(solidDataset) ||\r\n        (solidDataset.internal_changeLog.additions.length === 0 &&\r\n            solidDataset.internal_changeLog.deletions.length === 0)) {\r\n        return (`## Changes compared to ${getSourceUrl(solidDataset)}\\n\\n` +\r\n            `This SolidDataset has not been modified since it was fetched from ${getSourceUrl(solidDataset)}.\\n`);\r\n    }\r\n    let readableChangeLog = `## Changes compared to ${getSourceUrl(solidDataset)}\\n`;\r\n    const changeLogsByThingAndProperty = sortChangeLogByThingAndProperty(solidDataset);\r\n    Object.keys(changeLogsByThingAndProperty).forEach((thingUrl) => {\r\n        readableChangeLog += `\\n### Thing: ${thingUrl}\\n`;\r\n        const changeLogByProperty = changeLogsByThingAndProperty[thingUrl];\r\n        Object.keys(changeLogByProperty).forEach((propertyUrl) => {\r\n            readableChangeLog += `\\nProperty: ${propertyUrl}\\n`;\r\n            const deleted = changeLogByProperty[propertyUrl].deleted;\r\n            const added = changeLogByProperty[propertyUrl].added;\r\n            if (deleted.length > 0) {\r\n                readableChangeLog += \"- Removed:\\n\";\r\n                deleted.forEach((deletedValue) => (readableChangeLog += `  - ${internal_getReadableValue(deletedValue)}\\n`));\r\n            }\r\n            if (added.length > 0) {\r\n                readableChangeLog += \"- Added:\\n\";\r\n                added.forEach((addedValue) => (readableChangeLog += `  - ${internal_getReadableValue(addedValue)}\\n`));\r\n            }\r\n        });\r\n    });\r\n    return readableChangeLog;\r\n}\r\nfunction sortChangeLogByThingAndProperty(solidDataset) {\r\n    const changeLogsByThingAndProperty = {};\r\n    solidDataset.internal_changeLog.deletions.forEach((deletion) => {\r\n        var _a, _b;\r\n        var _c;\r\n        const subjectNode = isLocalNode(deletion.subject)\r\n            ? resolveIriForLocalNode(deletion.subject, getSourceUrl(solidDataset))\r\n            : deletion.subject;\r\n        if (!isNamedNode(subjectNode) || !isNamedNode(deletion.predicate)) {\r\n            return;\r\n        }\r\n        const thingUrl = internal_toIriString(subjectNode);\r\n        const propertyUrl = internal_toIriString(deletion.predicate);\r\n        (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : (changeLogsByThingAndProperty[thingUrl] = {});\r\n        (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : (_c[propertyUrl] = {\r\n            added: [],\r\n            deleted: [],\r\n        });\r\n        changeLogsByThingAndProperty[thingUrl][propertyUrl].deleted.push(deletion.object);\r\n    });\r\n    solidDataset.internal_changeLog.additions.forEach((addition) => {\r\n        var _a, _b;\r\n        var _c;\r\n        const subjectNode = isLocalNode(addition.subject)\r\n            ? resolveIriForLocalNode(addition.subject, getSourceUrl(solidDataset))\r\n            : addition.subject;\r\n        if (!isNamedNode(subjectNode) || !isNamedNode(addition.predicate)) {\r\n            return;\r\n        }\r\n        const thingUrl = internal_toIriString(subjectNode);\r\n        const propertyUrl = internal_toIriString(addition.predicate);\r\n        (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : (changeLogsByThingAndProperty[thingUrl] = {});\r\n        (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : (_c[propertyUrl] = {\r\n            added: [],\r\n            deleted: [],\r\n        });\r\n        changeLogsByThingAndProperty[thingUrl][propertyUrl].added.push(addition.object);\r\n    });\r\n    return changeLogsByThingAndProperty;\r\n}\r\nfunction getReadableChangeLogSummary(solidDataset, thing) {\r\n    const subject = internal_toNode(thing);\r\n    const nrOfAdditions = solidDataset.internal_changeLog.additions.reduce((count, addition) => (addition.subject.equals(subject) ? count + 1 : count), 0);\r\n    const nrOfDeletions = solidDataset.internal_changeLog.deletions.reduce((count, deletion) => (deletion.subject.equals(subject) ? count + 1 : count), 0);\r\n    const additionString = nrOfAdditions === 1\r\n        ? \"1 new value added\"\r\n        : nrOfAdditions + \" new values added\";\r\n    const deletionString = nrOfDeletions === 1 ? \"1 value removed\" : nrOfDeletions + \" values removed\";\r\n    return `(${additionString} / ${deletionString})`;\r\n}\r\nfunction getNamedNodesForLocalNodes(quad) {\r\n    const subject = isLocalNode(quad.subject)\r\n        ? getNamedNodeFromLocalNode(quad.subject)\r\n        : quad.subject;\r\n    const object = isLocalNode(quad.object)\r\n        ? getNamedNodeFromLocalNode(quad.object)\r\n        : quad.object;\r\n    return Object.assign(Object.assign({}, quad), { subject: subject, object: object });\r\n}\r\nfunction getNamedNodeFromLocalNode(localNode) {\r\n    return DataFactory.namedNode(\"#\" + localNode.internal_name);\r\n}\r\nfunction resolveLocalIrisInSolidDataset(solidDataset) {\r\n    const resourceIri = getSourceUrl(solidDataset);\r\n    const unresolvedQuads = Array.from(solidDataset);\r\n    unresolvedQuads.forEach((unresolvedQuad) => {\r\n        const resolvedQuad = resolveIriForLocalNodes(unresolvedQuad, resourceIri);\r\n        solidDataset.delete(unresolvedQuad);\r\n        solidDataset.add(resolvedQuad);\r\n    });\r\n    return solidDataset;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst { Response } = crossFetch;\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new [[SolidDataset]] with metadata as though the\r\n * SolidDataset has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted SolidDatasets; e.g., unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned SolidDataset appears to be retrieved.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockSolidDatasetFrom(url) {\r\n    const solidDataset = createSolidDataset();\r\n    const solidDatasetWithResourceInfo = Object.assign(solidDataset, {\r\n        internal_resourceInfo: {\r\n            sourceIri: internal_toIriString(url),\r\n            isRawData: false,\r\n            contentType: \"text/turtle\",\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return solidDatasetWithResourceInfo;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Container [[SolidDataset]] with metadata as though the\r\n * Container has been retrieved from the given URL. The mock SolidDataset can be used in\r\n * unit tests that require persisted Containers; e.g., unit tests that call [[isContainer]].\r\n *\r\n * @param url The URL from which the returned Container appears to be retrieved. The `url` must end in a slash.\r\n * @returns A mock SolidDataset that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockContainerFrom(url) {\r\n    const sourceIri = internal_toIriString(url);\r\n    if (!sourceIri.endsWith(\"/\")) {\r\n        throw new Error(\"A Container's URL should end in a slash. Please update your tests.\");\r\n    }\r\n    return mockSolidDatasetFrom(sourceIri);\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new File with metadata as though the\r\n * File has been retrieved from the given URL. The mock File can be used in\r\n * unit tests that require persisted Files; e.g. unit tests that call [[getSourceUrl]].\r\n *\r\n * @param url The URL from which the returned File appears to be retrieved.\r\n * @returns A mock File that appears to be retrieved from the `url`.\r\n * @since 0.2.0\r\n */\r\nfunction mockFileFrom(url, options) {\r\n    const file = new Blob();\r\n    const fileWithResourceInfo = Object.assign(file, {\r\n        internal_resourceInfo: {\r\n            sourceIri: internal_toIriString(url),\r\n            isRawData: true,\r\n            contentType: options === null || options === void 0 ? void 0 : options.contentType,\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return fileWithResourceInfo;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests**.\r\n * ```\r\n *\r\n * This function initialises a new Error object with metadata as though the\r\n * it was the result of getting a 404 when trying to fetch the Resource at the\r\n * given URL. The mock Error can be used in unit tests that require functions\r\n * that fetch Resources (like [[getSolidDataset]]) to fail.\r\n *\r\n * @param url The URL of the Resource that could not be fetched according to the error.\r\n * @param statusCode Optional status code (defaults to 404) that caused the error.\r\n * @returns A mock Error that represents not having been able to fetch the Resource at `url` due to a 404 Response.\r\n * @since 1.1.0\r\n */\r\nfunction mockFetchError(fetchedUrl, statusCode = 404) {\r\n    const failedResponse = new Response(undefined, {\r\n        status: statusCode,\r\n    });\r\n    return new FetchError(`Fetching the Resource at [${fetchedUrl}] failed: [${failedResponse.status}] [${failedResponse.statusText}].`, failedResponse);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Create a new Thing with a URL added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a URL value to.\r\n * @param property Property for which to add the given URL value.\r\n * @param url URL to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addUrl = (thing, property, url) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = internal_cloneThing(thing);\r\n    if (!isThing(url) && !internal_isValidUrl(url)) {\r\n        throw new ValidValueUrlExpectedError(url);\r\n    }\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, internal_toNode(url)));\r\n    return newThing;\r\n};\r\n/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */\r\nconst addIri = addUrl;\r\n/**\r\n * Create a new Thing with a boolean added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a boolean value to.\r\n * @param property Property for which to add the given boolean value.\r\n * @param value Boolean to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with a datetime added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a datetime value to.\r\n * @param property Property for which to add the given datetime value.\r\n * @param value Datetime to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with a decimal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a decimal value to.\r\n * @param property Property for which to add the given decimal value.\r\n * @param value Decimal to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with an integer added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an integer value to.\r\n * @param property Property for which to add the given integer value.\r\n * @param value Integer to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\n/**\r\n * Create a new Thing with a localised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add a localised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const literal = DataFactory.literal(value, normalizeLocale(locale));\r\n    return addLiteral(thing, property, literal);\r\n}\r\n/**\r\n * Create a new Thing with an unlocalised string added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to add an unlocalised string value to.\r\n * @param property Property for which to add the given string value.\r\n * @param value String to add to `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nconst addStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\n/**\r\n * Create a new Thing with a Named Node added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Named Node to.\r\n * @param property Property for which to add a value.\r\n * @param value The Named Node to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return addTerm(thing, property, value);\r\n}\r\n/**\r\n * Create a new Thing with a Literal added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Literal to.\r\n * @param property Property for which to add a value.\r\n * @param value The Literal to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n */\r\nfunction addLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return addTerm(thing, property, value);\r\n}\r\n/**\r\n * Creates a new Thing with a Term added for a Property.\r\n *\r\n * This preserves existing values for the given Property. To replace them, see [[setTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to add a Term to.\r\n * @param property Property for which to add a value.\r\n * @param value The Term to add.\r\n * @returns A new Thing equal to the input Thing with the given value added for the given Property.\r\n * @since 0.3.0\r\n */\r\nfunction addTerm(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const newThing = internal_cloneThing(thing);\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction addLiteralOfType(thing, property, value, type) {\r\n    const literal = DataFactory.literal(value, DataFactory.namedNode(type));\r\n    return addLiteral(thing, property, literal);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nfunction removeAll(thing, property) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => !quad.predicate.equals(predicateNode));\r\n    return updatedThing;\r\n}\r\n/**\r\n * Create a new Thing with the given URL removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a URL value from.\r\n * @param property Property for which to remove the given URL value.\r\n * @param value URL to remove from `thing` for the given `Property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeUrl = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    if (!isThing(value) && !internal_isValidUrl(value)) {\r\n        throw new ValidValueUrlExpectedError(value);\r\n    }\r\n    const iriNode = isNamedNode(value)\r\n        ? value\r\n        : typeof value === \"string\"\r\n            ? asNamedNode(value)\r\n            : asNamedNode(asIri(value));\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isNamedNode(quad.object) ||\r\n            !quad.object.equals(iriNode));\r\n    });\r\n    return updatedThing;\r\n};\r\n/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */\r\nconst removeIri = removeUrl;\r\n/**\r\n * Create a new Thing with the given boolean removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a boolean value from.\r\n * @param property Property for which to remove the given boolean value.\r\n * @param value Boolean to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.boolean, (foundBoolean) => deserializeBoolean(foundBoolean) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given datetime removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a datetime value from.\r\n * @param property Property for which to remove the given datetime value.\r\n * @param value Datetime to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.dateTime, (foundDatetime) => { var _a; return ((_a = deserializeDatetime(foundDatetime)) === null || _a === void 0 ? void 0 : _a.getTime()) === value.getTime(); });\r\n};\r\n/**\r\n * Create a new Thing with the given decimal removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a decimal value from.\r\n * @param property Property for which to remove the given decimal value.\r\n * @param value Decimal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.decimal, (foundDecimal) => deserializeDecimal(foundDecimal) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given integer removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an integer value from.\r\n * @param property Property for which to remove the given integer value.\r\n * @param value Integer to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.integer, (foundInteger) => deserializeInteger(foundInteger) === value);\r\n};\r\n/**\r\n * Create a new Thing with the given localised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove a localised string value from.\r\n * @param property Property for which to remove the given localised string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @param locale Locale of the string to remove.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    // Note: Due to how the `DataFactory.literal` constructor behaves, this function\r\n    // must call directly `removeLiteral` directly, with the locale as the data\r\n    // type of the Literal (which is not a valid NamedNode).\r\n    return removeLiteral(thing, property, DataFactory.literal(value, normalizeLocale(locale)));\r\n}\r\n/**\r\n * Create a new Thing with the given unlocalised string removed for the given Property.\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to remove an unlocalised string value from.\r\n * @param property Property for which to remove the given string value.\r\n * @param value String to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nconst removeStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return removeLiteralMatching(thing, property, xmlSchemaTypes.string, (foundString) => foundString === value);\r\n};\r\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a NamedNode value from.\r\n * @param property Property for which to remove the given NamedNode value.\r\n * @param value NamedNode to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isNamedNode(quad.object) ||\r\n            !quad.object.equals(value));\r\n    });\r\n    return updatedThing;\r\n}\r\n/**\r\n * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param value Literal to remove from `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with the given value removed for the given Property.\r\n */\r\nfunction removeLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        return (!quad.predicate.equals(predicateNode) ||\r\n            !isLiteral(quad.object) ||\r\n            !quad.object.equals(value));\r\n    });\r\n    return updatedThing;\r\n}\r\n/**\r\n * @param thing Thing to remove a Literal value from.\r\n * @param property Property for which to remove the given Literal value.\r\n * @param type Data type that the Literal should be stored as.\r\n * @param matcher Function that returns true if the given value is an equivalent serialisation of the value to remove. For example, when removing a `false` boolean, the matcher should return true for both \"0\" and \"false\".\r\n */\r\nfunction removeLiteralMatching(thing, property, type, matcher) {\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const predicateNode = asNamedNode(property);\r\n    const updatedThing = internal_filterThing(thing, (quad) => {\r\n        // Copy every value from the old thing into the new thing, unless it:\r\n        return !(\r\n        // has the predicate of the value-to-be-removed,\r\n        (quad.predicate.equals(predicateNode) &&\r\n            // also is a literal\r\n            isLiteral(quad.object) &&\r\n            // of the same type as the value-to-be-removed,\r\n            quad.object.datatype.equals(DataFactory.namedNode(type)) &&\r\n            // and has a value determined to be equal to the value-to-be-removed\r\n            // by the given matcher (i.e. because their serialisations are equal):\r\n            matcher(quad.object.value)));\r\n    });\r\n    return updatedThing;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Create a new Thing with existing values replaced by the given URL for the given Property.\r\n *\r\n * To preserve existing values, see [[addUrl]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a URL value on.\r\n * @param property Property for which to set the given URL value.\r\n * @param url URL to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setUrl = (thing, property, url) => {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    if (!isThing(url) && !internal_isValidUrl(url)) {\r\n        throw new ValidValueUrlExpectedError(url);\r\n    }\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, internal_toNode(url)));\r\n    return newThing;\r\n};\r\n/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */\r\nconst setIri = setUrl;\r\n/**\r\n * Create a new Thing with existing values replaced by the given boolean for the given Property.\r\n *\r\n * To preserve existing values, see [[addBoolean]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a boolean value on.\r\n * @param property Property for which to set the given boolean value.\r\n * @param value Boolean to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setBoolean = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given datetime for the given Property.\r\n *\r\n * To preserve existing values, see [[addDatetime]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an datetime value on.\r\n * @param property Property for which to set the given datetime value.\r\n * @param value Datetime to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDatetime = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given decimal for the given Property.\r\n *\r\n * To preserve existing values, see [[addDecimal]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a decimal value on.\r\n * @param property Property for which to set the given decimal value.\r\n * @param value Decimal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setDecimal = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given integer for the given Property.\r\n *\r\n * To preserve existing values, see [[addInteger]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an integer value on.\r\n * @param property Property for which to set the given integer value.\r\n * @param value Integer to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setInteger = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given localised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringWithLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set a localised string value on.\r\n * @param property Property for which to set the given localised string value.\r\n * @param value Localised string to set on `thing` for the given `property`.\r\n * @param locale Locale of the added string.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setStringWithLocale(thing, property, value, locale) {\r\n    internal_throwIfNotThing(thing);\r\n    const literal = DataFactory.literal(value, normalizeLocale(locale));\r\n    return setLiteral(thing, property, literal);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.\r\n *\r\n * To preserve existing values, see [[addStringNoLocale]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @param thing Thing to set an unlocalised string value on.\r\n * @param property Property for which to set the given unlocalised string value.\r\n * @param value Unlocalised string to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nconst setStringNoLocale = (thing, property, value) => {\r\n    internal_throwIfNotThing(thing);\r\n    return setLiteralOfType(thing, property, value, xmlSchemaTypes.string);\r\n};\r\n/**\r\n * Create a new Thing with existing values replaced by the given Named Node for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addNamedNode]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a NamedNode on.\r\n * @param property Property for which to set the value.\r\n * @param value The NamedNode to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setNamedNode(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return setTerm(thing, property, value);\r\n}\r\n/**\r\n * Create a new Thing with existing values replaced by the given Literal for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addLiteral]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Literal on.\r\n * @param property Property for which to set the value.\r\n * @param value The Literal to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n */\r\nfunction setLiteral(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    return setTerm(thing, property, value);\r\n}\r\n/**\r\n * Creates a new Thing with existing values replaced by the given Term for the given Property.\r\n *\r\n * This replaces existing values for the given Property. To preserve them, see [[addTerm]].\r\n *\r\n * The original `thing` is not modified; this function returns a cloned Thing with updated values.\r\n *\r\n * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.\r\n * @param thing The [[Thing]] to set a Term on.\r\n * @param property Property for which to set the value.\r\n * @param value The raw RDF/JS value to set on `thing` for the given `property`.\r\n * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.\r\n * @since 0.3.0\r\n */\r\nfunction setTerm(thing, property, value) {\r\n    internal_throwIfNotThing(thing);\r\n    if (!internal_isValidUrl(property)) {\r\n        throw new ValidPropertyUrlExpectedError(property);\r\n    }\r\n    const newThing = removeAll(thing, property);\r\n    const predicateNode = asNamedNode(property);\r\n    newThing.add(DataFactory.quad(internal_toNode(newThing), predicateNode, value));\r\n    return newThing;\r\n}\r\nfunction setLiteralOfType(thing, property, value, type) {\r\n    const literal = DataFactory.literal(value, DataFactory.namedNode(type));\r\n    return setLiteral(thing, property, literal);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Function for use in unit tests to mock a [[Thing]] with a given URL.\r\n *\r\n * Warning: do not use this function in actual production code.\r\n * This function initialises a new empty Thing and sets its URL to a given URL.\r\n * This is useful to mock a Thing in tests of code that call e.g.\r\n * [[asUrl]].\r\n *\r\n * @param url The URL that the mocked Thing pretends identifies it.\r\n * @returns A new Thing, pretending to be identified by the given URL.\r\n * @since 0.2.0\r\n */\r\nfunction mockThingFrom(url) {\r\n    const thing = Object.assign(dataset(), {\r\n        internal_url: internal_toIriString(url),\r\n    });\r\n    return thing;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * This (currently internal) function fetches the ACL indicated in the [[WithServerResourceInfo]]\r\n * attached to a resource.\r\n *\r\n * @internal\r\n * @param resourceInfo The Resource info with the ACL URL\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).\r\n */\r\nasync function internal_fetchAcl(resourceInfo, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(resourceInfo)) {\r\n        return {\r\n            resourceAcl: null,\r\n            fallbackAcl: null,\r\n        };\r\n    }\r\n    const resourceAcl = await internal_fetchResourceAcl(resourceInfo, options);\r\n    const acl = resourceAcl === null\r\n        ? {\r\n            resourceAcl: null,\r\n            fallbackAcl: await internal_fetchFallbackAcl(resourceInfo, options),\r\n        }\r\n        : { resourceAcl: resourceAcl, fallbackAcl: null };\r\n    return acl;\r\n}\r\n/** @internal */\r\nasync function internal_fetchResourceAcl(dataset, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(dataset)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const aclSolidDataset = await getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);\r\n        return Object.assign(aclSolidDataset, {\r\n            internal_accessTo: getSourceUrl(dataset),\r\n        });\r\n    }\r\n    catch (e) {\r\n        // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,\r\n        // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal\r\n        // with it.\r\n        return null;\r\n    }\r\n}\r\n/** @internal */\r\nasync function internal_fetchFallbackAcl(resource, options = internal_defaultFetchOptions) {\r\n    const resourceUrl = new URL(getSourceUrl(resource));\r\n    const resourcePath = resourceUrl.pathname;\r\n    // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet\r\n    //       set in stone that that will always be the case. We might need to check the Container's\r\n    //       metadata at some point in time to check whether it is actually the root of the Pod.\r\n    //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022\r\n    if (resourcePath === \"/\") {\r\n        // We're already at the root, so there's no Container we can retrieve:\r\n        return null;\r\n    }\r\n    const containerPath = internal_getContainerPath(resourcePath);\r\n    const containerIri = new URL(containerPath, resourceUrl.origin).href;\r\n    const containerInfo = await getResourceInfo(containerIri, options);\r\n    if (!hasAccessibleAcl(containerInfo)) {\r\n        // If the current user does not have access to this Container's ACL,\r\n        // we cannot determine whether its ACL is the one that applies. Thus, return null:\r\n        return null;\r\n    }\r\n    const containerAcl = await internal_fetchResourceAcl(containerInfo, options);\r\n    if (containerAcl === null) {\r\n        return internal_fetchFallbackAcl(containerInfo, options);\r\n    }\r\n    return containerAcl;\r\n}\r\n/**\r\n * Given the path to a Resource, get the URL of the Container one level up in the hierarchy.\r\n * @param resourcePath The path of the Resource of which we need to determine the Container's path.\r\n * @hidden For internal use only.\r\n */\r\nfunction internal_getContainerPath(resourcePath) {\r\n    const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === \"/\"\r\n        ? resourcePath.substring(0, resourcePath.length - 1)\r\n        : resourcePath;\r\n    const containerPath = resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf(\"/\")) + \"/\";\r\n    return containerPath;\r\n}\r\n/** @internal */\r\nfunction internal_getAclRules(aclDataset) {\r\n    const things = getThingAll(aclDataset);\r\n    return things.filter(isAclRule);\r\n}\r\nfunction isAclRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acl.Authorization);\r\n}\r\n/** @internal */\r\nfunction internal_getResourceAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => appliesToResource(rule, resource));\r\n}\r\nfunction appliesToResource(aclRule, resource) {\r\n    return getIriAll(aclRule, acl.accessTo).includes(resource);\r\n}\r\n/** @internal */\r\nfunction internal_getDefaultAclRulesForResource(aclRules, resource) {\r\n    return aclRules.filter((rule) => isDefaultForResource(rule, resource));\r\n}\r\nfunction isDefaultForResource(aclRule, resource) {\r\n    return (getIriAll(aclRule, acl.default).includes(resource) ||\r\n        getIriAll(aclRule, acl.defaultForNew).includes(resource));\r\n}\r\n/** @internal */\r\nfunction internal_getAccess(rule) {\r\n    const ruleAccessModes = getIriAll(rule, acl.mode);\r\n    const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);\r\n    return writeAccess\r\n        ? {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: true,\r\n            write: true,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        }\r\n        : {\r\n            read: ruleAccessModes.includes(internal_accessModeIriStrings.read),\r\n            append: ruleAccessModes.includes(internal_accessModeIriStrings.append),\r\n            write: false,\r\n            control: ruleAccessModes.includes(internal_accessModeIriStrings.control),\r\n        };\r\n}\r\n/** @internal */\r\nfunction internal_combineAccessModes(modes) {\r\n    return modes.reduce((accumulator, current) => {\r\n        const writeAccess = accumulator.write || current.write;\r\n        return writeAccess\r\n            ? {\r\n                read: accumulator.read || current.read,\r\n                append: true,\r\n                write: true,\r\n                control: accumulator.control || current.control,\r\n            }\r\n            : {\r\n                read: accumulator.read || current.read,\r\n                append: accumulator.append || current.append,\r\n                write: false,\r\n                control: accumulator.control || current.control,\r\n            };\r\n    }, { read: false, append: false, write: false, control: false });\r\n}\r\n/** @internal */\r\nfunction internal_removeEmptyAclRules(aclDataset) {\r\n    const aclRules = internal_getAclRules(aclDataset);\r\n    const aclRulesToRemove = aclRules.filter(isEmptyAclRule);\r\n    // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.\r\n    const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);\r\n    return updatedAclDataset;\r\n}\r\nfunction isEmptyAclRule(aclRule) {\r\n    // If there are Quads in there unrelated to Access Control,\r\n    // this is not an empty ACL rule that can be deleted:\r\n    if (Array.from(aclRule).some((quad) => !isAclQuad(quad))) {\r\n        return false;\r\n    }\r\n    // If the rule does not apply to any Resource, it is no longer working:\r\n    if (getIri(aclRule, acl.accessTo) === null &&\r\n        getIri(aclRule, acl.default) === null &&\r\n        getIri(aclRule, acl.defaultForNew) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify Access Modes, it is no longer working:\r\n    if (getIri(aclRule, acl.mode) === null) {\r\n        return true;\r\n    }\r\n    // If the rule does not specify whom it applies to, it is no longer working:\r\n    if (getIri(aclRule, acl.agent) === null &&\r\n        getIri(aclRule, acl.agentGroup) === null &&\r\n        getIri(aclRule, acl.agentClass) === null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isAclQuad(quad) {\r\n    const predicate = quad.predicate;\r\n    const object = quad.object;\r\n    if (predicate.equals(DataFactory.namedNode(rdf.type)) &&\r\n        object.equals(DataFactory.namedNode(acl.Authorization))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.accessTo)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.default)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.defaultForNew))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.mode)) &&\r\n        Object.values(internal_accessModeIriStrings).some((mode) => object.equals(DataFactory.namedNode(mode)))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.agent)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentGroup)) ||\r\n        predicate.equals(DataFactory.namedNode(acl.agentClass))) {\r\n        return true;\r\n    }\r\n    if (predicate.equals(DataFactory.namedNode(acl.origin))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * IRIs of potential Access Modes\r\n * @internal\r\n */\r\nconst internal_accessModeIriStrings = {\r\n    read: \"http://www.w3.org/ns/auth/acl#Read\",\r\n    append: \"http://www.w3.org/ns/auth/acl#Append\",\r\n    write: \"http://www.w3.org/ns/auth/acl#Write\",\r\n    control: \"http://www.w3.org/ns/auth/acl#Control\",\r\n};\r\n/** @internal\r\n * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)\r\n * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).\r\n * @param aclRules The set of rules to filter\r\n * @param targetIri The IRI of the target\r\n * @param targetType The property linking the rule to the target\r\n */\r\nfunction internal_getAclRulesForIri(aclRules, targetIri, targetType) {\r\n    return aclRules.filter((rule) => getIriAll(rule, targetType).includes(targetIri));\r\n}\r\n/** @internal\r\n * This function transforms a given set of rules into a map associating the IRIs\r\n * of the entities to which permissions are granted by these rules, and the permissions\r\n * granted to them. Additionally, it filters these entities based on the predicate\r\n * that refers to them in the rule.\r\n */\r\nfunction internal_getAccessByIri(aclRules, targetType) {\r\n    const targetIriAccess = {};\r\n    aclRules.forEach((rule) => {\r\n        const ruleTargetIri = getIriAll(rule, targetType);\r\n        const access = internal_getAccess(rule);\r\n        // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access\r\n        // Modes granted by those rules should be combined:\r\n        ruleTargetIri.forEach((targetIri) => {\r\n            targetIriAccess[targetIri] =\r\n                typeof targetIriAccess[targetIri] === \"undefined\"\r\n                    ? access\r\n                    : internal_combineAccessModes([targetIriAccess[targetIri], access]);\r\n        });\r\n    });\r\n    return targetIriAccess;\r\n}\r\n/**\r\n * Initialises a new ACL Rule that grants some access - but does not yet specify to whom.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param access Access mode that this Rule will grant\r\n */\r\nfunction internal_initialiseAclRule(access) {\r\n    let newRule = createThing();\r\n    newRule = setIri(newRule, rdf.type, acl.Authorization);\r\n    if (access.read) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);\r\n    }\r\n    if (access.append && !access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);\r\n    }\r\n    if (access.write) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);\r\n    }\r\n    if (access.control) {\r\n        newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);\r\n    }\r\n    return newRule;\r\n}\r\n/**\r\n * Creates a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.\r\n *\r\n * Note that non-ACL values will not be copied over.\r\n *\r\n * @hidden This is an internal utility function that should not be used directly by downstreams.\r\n * @param sourceRule ACL rule to duplicate.\r\n */\r\nfunction internal_duplicateAclRule(sourceRule) {\r\n    let targetRule = createThing();\r\n    targetRule = setIri(targetRule, rdf.type, acl.Authorization);\r\n    function copyIris(inputRule, outputRule, predicate) {\r\n        return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);\r\n    }\r\n    targetRule = copyIris(sourceRule, targetRule, acl.accessTo);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.default);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.defaultForNew);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agent);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.agentClass);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.origin);\r\n    targetRule = copyIris(sourceRule, targetRule, acl.mode);\r\n    return targetRule;\r\n}\r\nfunction internal_setAcl(resource, acl) {\r\n    return Object.assign(resource, { internal_acl: acl });\r\n}\r\nconst supportedActorPredicates = [\r\n    acl.agent,\r\n    acl.agentClass,\r\n    acl.agentGroup,\r\n    acl.origin,\r\n];\r\n/**\r\n * Given an ACL Rule, returns two new ACL Rules that cover all the input Rule's use cases,\r\n * except for giving the given Actor access to the given Resource.\r\n *\r\n * @param rule The ACL Rule that should no longer apply for a given Actor to a given Resource.\r\n * @param actor The Actor that should be removed from the Rule for the given Resource.\r\n * @param resourceIri The Resource to which the Rule should no longer apply for the given Actor.\r\n * @returns A tuple with the original ACL Rule without the given Actor, and a new ACL Rule for the given Actor for the remaining Resources, respectively.\r\n */\r\nfunction internal_removeActorFromRule(rule, actor, actorPredicate, resourceIri, ruleType) {\r\n    // If the existing Rule does not apply to the given Actor, we don't need to split up.\r\n    // Without this check, we'd be creating a new rule for the given Actor (ruleForOtherTargets)\r\n    // that would give it access it does not currently have:\r\n    if (!getIriAll(rule, actorPredicate).includes(actor)) {\r\n        const emptyRule = internal_initialiseAclRule({\r\n            read: false,\r\n            append: false,\r\n            write: false,\r\n            control: false,\r\n        });\r\n        return [rule, emptyRule];\r\n    }\r\n    // The existing rule will keep applying to Actors other than the given one:\r\n    const ruleWithoutActor = removeIri(rule, actorPredicate, actor);\r\n    // The actor might have been given other access in the existing rule, so duplicate it...\r\n    let ruleForOtherTargets = internal_duplicateAclRule(rule);\r\n    // ...but remove access to the original Resource...\r\n    ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === \"resource\" ? acl.accessTo : acl.default, resourceIri);\r\n    // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation\r\n    if (ruleType === \"default\") {\r\n        ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);\r\n    }\r\n    // ...and only apply the new Rule to the given Actor (because the existing Rule covers the others):\r\n    ruleForOtherTargets = setIri(ruleForOtherTargets, actorPredicate, actor);\r\n    supportedActorPredicates\r\n        .filter((predicate) => predicate !== actorPredicate)\r\n        .forEach((predicate) => {\r\n        ruleForOtherTargets = removeAll(ruleForOtherTargets, predicate);\r\n    });\r\n    return [ruleWithoutActor, ruleForOtherTargets];\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Actor's access.\r\n *\r\n * If rules for Actor's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Actors through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Actors for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param actor The Actor to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Actor for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction internal_setActorAccess$1(aclDataset, access, actorPredicate, accessType, actor) {\r\n    // First make sure that none of the pre-existing rules in the given ACL SolidDataset\r\n    // give the Agent access to the Resource:\r\n    let filteredAcl = aclDataset;\r\n    getThingAll(aclDataset).forEach((aclRule) => {\r\n        // Obtain both the Rule that no longer includes the given Actor,\r\n        // and a new Rule that includes all ACL Quads\r\n        // that do not pertain to the given Actor-Resource combination.\r\n        // Note that usually, the latter will no longer include any meaningful statements;\r\n        // we'll clean them up afterwards.\r\n        const [filteredRule, remainingRule] = internal_removeActorFromRule(aclRule, actor, actorPredicate, aclDataset.internal_accessTo, accessType);\r\n        filteredAcl = setThing(filteredAcl, filteredRule);\r\n        filteredAcl = setThing(filteredAcl, remainingRule);\r\n    });\r\n    // Create a new Rule that only grants the given Actor the given Access Modes:\r\n    let newRule = internal_initialiseAclRule(access);\r\n    newRule = setIri(newRule, accessType === \"resource\" ? acl.accessTo : acl.default, aclDataset.internal_accessTo);\r\n    newRule = setIri(newRule, actorPredicate, actor);\r\n    const updatedAcl = setThing(filteredAcl, newRule);\r\n    // Remove any remaining Rules that do not contain any meaningful statements:\r\n    return internal_removeEmptyAclRules(updatedAcl);\r\n}\r\nfunction internal_setResourceAcl(resource, acl) {\r\n    const newAcl = {\r\n        resourceAcl: acl,\r\n        fallbackAcl: null,\r\n    };\r\n    return internal_setAcl(resource, newAcl);\r\n}\r\nfunction internal_getResourceAcl(resource) {\r\n    return resource.internal_acl.resourceAcl;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verify whether a given SolidDataset was fetched together with its Access Control List.\r\n *\r\n * @param dataset A [[SolidDataset]] that may have its ACLs attached.\r\n * @returns True if `dataset` was fetched together with its ACLs.\r\n */\r\nfunction hasAcl(dataset) {\r\n    const potentialAcl = dataset;\r\n    return typeof potentialAcl.internal_acl === \"object\";\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a resource ACL (Access Control List) attached.\r\n *\r\n * The [[hasResourceAcl]] function checks that:\r\n * - a given Resource has a resource ACL attached, and\r\n * - the user calling [[hasResourceAcl]] has Control access to the Resource.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A Resource that might have an ACL attached.\r\n * @returns `true` if the Resource has a resource ACL attached that is accessible by the user.\r\n */\r\nfunction hasResourceAcl(resource) {\r\n    return (resource.internal_acl.resourceAcl !== null &&\r\n        getSourceUrl(resource) ===\r\n            resource.internal_acl.resourceAcl.internal_accessTo &&\r\n        resource.internal_resourceInfo.aclUrl ===\r\n            getSourceUrl(resource.internal_acl.resourceAcl));\r\n}\r\n/**\r\n * Experimental: fetch a SolidDataset and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available. This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request. Therefore, and because this function is still\r\n * experimental, prefer [[getSolidDataset]] instead.\r\n *\r\n * If the Resource does not advertise the ACL Resource (because the authenticated user does not have\r\n * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be\r\n * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),\r\n * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the\r\n * authenticated user.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.\r\n */\r\nasync function getSolidDatasetWithAcl(url, options = internal_defaultFetchOptions) {\r\n    const solidDataset = await getSolidDataset(url, options);\r\n    const acl = await internal_fetchAcl(solidDataset, options);\r\n    return internal_setAcl(solidDataset, acl);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieves a file, its resource ACL (Access Control List) if available,\r\n * and its fallback ACL from a URL and returns them as a blob.\r\n *\r\n * If the user calling the function does not have access to the file's resource ACL,\r\n * [[hasAccessibleAcl]] on the returned blob returns false.\r\n * If the user has access to the file's resource ACL but the resource ACL does not exist,\r\n * [[getResourceAcl]] on the returned blob returns null.\r\n * If the fallback ACL is inaccessible by the user,\r\n * [[getFallbackAcl]] on the returned blob returns null.\r\n *\r\n * ```{tip}\r\n * To retrieve the ACLs, the function results in multiple HTTP requests rather than a single\r\n * request as mandated by the Solid spec. As such, prefer [[getFile]] instead if you do not need the ACL.\r\n * ```\r\n *\r\n * @param url The URL of the fetched file\r\n * @param options Fetching options: a custom fetcher and/or headers.\r\n * @returns A file and its ACLs, if available to the authenticated user, as a blob.\r\n * @since 0.2.0\r\n */\r\nasync function getFileWithAcl(input, options = internal_defaultFetchOptions) {\r\n    const file = await getFile(input, options);\r\n    const acl = await internal_fetchAcl(file, options);\r\n    return internal_setAcl(file, acl);\r\n}\r\n/**\r\n * Experimental: fetch a Resource's metadata and its associated Access Control List.\r\n *\r\n * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if\r\n * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can\r\n * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to\r\n * provide this info in a single request.\r\n *\r\n * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because\r\n * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the\r\n * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be\r\n * `null`.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.\r\n */\r\nasync function getResourceInfoWithAcl(url, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfo(url, options);\r\n    const acl = await internal_fetchAcl(resourceInfo, options);\r\n    return internal_setAcl(resourceInfo, acl);\r\n}\r\nfunction getResourceAcl(resource) {\r\n    if (!hasResourceAcl(resource)) {\r\n        return null;\r\n    }\r\n    return resource.internal_acl.resourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Verifies whether the given Resource has a fallback ACL (Access Control List) attached.\r\n *\r\n * A fallback ACL for a Resource is inherited from the Resource's parent Container\r\n * (or another of its ancestor Containers) and applies if the Resource does\r\n * not have its own resource ACL.\r\n *\r\n * The [[hasFallbackAcl]] function checks that:\r\n * - a given Resource has a fallback ACL attached, and\r\n * - the user calling [[hasFallbackAcl]] has Control access to the Container\r\n * from which the Resource inherits its ACL.\r\n *\r\n * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].\r\n *\r\n * @param resource A [[SolidDataset]] that might have a fallback ACL attached.\r\n *\r\n * @returns `true` if the Resource has a fallback ACL attached that is accessible to the user.\r\n */\r\nfunction hasFallbackAcl(resource) {\r\n    return resource.internal_acl.fallbackAcl !== null;\r\n}\r\nfunction getFallbackAcl(dataset) {\r\n    if (!hasFallbackAcl(dataset)) {\r\n        return null;\r\n    }\r\n    return dataset.internal_acl.fallbackAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates an empty resource ACL (Access Control List) for a given Resource.\r\n *\r\n * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).\r\n * @returns An empty resource ACL for the given Resource.\r\n */\r\nfunction createAcl(targetResource) {\r\n    const emptyResourceAcl = Object.assign(dataset(), {\r\n        internal_accessTo: getSourceUrl(targetResource),\r\n        internal_resourceInfo: {\r\n            sourceIri: targetResource.internal_resourceInfo.aclUrl,\r\n            isRawData: false,\r\n            linkedResources: {},\r\n        },\r\n    });\r\n    return emptyResourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Creates a resource ACL (Access Control List), initialised from the fallback ACL\r\n * inherited from the given Resource's Container (or another of its ancestor Containers).\r\n * That is, the new ACL has the same rules/entries as the fallback ACL that currently\r\n * applies to the Resource.\r\n *\r\n * @param resource A Resource without its own resource ACL (see [[hasResourceAcl]]) but with an accessible fallback ACL (see [[hasFallbackAcl]]).\r\n * @returns A resource ACL initialised with the rules/entries from the Resource's fallback ACL.\r\n */\r\nfunction createAclFromFallbackAcl(resource) {\r\n    const emptyResourceAcl = createAcl(resource);\r\n    const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);\r\n    const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);\r\n    const newAclRules = defaultAclRules.map((rule) => {\r\n        rule = removeAll(rule, acl.default);\r\n        rule = removeAll(rule, acl.defaultForNew);\r\n        rule = setIri(rule, acl.accessTo, getSourceUrl(resource));\r\n        rule = setIri(rule, acl.default, getSourceUrl(resource));\r\n        return rule;\r\n    });\r\n    // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:\r\n    const initialisedResourceAcl = newAclRules.reduce(setThing, emptyResourceAcl);\r\n    return initialisedResourceAcl;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Saves the resource ACL for a Resource.\r\n *\r\n * @param resource The Resource to which the given resource ACL applies.\r\n * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function saveAclFor(resource, resourceAcl, options = internal_defaultFetchOptions) {\r\n    if (!hasAccessibleAcl(resource)) {\r\n        throw new Error(`Could not determine the location of the ACL for the Resource at [${getSourceUrl(resource)}]; possibly the current user does not have Control access to that Resource. Try calling \\`hasAccessibleAcl()\\` before calling \\`saveAclFor()\\`.`);\r\n    }\r\n    const savedDataset = await saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);\r\n    const savedAclDataset = Object.assign(savedDataset, {\r\n        internal_accessTo: getSourceUrl(resource),\r\n    });\r\n    return savedAclDataset;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the resource ACL (Access Control List) from a Resource.\r\n *\r\n * Once the resource ACL is removed from the Resource, the Resource relies on the\r\n * fallback ACL inherited from the Resource's parent Container (or another of its ancestor Containers).\r\n *\r\n * @param resource The Resource for which you want to delete the ACL.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function deleteAclFor(resource, options = internal_defaultFetchOptions) {\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const response = await config.fetch(resource.internal_resourceInfo.aclUrl, {\r\n        method: \"DELETE\",\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting the ACL of the Resource at [${getSourceUrl(resource)}] failed: [${response.status}] [${response.statusText}].`);\r\n    }\r\n    const storedResource = Object.assign(internal_cloneResource(resource), {\r\n        acl: {\r\n            resourceAcl: null,\r\n        },\r\n    });\r\n    return storedResource;\r\n}\r\n/**\r\n * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.\r\n *\r\n * This should generally only be true for SolidDatasets fetched by\r\n * [[getSolidDatasetWithAcl]].\r\n *\r\n * Please note that the Web Access Control specification is not yet finalised, and hence, this\r\n * function is still experimental and can change in a non-major release.\r\n *\r\n * @param dataset A [[SolidDataset]].\r\n * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.\r\n */\r\nfunction hasAccessibleAcl(dataset) {\r\n    return typeof dataset.internal_resourceInfo.aclUrl === \"string\";\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's explicitly-granted Access Modes for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Agent through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the Agent for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccess$2(resourceInfo, agent) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns all explicitly-granted Access Modes per Agent for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to Agents through other\r\n * ACL rules, e.g., public or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which Agents may have been granted access.\r\n * @returns Access Modes per Agent that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).\r\n */\r\nfunction getAgentAccessAll$2(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getAgentResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getAgentDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to an Agent for the Resource\r\n * associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the child Resources if the associated Resource is a Container (see [[getAgentDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the Resource associated with an ACL SolidDataset.\r\n */\r\nfunction getAgentResourceAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Agent for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules.\r\n * @returns Access Modes per Agent that have been explicitly granted for the Resource associated with an ACL SolidDataset.\r\n */\r\nfunction getAgentResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules for Agent's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction setAgentResourceAccess$1(aclDataset, agent, access) {\r\n    return internal_setActorAccess$1(aclDataset, access, acl.agent, \"resource\", agent);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns an Agent's Access Modes explicitly granted for the children of the\r\n * Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself (see [[getAgentResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.\r\n * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.\r\n * @returns Access Modes that have been explicitly granted to an Agent for the children of the Container associated with the given ACL.\r\n */\r\nfunction getAgentDefaultAccess(aclDataset, agent) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);\r\n    const agentAccessModes = agentResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(agentAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Agent, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n *\r\n * - Access Modes granted indirectly to the Agents through other ACL rules, e.g. public or group-specific permissions.\r\n * - Access Modes granted to the Agents for the Container Resource itself (see [[getAgentResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @returns Access Modes, per Agent, that have been explicitly granted for the children of the Container associated with the given ACL.\r\n */\r\nfunction getAgentDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const agentResourceRules = getAgentAclRules(resourceRules);\r\n    return getAccessByAgent(agentResourceRules);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set an Agent's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Agent's access.\r\n *\r\n * If rules already exist for the Agent in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.\r\n * - Access Modes granted to the Agent for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param agent The Agent to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Agent.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `agent`.\r\n */\r\nfunction setAgentDefaultAccess(aclDataset, agent, access) {\r\n    return internal_setActorAccess$1(aclDataset, access, acl.agent, \"default\", agent);\r\n}\r\nfunction getAgentAclRulesForAgent(aclRules, agent) {\r\n    return internal_getAclRulesForIri(aclRules, agent, acl.agent);\r\n}\r\nfunction getAgentAclRules(aclRules) {\r\n    return aclRules.filter(isAgentAclRule);\r\n}\r\nfunction isAgentAclRule(aclRule) {\r\n    return getIri(aclRule, acl.agent) !== null;\r\n}\r\nfunction getAccessByAgent(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agent);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Returns a Group's explicity-granted Access Modes for a given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes that have been explicitly granted to the `group` for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccess$2(resourceInfo, group) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns all explicitly-granted Access Modes per Group for the given Resource.\r\n *\r\n * The function does not return Access Modes granted indirectly to the Group through other\r\n * ACL rules, e.g., public permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Group may have been granted access.\r\n * @returns Access Modes per Group that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getGroupAccessAll$2(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        const resourceAcl = getResourceAcl(resourceInfo);\r\n        return getGroupResourceAccessAll(resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        const fallbackAcl = getFallbackAcl(resourceInfo);\r\n        return getGroupDefaultAccessAll(fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes explicitly granted to a Group for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to the Group for the child Resources if the associated Resource is a Container\r\n *   (see [[getGroupDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param group URL of the Group for which to retrieve what access it has to the Resource.\r\n * @returns Access Modes explicitly granted to a Group for the Resource associated with an ACL.\r\n */\r\nfunction getGroupResourceAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);\r\n    const groupAccessModes = groupResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the explicitly granted Access Modes per Group for the Resource associated\r\n * with an ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes per Group that have been explicitly granted for the Resource associated with an ACL.\r\n */\r\nfunction getGroupResourceAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(resourceRules);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns a Group's Access Modes explicitly granted for the children of the\r\n * Container associated with an ACL (Access ControlList).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself (see [[getGroupResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains ACL rules for a certain Container.\r\n * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.\r\n * @returns Access Modes that have been explicitly granted to the Group for the children of the Container associated with the given ACL.\r\n */\r\nfunction getGroupDefaultAccess(aclDataset, group) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);\r\n    const groupAccessModes = groupDefaultRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(groupAccessModes);\r\n}\r\n/**\r\n * ```{note} This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes, per Group, that have been explicitly granted for the children\r\n * of the Container associated with the given ACL (Access Control List).\r\n *\r\n * The function does not return:\r\n * - Access Modes granted indirectly to the Groups through other ACL rules, e.g. public permissions.\r\n * - Access Modes granted to the Groups for the Container Resource itself (see [[getGroupResourceAccessAll]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes per Group that have been explicitly granted for the children of the Container associated with the given ACL SolidDataset.\r\n */\r\nfunction getGroupDefaultAccessAll(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    return getAccessByGroup(defaultRules);\r\n}\r\nfunction getGroupAclRuleForGroup(rules, group) {\r\n    return internal_getAclRulesForIri(rules, group, acl.agentGroup);\r\n}\r\nfunction getAccessByGroup(aclRules) {\r\n    return internal_getAccessByIri(aclRules, acl.agentGroup);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Group.\r\n * Specifically, the function returns a new resource ACL initialised with the given ACL and\r\n * new rules for the Group's access.\r\n *\r\n * If rules for Groups's access already exist in the given ACL, in the returned ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n *\r\n * - Access Modes granted indirectly to Groups through other ACL rules, e.g., public or Agent-specific permissions.\r\n * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group The Group to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Group for the Resource.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `group`.\r\n * @since 1.4.0\r\n */\r\nfunction setGroupResourceAccess$1(aclDataset, group, access) {\r\n    return internal_setActorAccess$1(aclDataset, access, acl.agentGroup, \"resource\", group);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set a Group's Access Modes for the Container's children.\r\n * Specifically, the function returns a new default ACL initialised with the given ACL and\r\n * new rules for the Group's access.\r\n *\r\n * If rules already exist for the Group in the given ACL, in the returned ACL, they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public or Agent-specific permissions.\r\n * - Access Modes granted to the Group for the Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access-Control List rules.\r\n * @param group The Group to grant specific Access Modes.\r\n * @param access The Access Modes to grant to the Group.\r\n * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `group`.\r\n * @since 1.4.0\r\n */\r\nfunction setGroupDefaultAccess(aclDataset, group, access) {\r\n    return internal_setActorAccess$1(aclDataset, access, acl.agentGroup, \"default\", group);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for a Resource.\r\n *\r\n * This function does not return Access Modes granted to specific Agents\r\n * through other ACL (Access Control List) rules, e.g., agent- or group-specific permissions.\r\n *\r\n * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.\r\n * @returns Access Modes granted to the public in general for the Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).\r\n */\r\nfunction getPublicAccess$2(resourceInfo) {\r\n    if (hasResourceAcl(resourceInfo)) {\r\n        return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);\r\n    }\r\n    if (hasFallbackAcl(resourceInfo)) {\r\n        return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the Resource\r\n * associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to specific Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container (see [[getPublicDefaultAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @returns Access Modes granted to the public in general for the Resource associated with the `aclDataset`.\r\n */\r\nfunction getPublicResourceAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Returns the Access Modes granted to the public in general for the child Resources\r\n * of the Container associated with an ACL (Access Control List).\r\n *\r\n * This function does not return:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to the Container Resource itself (see [[getPublicResourceAccess]] instead).\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.\r\n * @returns Access Modes granted to the public in general for the children of the Container associated with the given `aclDataset`.\r\n */\r\nfunction getPublicDefaultAccess(aclDataset) {\r\n    const allRules = internal_getAclRules(aclDataset);\r\n    const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);\r\n    const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);\r\n    const publicAccessModes = publicResourceRules.map(internal_getAccess);\r\n    return internal_combineAccessModes(publicAccessModes);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the resource ACL (Access Control List) to set the Access Modes for the public.\r\n * Specifically, the function returns a new resource ACL (Access Control List) initialised\r\n * with the given resource ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to child Resources if the associated Resource is a Container.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new resource ACL initialised with the given `aclDataset` and public `access`.\r\n */\r\nfunction setPublicResourceAccess$1(aclDataset, access) {\r\n    return internal_setActorAccess$1(aclDataset, access, acl.agentClass, \"resource\", foaf.Agent);\r\n}\r\n/**\r\n * ```{note}\r\n * This function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Modifies the default ACL (Access Control List) to set the public's default Access Modes\r\n * to child resources. Specifically, the function returns a new default ACL initialised\r\n * with the given default ACL and new rules for the given public access.\r\n *\r\n * If rules for public access already exist in the given ACL, in the *returned* ACL,\r\n * they are replaced by the new rules.\r\n *\r\n * This function does not modify:\r\n * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.\r\n * - Access Modes to Container Resource itself.\r\n * - The original ACL.\r\n *\r\n * @param aclDataset The SolidDataset that contains Access Control List rules.\r\n * @param access The Access Modes to grant to the public.\r\n * @returns A new default ACL initialised with the given `aclDataset` and public `access`.\r\n */\r\nfunction setPublicDefaultAccess(aclDataset, access) {\r\n    return internal_setActorAccess$1(aclDataset, access, acl.agentClass, \"default\", foaf.Agent);\r\n}\r\nfunction getClassAclRulesForClass(aclRules, agentClass) {\r\n    return aclRules.filter((rule) => appliesToClass(rule, agentClass));\r\n}\r\nfunction appliesToClass(aclRule, agentClass) {\r\n    return getIriAll(aclRule, acl.agentClass).includes(agentClass);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nfunction setMockAclUrl(resource, aclUrl) {\r\n    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\r\n        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl: aclUrl }),\r\n    });\r\n    return resourceWithAclUrl;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code. For use in **unit tests** that\r\n * require a [[SolidDataset]] with a resource ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n * @since 0.2.0\r\n */\r\nfunction addMockResourceAclTo(resource) {\r\n    var _a;\r\n    const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : \"https://your.pod/mock-acl.ttl\";\r\n    const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {\r\n        internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), { aclUrl: aclUrl }),\r\n    });\r\n    const aclDataset = createAcl(resourceWithAclUrl);\r\n    const resourceWithResourceAcl = internal_setAcl(resourceWithAclUrl, {\r\n        resourceAcl: aclDataset,\r\n        fallbackAcl: null,\r\n    });\r\n    return resourceWithResourceAcl;\r\n}\r\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[SolidDataset]] with a fallback ACL (Access Control List).\r\n * ```\r\n *\r\n * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].\r\n *\r\n * @param resource The Resource to mock up with new fallback ACL.\r\n * @returns The input Resource with an empty fallback ACL attached.\r\n * @since 0.2.0\r\n */\r\nfunction addMockFallbackAclTo(resource) {\r\n    const containerUrl = internal_getContainerPath(getSourceIri(resource));\r\n    const aclUrl = containerUrl + \".acl\";\r\n    const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);\r\n    const aclDataset = createAcl(mockContainer);\r\n    const resourceWithFallbackAcl = internal_setAcl(internal_cloneResource(resource), {\r\n        resourceAcl: null,\r\n        fallbackAcl: aclDataset,\r\n    });\r\n    return resourceWithFallbackAcl;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @hidden */\r\nfunction internal_getAcr(resource) {\r\n    if (!hasAccessibleAcr(resource)) {\r\n        throw new Error(`An Access Control Resource for [${getSourceUrl(resource)}] is not available. This could be because the current user is not allowed to see it, or because their Pod Server does not support Access Control Resources.`);\r\n    }\r\n    return resource.internal_acp.acr;\r\n}\r\n/** @hidden */\r\nfunction internal_setAcr(resource, acr) {\r\n    return Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: Object.assign(Object.assign({}, resource.internal_acp), { acr: acr }),\r\n    });\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new [[Control]].\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_createControl(options) {\r\n    let control = createThing(options);\r\n    control = setIri(control, rdf.type, acp.AccessControl);\r\n    return control;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Find an [[Control]] with a given URL in a given Resource with an Access Control Resource.\r\n *\r\n * @returns The requested Access Control, or `null` if it could not be found.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_getControl(withAccessControlResource, url, options) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const foundThing = getThing(acr, url, options);\r\n    if (foundThing === null ||\r\n        !getIriAll(foundThing, rdf.type).includes(acp.AccessControl)) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Control]]s in the Access Control Resource of a given Resource.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_getControlAll(withAccessControlResource, options) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const foundThings = getThingAll(acr, options);\r\n    return foundThings.filter((foundThing) => getIriAll(foundThing, rdf.type).includes(acp.AccessControl));\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert an [[Control]] into the [[AccessControlResource]] of a Resource, replacing previous\r\n * instances of that Access Control.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource into which to insert an Access Control.\r\n * @param control The Control to insert into the Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, but with the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction internal_setControl(withAccessControlResource, control) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const updatedAcr = setThing(acr, control);\r\n    const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the Resource to which\r\n * the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_addPolicyUrl(accessControl, policyUrl) {\r\n    return addIri(accessControl, acp.apply, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_getPolicyUrlAll(accessControl) {\r\n    return getIriAll(accessControl, acp.apply);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the Resource to which the given [[Control]] is linked,\r\n * and which can be removed by anyone with Write access to the Access Control Resource that contains\r\n * the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @param policyUrl URL of the Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removePolicyUrl(accessControl, policyUrl) {\r\n    return removeIri(accessControl, acp.apply, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the Resource to which the given [[Control]] is linked, and\r\n * which can be removed by anyone with Write access to the Access Control Resource that contains the\r\n * [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removePolicyUrlAll(accessControl) {\r\n    return removeAll(accessControl, acp.apply);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an [[Control]] such that that Policy applies to the children of the\r\n * Resource to which the [[Control]] is linked.\r\n *\r\n * @param accessControl The [[Control]] to which the Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the children of the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it as a Member Policy.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_addMemberPolicyUrl(accessControl, policyUrl) {\r\n    return addIri(accessControl, acp.applyMembers, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all Policies that apply to the children of the Resource to which the given [[Control]] is\r\n * linked, and which can be removed by anyone with Write access to the Access Control Resource that\r\n * contains the [[Control]].\r\n *\r\n * @param accessControl The [[Control]] of which to get the Policies.\r\n * @returns The Policies that are listed in this [[Control]] as applying to the children of the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_getMemberPolicyUrlAll(accessControl) {\r\n    return getIriAll(accessControl, acp.applyMembers);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove a given Policy that applies to the children of the Resource to which the given Access\r\n * Control is linked, and which can be removed by anyone with Write access to the Access Control\r\n * Resource that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policy.\r\n * @param policyUrl URL of the Member Policy that should no longer apply to the Resource to which the [[Control]] is linked.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given Member Policy removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removeMemberPolicyUrl(accessControl, policyUrl) {\r\n    return removeIri(accessControl, acp.applyMembers, policyUrl);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove all Policies that apply to the children of the Resource to which the given Access Control\r\n * is linked, and which can be removed by anyone with Write access to the Access Control Resource\r\n * that contains the Access Control.\r\n *\r\n * @param accessControl The [[Control]] of which to remove the Member Policies.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with all Member Policies removed from it.\r\n * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.\r\n * @deprecated\r\n */\r\nfunction internal_removeMemberPolicyUrlAll(accessControl) {\r\n    return removeAll(accessControl, acp.applyMembers);\r\n}\r\nfunction internal_getInitialisedControl(resourceWithAcr) {\r\n    const allControls = internal_getControlAll(resourceWithAcr);\r\n    return allControls.length === 0 ? internal_createControl() : allControls[0];\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a Resource, check whether it is governed by Access Policies.\r\n * (Specifically, a Resource that is governed by Access Policies will refer to exactly one Access\r\n * Control Resource, and expose that to users who are allowed to see or modify access to the given\r\n * Resource.)\r\n *\r\n * @param resource Resource which may or may not be governed by Access Policies.\r\n * @returns True if the Resource refers to an Access Control Resource and is hence governed by Access Policies, or false if it does not.\r\n */\r\nfunction hasLinkedAcr(resource) {\r\n    return (hasServerResourceInfo(resource) &&\r\n        Array.isArray(resource.internal_resourceInfo.linkedResources[acp.accessControl]) &&\r\n        resource.internal_resourceInfo.linkedResources[acp.accessControl].length ===\r\n            1);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access\r\n * Control Resource itself, rather than the Resource it governs.\r\n *\r\n * @param resourceWithAcr The [[Control]] to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resource.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given ACR Policy added to it.\r\n */\r\nfunction addAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    var _a;\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({ url: acrUrl });\r\n    acrThing = addIri(acrThing, acp.access, policyUrl);\r\n    const updatedAcr = setThing(acr, acrThing);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access\r\n * Control Resources of child Resources.\r\n *\r\n * @param resourceWithAcr The [[Control]] to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Access Control Resources of children of the Resource.\r\n * @returns A new [[Control]] equal to the given [[Control]], but with the given ACR Policy added to it.\r\n */\r\nfunction addMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    var _a;\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({ url: acrUrl });\r\n    acrThing = addIri(acrThing, acp.accessMembers, policyUrl);\r\n    const updatedAcr = setThing(acr, acrThing);\r\n    const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to an Access Control Resource itself, rather than\r\n * to the Resource it governs.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Access Control Resource.\r\n */\r\nfunction getAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, acp.access);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the Access Control Resources of the given Resource's children.\r\n */\r\nfunction getMemberAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return [];\r\n    }\r\n    return getIriAll(acrThing, acp.accessMembers);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new [[Control]] equal to the given Access Control, but with the given ACR Policy removed from it.\r\n */\r\nfunction removeAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeIri(acrThing, acp.access, policyUrl);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Access Control Resources of the\r\n * Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children's ACRs the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new Access Control equal to the given Access Control, but with the given Member ACR Policy removed from it.\r\n */\r\nfunction removeMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeIri(acrThing, acp.accessMembers, policyUrl);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to an Access Control Resource itself.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to which no more Policies should apply.\r\n * @returns A new [[Control]] equal to the given [[Control]], but without any Policy applying to it.\r\n */\r\nfunction removeAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeAll(acrThing, acp.access);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Access Control Resources of the Resource's\r\n * children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children's ACRs.\r\n * @returns A new [[Control]] equal to the given [[Control]], but without any Policy applying to its children's ACRs.\r\n */\r\nfunction removeMemberAcrPolicyUrlAll(resourceWithAcr) {\r\n    const acr = internal_getAcr(resourceWithAcr);\r\n    const acrUrl = getSourceUrl(acr);\r\n    const acrThing = getThing(acr, acrUrl);\r\n    if (acrThing === null) {\r\n        return resourceWithAcr;\r\n    }\r\n    const updatedAcrThing = removeAll(acrThing, acp.accessMembers);\r\n    const updatedAcr = setThing(acr, updatedAcrThing);\r\n    return internal_setAcr(resourceWithAcr, updatedAcr);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that Resource.\r\n *\r\n * @param resourceWithAcr The Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource.\r\n * @returns A new Resource equal to the given Resource, but with the given ACR Policy added to it.\r\n */\r\nfunction addPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const control = internal_getInitialisedControl(resourceWithAcr);\r\n    const updatedControl = internal_addPolicyUrl(control, policyUrl);\r\n    const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that\r\n * Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource to which the ACR Policy should be added.\r\n * @param policyUrl URL of the Policy that should apply to the given Resource's children.\r\n * @returns A new Resource equal to the given Resource, but with the given Member ACR Policy added to it.\r\n */\r\nfunction addMemberPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const control = internal_getInitialisedControl(resourceWithAcr);\r\n    const updatedControl = internal_addMemberPolicyUrl(control, policyUrl);\r\n    const updatedResource = internal_setControl(resourceWithAcr, updatedControl);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.\r\n * @returns URLs of the Policies that govern access to the given Resource.\r\n */\r\nfunction getPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const policyUrlsByControl = controls.map((control) => internal_getPolicyUrlAll(control));\r\n    const uniquePolicyUrls = new Set();\r\n    policyUrlsByControl.forEach((policyUrls) => {\r\n        policyUrls.forEach((url) => uniquePolicyUrls.add(url));\r\n    });\r\n    return Array.from(uniquePolicyUrls);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the URLs of the Access Policies that apply to a Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.\r\n * @returns URLs of the Policies that govern access to the given Resource's children.\r\n */\r\nfunction getMemberPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const memberPolicyUrlsByControl = controls.map((control) => internal_getMemberPolicyUrlAll(control));\r\n    const uniquePolicyUrls = new Set();\r\n    memberPolicyUrlsByControl.forEach((policyUrls) => {\r\n        policyUrls.forEach((url) => uniquePolicyUrls.add(url));\r\n    });\r\n    return Array.from(uniquePolicyUrls);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new Resource equal to the given Resource, but with the given Policy removed from it.\r\n */\r\nfunction removePolicyUrl(resourceWithAcr, policyUrl) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removePolicyUrl(control, policyUrl));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop the URL of a given [[Policy]] from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource to whose children the given URL of a Policy should no longer apply.\r\n * @param policyUrl The URL of the Policy that should no longer apply.\r\n * @returns A new Resource equal to the given Resource but with the given Member Policy removed from it.\r\n */\r\nfunction removeMemberPolicyUrl(resourceWithAcr, policyUrl) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removeMemberPolicyUrl(control, policyUrl));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to a Resource.\r\n *\r\n * @param resourceWithAcr The Resource, with its Access Control Resource, to which no more Policies should apply.\r\n * @returns A new Resource equal to the given Resource, but without any Policy applying to it.\r\n */\r\nfunction removePolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removePolicyUrlAll(control));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Stop all URL of Access Policies from applying to the Resource's children.\r\n *\r\n * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children.\r\n * @returns A new Resource equal to the given Resource, but without any Policy applying to its children.\r\n */\r\nfunction removeMemberPolicyUrlAll(resourceWithAcr) {\r\n    const controls = internal_getControlAll(resourceWithAcr);\r\n    const updatedControls = controls.map((control) => internal_removeMemberPolicyUrlAll(control));\r\n    const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);\r\n    return updatedResource;\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Control]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param control The Control to get a human-readable representation of.\r\n */\r\nfunction acrAsMarkdown(resourceWithAcr) {\r\n    let markdown = `# Access control for ${getSourceUrl(resourceWithAcr)}\\n`;\r\n    const policyUrls = getPolicyUrlAll(resourceWithAcr);\r\n    const memberPolicyUrls = getMemberPolicyUrlAll(resourceWithAcr);\r\n    const acrPolicyUrls = getAcrPolicyUrlAll(resourceWithAcr);\r\n    const memberAcrPolicyUrls = getMemberAcrPolicyUrlAll(resourceWithAcr);\r\n    if (policyUrls.length === 0 &&\r\n        memberPolicyUrls.length === 0 &&\r\n        acrPolicyUrls.length === 0 &&\r\n        memberAcrPolicyUrls.length === 0) {\r\n        markdown += \"\\n<no policies specified yet>\\n\";\r\n    }\r\n    if (policyUrls.length > 0) {\r\n        markdown += \"\\nThe following policies apply to this resource:\\n- \";\r\n        markdown += policyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (acrPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the access control resource for this resource:\\n- \";\r\n        markdown += acrPolicyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (memberPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the children of this resource:\\n- \";\r\n        markdown += memberPolicyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (memberAcrPolicyUrls.length > 0) {\r\n        markdown +=\r\n            \"\\nThe following policies apply to the access control resources for children of this resource:\\n- \";\r\n        markdown += memberAcrPolicyUrls.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    return markdown;\r\n}\n\nvar acpControl = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  hasLinkedAcr: hasLinkedAcr,\n  addAcrPolicyUrl: addAcrPolicyUrl,\n  addMemberAcrPolicyUrl: addMemberAcrPolicyUrl,\n  getAcrPolicyUrlAll: getAcrPolicyUrlAll,\n  getMemberAcrPolicyUrlAll: getMemberAcrPolicyUrlAll,\n  removeAcrPolicyUrl: removeAcrPolicyUrl,\n  removeMemberAcrPolicyUrl: removeMemberAcrPolicyUrl,\n  removeAcrPolicyUrlAll: removeAcrPolicyUrlAll,\n  removeMemberAcrPolicyUrlAll: removeMemberAcrPolicyUrlAll,\n  addPolicyUrl: addPolicyUrl,\n  addMemberPolicyUrl: addMemberPolicyUrl,\n  getPolicyUrlAll: getPolicyUrlAll,\n  getMemberPolicyUrlAll: getMemberPolicyUrlAll,\n  removePolicyUrl: removePolicyUrl,\n  removeMemberPolicyUrl: removeMemberPolicyUrl,\n  removePolicyUrlAll: removePolicyUrlAll,\n  removeMemberPolicyUrlAll: removeMemberPolicyUrlAll,\n  acrAsMarkdown: acrAsMarkdown\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and the ACR that applies to it, if available to the authenticated user.\r\n */\r\nasync function getSolidDatasetWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const solidDataset = await getSolidDataset(urlString, config);\r\n    const acp = await fetchAcr(solidDataset, config);\r\n    return Object.assign(solidDataset, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a file and its associated Access Control Resource (if available to the current user).\r\n *\r\n * @param url URL of the file to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A file and the ACR that applies to it, if available to the authenticated user.\r\n */\r\nasync function getFileWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const file = await getFile(urlString, config);\r\n    const acp = await fetchAcr(file, config);\r\n    return Object.assign(file, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Retrieve information about a Resource and its associated Access Control Resource (if available to\r\n * the current user), without fetching the Resource itself.\r\n *\r\n * @param url URL of the Resource about which to fetch its information.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Metadata describing a Resource, and the ACR that applies to it, if available to the authenticated user.\r\n */\r\nasync function getResourceInfoWithAcr(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    const acp = await fetchAcr(resourceInfo, config);\r\n    return Object.assign(resourceInfo, acp);\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a SolidDataset, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the SolidDataset to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A SolidDataset and either the ACL access data or the ACR access data, if available to the current user.\r\n */\r\nasync function getSolidDatasetWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const solidDataset = await getSolidDataset(urlString, config);\r\n    if (hasAccessibleAcl(solidDataset)) {\r\n        const acl = await internal_fetchAcl(solidDataset, config);\r\n        return internal_setAcl(solidDataset, acl);\r\n    }\r\n    else {\r\n        const acr = await fetchAcr(solidDataset, config);\r\n        return Object.assign(solidDataset, acr);\r\n    }\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch a File, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the File to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A File and either the ACL access data or the ACR access data, if available to the current user.\r\n */\r\nasync function getFileWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const file = await getFile(urlString, config);\r\n    if (hasAccessibleAcl(file)) {\r\n        const acl = await internal_fetchAcl(file, config);\r\n        return internal_setAcl(file, acl);\r\n    }\r\n    else {\r\n        const acr = await fetchAcr(file, config);\r\n        return Object.assign(file, acr);\r\n    }\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Fetch information about a Resource, and:\r\n * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to\r\n *                                          the current user), and all the Access Control Policies\r\n *                                          referred to therein, if available to the current user.\r\n * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current\r\n *                                          user), or its Fallback ACL if it does not exist.\r\n *\r\n * @param url URL of the Resource information about which to fetch.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns Information about a Resource and either the ACL access data or the ACR access data, if available to the current user.\r\n */\r\nasync function getResourceInfoWithAccessDatasets(url, options = internal_defaultFetchOptions) {\r\n    const urlString = internal_toIriString(url);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const resourceInfo = await getResourceInfo(urlString, config);\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        const acl = await internal_fetchAcl(resourceInfo, config);\r\n        return internal_setAcl(resourceInfo, acl);\r\n    }\r\n    else {\r\n        const acr = await fetchAcr(resourceInfo, config);\r\n        return Object.assign(resourceInfo, acr);\r\n    }\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Save a Resource's Access Control Resource.\r\n *\r\n * @param resource Resource with an Access Control Resource that should be saved.\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n */\r\nasync function saveAcrFor(resource, options = internal_defaultFetchOptions) {\r\n    const acr = internal_getAcr(resource);\r\n    const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);\r\n    const savedAcr = await saveSolidDatasetAt(getSourceUrl(acr), acr, config);\r\n    return internal_setAcr(resource, savedAcr);\r\n}\r\n/**\r\n * @param resource Resource of which to check whether it has an Access Control Resource attached.\r\n * @returns Boolean representing whether the given Resource has an Access Control Resource attached for use in e.g. [[getControl]].\r\n */\r\nfunction hasAccessibleAcr(resource) {\r\n    return (typeof resource.internal_acp === \"object\" &&\r\n        resource.internal_acp !== null &&\r\n        typeof resource.internal_acp.acr === \"object\" &&\r\n        resource.internal_acp.acr !== null);\r\n}\r\nasync function fetchAcr(resource, options) {\r\n    if (!hasLinkedAcr(resource)) {\r\n        return {\r\n            internal_acp: {\r\n                acr: null,\r\n            },\r\n        };\r\n    }\r\n    let acr;\r\n    try {\r\n        acr = await getSolidDataset(\r\n        // Whereas a Resource can generally have multiple linked Resources for the same relation,\r\n        // it can only have one Access Control Resource for that ACR to be valid.\r\n        // Hence the accessing of [0] directly:\r\n        resource.internal_resourceInfo.linkedResources[acp.accessControl][0], options);\r\n    }\r\n    catch (e) {\r\n        return {\r\n            internal_acp: {\r\n                acr: null,\r\n            },\r\n        };\r\n    }\r\n    getSourceUrl(resource);\r\n    getSourceUrl(acr);\r\n    const acrDataset = Object.assign(acr, {\r\n        accessTo: getSourceUrl(resource),\r\n    });\r\n    const acpInfo = {\r\n        internal_acp: {\r\n            acr: acrDataset,\r\n        },\r\n    };\r\n    return acpInfo;\r\n}\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * To make it easy to fetch all the relevant Access Policy Resources,\r\n * this function returns all referenced Access Policy Resources referenced in an\r\n * Access Control Resource.\r\n * In other words, if Access Controls refer to different Policies in the same\r\n * Access Policy Resource, this function will only return that Access Policy\r\n * Resource's URL once.\r\n *\r\n * @param withAcr A Resource with an Access Control Resource attached.\r\n * @returns List of all unique Access Policy Resources that are referenced in the given Access Control Resource.\r\n */\r\nfunction getReferencedPolicyUrlAll(withAcr) {\r\n    const policyUrls = getPolicyUrlAll(withAcr)\r\n        .map(getResourceUrl)\r\n        .concat(getMemberPolicyUrlAll(withAcr).map(getResourceUrl))\r\n        .concat(getAcrPolicyUrlAll(withAcr).map(getResourceUrl))\r\n        .concat(getMemberAcrPolicyUrlAll(withAcr).map(getResourceUrl));\r\n    const uniqueUrls = Array.from(new Set(policyUrls));\r\n    return uniqueUrls;\r\n}\r\n/**\r\n * To verify whether two URLs are at the same location, we need to strip the hash.\r\n * This function does that.\r\n */\r\nfunction getResourceUrl(urlWithHash) {\r\n    const url = new URL(urlWithHash);\r\n    url.hash = \"\";\r\n    return url.href;\r\n}\n\nvar acpAcp = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSolidDatasetWithAcr: getSolidDatasetWithAcr,\n  getFileWithAcr: getFileWithAcr,\n  getResourceInfoWithAcr: getResourceInfoWithAcr,\n  getSolidDatasetWithAccessDatasets: getSolidDatasetWithAccessDatasets,\n  getFileWithAccessDatasets: getFileWithAccessDatasets,\n  getResourceInfoWithAccessDatasets: getResourceInfoWithAccessDatasets,\n  saveAcrFor: saveAcrFor,\n  hasAccessibleAcr: hasAccessibleAcr,\n  getReferencedPolicyUrlAll: getReferencedPolicyUrlAll\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * NOTE: Don't export for now (i.e. if exported, should this be `isAcpRule()` so\r\n * as not to clash with `isAclRule()`.\r\n *\r\n * @param thing the [[Thing]] to check to see if it's an ACP rule or not\r\n */\r\nfunction isRule(thing) {\r\n    return getIriAll(thing, rdf.type).includes(acp.Rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since Unreleased\r\n */\r\nfunction addRequiredRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that refines the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since Unreleased\r\n */\r\nfunction removeRequiredRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrites the rule refining the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is **not** present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy requires.\r\n * @returns A new [[Policy]] clone of the original one, with the required rules replaced.\r\n * @since Unreleased\r\n */\r\nfunction setRequiredRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.allOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]]'s required by the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the required [[Rule]]'s\r\n * @since unreleased\r\n */\r\nfunction getRequiredRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.allOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since Unreleased\r\n */\r\nfunction addOptionalRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that extends the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since Unreleased\r\n */\r\nfunction removeOptionalRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the rule extending the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the optional rules replaced.\r\n * @since Unreleased\r\n */\r\nfunction setOptionalRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.anyOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]]'s accepted by the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the optional [[Rule]]'s\r\n * @since unreleased\r\n */\r\nfunction getOptionalRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.anyOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Add a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rule The rule to add to the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the new rule added.\r\n * @since Unreleased\r\n */\r\nfunction addForbiddenRuleUrl(policy, rule) {\r\n    return addIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes a rule that restricts the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the forbidden rules,\r\n * they will **not** be granted access.\r\n * @param policy The [[Policy]] from which the rule should be removed.\r\n * @param rule The rule to remove from the policy.\r\n * @returns A new [[Policy]] clone of the original one, with the rule removed.\r\n * @since Unreleased\r\n */\r\nfunction removeForbiddenRuleUrl(policy, rule) {\r\n    return removeIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Set the rules restrincting the scope of a given the [[Policy]]. If an agent\r\n * requesting access to a resource is present in **any** of the required rules,\r\n * they will not be granted access.\r\n * @param policy The [[Policy]] to which the rule should be added.\r\n * @param rules The rules the policy accepts.\r\n * @returns A new [[Policy]] clone of the original one, with the optional rules replaced.\r\n * @since Unreleased\r\n */\r\nfunction setForbiddenRuleUrl(policy, rule) {\r\n    return setIri(policy, acp.noneOf, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]]'s forbidden by the given [[Policy]]\r\n * @param policy The [[policy]] from which the rules should be read.\r\n * @returns A list of the forbidden [[Rule]]'s\r\n * @since unreleased\r\n */\r\nfunction getForbiddenRuleUrlAll(policy) {\r\n    return getIriAll(policy, acp.noneOf);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Rule]].\r\n *\r\n * @param url URL that identifies this [[Rule]].\r\n */\r\nfunction createRule(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let ruleThing = createThing({ url: stringUrl });\r\n    ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);\r\n    return ruleThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Rule]] with the given URL from an [[RuleDataset]].\r\n *\r\n * @param ruleResource The Resource that contains the given [[Rule]].\r\n * @param url URL that identifies this [[Rule]].\r\n * @returns The requested [[Rule]], if it exists, or `null` if it does not.\r\n */\r\nfunction getRule(ruleResource, url) {\r\n    const foundThing = getThing(ruleResource, url);\r\n    if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Rule) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Gets the [[Rule]]s from a [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero of more) [[Rule]]s.\r\n * @returns The [[Rule]]s contained in this resource.\r\n */\r\nfunction getRuleAll(ruleResource) {\r\n    const things = getThingAll(ruleResource);\r\n    return things.filter(isRule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Removes the given [[Rule]] from the given [[SolidDataset]].\r\n *\r\n * @param ruleResource The Resource that contains (zero of more) [[Rule]]s.\r\n * @returns A new RuleDataset equal to the given Rule Resource, but without the given Rule.\r\n */\r\nfunction removeRule(ruleResource, rule) {\r\n    return removeThing(ruleResource, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Rule]] into the given [[SolidDataset]], replacing previous\r\n * instances of that Rule.\r\n *\r\n * @param ruleResource The Resource that contains (zero of more) [[Rule]]s.\r\n * @returns A new RuleDataset equal to the given Rule Resource, but with the given Rule.\r\n */\r\nfunction setRule(ruleResource, rule) {\r\n    return setThing(ruleResource, rule);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * List all the agents a [[Rule]] applies **directly** to. This will not include agents\r\n * that are part of a group the [[Rule]] applies to, nor will it include specific agent\r\n * classes, such as authenticated or public agents.\r\n *\r\n * @param rule The rule from which agents are read.\r\n * @returns A list of the WebIDs of agents included in the rule.\r\n * @since Unreleased\r\n */\r\nfunction getAgentAll(rule) {\r\n    return getIriAll(rule, acp.agent).filter((agent) => agent !== acp.PublicAgent &&\r\n        agent !== acp.AuthenticatedAgent &&\r\n        agent !== acp.CreatorAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the agents the [[Rule]] applies to with the provided agents.\r\n *\r\n * @param rule The rule for which agents are set.\r\n * @param agents The list of agents the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of agents.\r\n * @since Unreleased\r\n */\r\nfunction setAgent(rule, agent) {\r\n    // Preserve the special agent classes authenticated and public, which we\r\n    // don't want to overwrite with this function.\r\n    const isPublic = hasPublic(rule);\r\n    const isAuthenticated = hasAuthenticated(rule);\r\n    let result = setIri(rule, acp.agent, agent);\r\n    // Restore public and authenticated\r\n    result = setPublic(result, isPublic);\r\n    result = setAuthenticated(result, isAuthenticated);\r\n    return result;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional agent.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional agent.\r\n * @param agent The agent the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional agent.\r\n * @since Unreleased\r\n */\r\nfunction addAgent(rule, agent) {\r\n    return addIri(rule, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given agent directly. This will not\r\n * remove the agent from any groups the rule applies to.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given agent.\r\n * @param agent The agent the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given agent.\r\n * @since Unreleased\r\n */\r\nfunction removeAgent(rule, agent) {\r\n    return removeIri(rule, acp.agent, agent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Lists all the groups a [[Rule]] applies to.\r\n *\r\n * @param rule The rule from which groups are read.\r\n * @returns A list of the [[URL]]'s of groups included in the rule.\r\n * @since Unreleased\r\n */\r\nfunction getGroupAll(rule) {\r\n    return getIriAll(rule, acp.group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Overwrite the groups the [[Rule]] applies to with the provided groups.\r\n *\r\n * @param rule The rule for which groups are set.\r\n * @param agents The list of groups the rule should apply to.\r\n * @returns A copy of the input rule, applying to a different set of groups.\r\n * @since Unreleased\r\n */\r\nfunction setGroup(rule, group) {\r\n    return setIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Apply the [[Rule]] to an additional group.\r\n *\r\n * @param rule The [[Rule]] to be applied to an additional group.\r\n * @param agent The group the [[Rule]] should apply to.\r\n * @returns A copy of the [[Rule]], applying to an additional group.\r\n * @since Unreleased\r\n */\r\nfunction addGroup(rule, group) {\r\n    return addIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Prevent the [[Rule]] from applying to a given group.\r\n *\r\n * @param rule The [[Rule]] that should no longer apply to a given group.\r\n * @param agent The group the rule should no longer apply to.\r\n * @returns A copy of the rule, not applying to the given group.\r\n * @since Unreleased\r\n */\r\nfunction removeGroup(rule, group) {\r\n    return removeIri(rule, acp.group, group);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any agent.\r\n *\r\n * @param rule The rule checked for public access.\r\n * @returns Whether the rule applies to any agent or not.\r\n */\r\nfunction hasPublic(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.PublicAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Enable or disable a rule from applying to any agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @param hasPublic A boolean indicating whether the rule should apply or not to any agent.\r\n * @returns A copy of the rule, updated to apply/not apply to any agent.\r\n * @status Unreleased\r\n */\r\nfunction setPublic(rule, hasPublic) {\r\n    return hasPublic\r\n        ? addIri(rule, acp.agent, acp.PublicAgent)\r\n        : removeIri(rule, acp.agent, acp.PublicAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to any authenticated agent.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to any authenticated agent or not.\r\n */\r\nfunction hasAuthenticated(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.AuthenticatedAgent).length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Enable or disable a rule from applying to any authenticated agent.\r\n *\r\n * @param rule The rule being modified.\r\n * @param hasPublic A boolean indicating whether the rule should apply or not to any authenticated agent.\r\n * @returns A copy of the rule, updated to apply/not apply to any authenticated agent.\r\n * @status Unreleased\r\n */\r\nfunction setAuthenticated(rule, authenticated) {\r\n    return authenticated\r\n        ? addIri(rule, acp.agent, acp.AuthenticatedAgent)\r\n        : removeIri(rule, acp.agent, acp.AuthenticatedAgent);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Check if the rule applies to the creator of the Resource.\r\n *\r\n * @param rule The rule checked for authenticated access.\r\n * @returns Whether the rule applies to the creator of the Resource or not.\r\n */\r\nfunction hasCreator(rule) {\r\n    return (getIriAll(rule, acp.agent).filter((agent) => agent === acp.CreatorAgent)\r\n        .length > 0);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Enable or disable a rule from applying to the creator of the Resource.\r\n *\r\n * @param rule The rule being modified.\r\n * @param hasPublic A boolean indicating whether the rule should apply or not to the creator of the Resource.\r\n * @returns A copy of the rule, updated to apply/not apply to the creator of the Resource.\r\n * @status Unreleased\r\n */\r\nfunction setCreator(rule, creator) {\r\n    return creator\r\n        ? addIri(rule, acp.agent, acp.CreatorAgent)\r\n        : removeIri(rule, acp.agent, acp.CreatorAgent);\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Rule]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param rule The Rule to get a human-readable representation of.\r\n */\r\nfunction ruleAsMarkdown(rule) {\r\n    let markdown = `## Rule: ${asUrl(rule)}\\n\\n`;\r\n    let targetEnumeration = \"\";\r\n    if (hasPublic(rule)) {\r\n        targetEnumeration += \"- Everyone\\n\";\r\n    }\r\n    if (hasAuthenticated(rule)) {\r\n        targetEnumeration += \"- All authenticated agents\\n\";\r\n    }\r\n    if (hasCreator(rule)) {\r\n        targetEnumeration += \"- The creator of this resource\\n\";\r\n    }\r\n    const targetAgents = getAgentAll(rule);\r\n    if (targetAgents.length > 0) {\r\n        targetEnumeration += \"- The following agents:\\n  - \";\r\n        targetEnumeration += targetAgents.join(\"\\n  - \") + \"\\n\";\r\n    }\r\n    const targetGroups = getGroupAll(rule);\r\n    if (targetGroups.length > 0) {\r\n        targetEnumeration += \"- Members of the following groups:\\n  - \";\r\n        targetEnumeration += targetGroups.join(\"\\n  - \") + \"\\n\";\r\n    }\r\n    markdown +=\r\n        targetEnumeration.length > 0\r\n            ? \"This rule applies to:\\n\" + targetEnumeration\r\n            : \"<empty>\\n\";\r\n    return markdown;\r\n}\n\nvar acpRule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addRequiredRuleUrl: addRequiredRuleUrl,\n  removeRequiredRuleUrl: removeRequiredRuleUrl,\n  setRequiredRuleUrl: setRequiredRuleUrl,\n  getRequiredRuleUrlAll: getRequiredRuleUrlAll,\n  addOptionalRuleUrl: addOptionalRuleUrl,\n  removeOptionalRuleUrl: removeOptionalRuleUrl,\n  setOptionalRuleUrl: setOptionalRuleUrl,\n  getOptionalRuleUrlAll: getOptionalRuleUrlAll,\n  addForbiddenRuleUrl: addForbiddenRuleUrl,\n  removeForbiddenRuleUrl: removeForbiddenRuleUrl,\n  setForbiddenRuleUrl: setForbiddenRuleUrl,\n  getForbiddenRuleUrlAll: getForbiddenRuleUrlAll,\n  createRule: createRule,\n  getRule: getRule,\n  getRuleAll: getRuleAll,\n  removeRule: removeRule,\n  setRule: setRule,\n  getAgentAll: getAgentAll,\n  setAgent: setAgent,\n  addAgent: addAgent,\n  removeAgent: removeAgent,\n  getGroupAll: getGroupAll,\n  setGroup: setGroup,\n  addGroup: addGroup,\n  removeGroup: removeGroup,\n  hasPublic: hasPublic,\n  setPublic: setPublic,\n  hasAuthenticated: hasAuthenticated,\n  setAuthenticated: setAuthenticated,\n  hasCreator: hasCreator,\n  setCreator: setCreator,\n  ruleAsMarkdown: ruleAsMarkdown\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Initialise a new, empty [[Policy]].\r\n *\r\n * @param url URL that identifies this Policy.\r\n */\r\nfunction createPolicy(url) {\r\n    const stringUrl = internal_toIriString(url);\r\n    let policyThing = createThing({ url: stringUrl });\r\n    policyThing = setUrl(policyThing, rdf.type, acp.Policy);\r\n    return policyThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get the [[Policy]] with the given URL from an [[PolicyDataset]].\r\n *\r\n * @param policyResource The Resource that contains the given Policy.\r\n * @param url URL that identifies this Policy.\r\n * @returns The requested Policy, if it exists, or `null` if it does not.\r\n */\r\nfunction getPolicy(policyResource, url) {\r\n    const foundThing = getThing(policyResource, url);\r\n    if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Policy) {\r\n        return null;\r\n    }\r\n    return foundThing;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Get all [[Policy]]'s in a given [[PolicyDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n */\r\nfunction getPolicyAll(policyResource) {\r\n    const foundThings = getThingAll(policyResource);\r\n    const foundPolicies = foundThings.filter((thing) => !isThingLocal(thing) && getUrlAll(thing, rdf.type).includes(acp.Policy));\r\n    return foundPolicies;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove the given [[Policy]] from the given [[PolicyDataset]].\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to remove from the resource.\r\n */\r\nfunction removePolicy(policyResource, policy) {\r\n    return removeThing(policyResource, policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Insert the given [[Policy]] into the given [[PolicyDataset]], replacing previous instances of that Policy.\r\n *\r\n * @param policyResource The Resource that contains Access Policies.\r\n * @param policy The Policy to insert into the Resource.\r\n * @returns A new dataset equal to the given resource, but with the given Policy.\r\n */\r\nfunction setPolicy(policyResource, policy) {\r\n    return setThing(policyResource, policy);\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes allowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to allow.\r\n * @param modes Modes to allow for this Policy.\r\n */\r\nfunction setAllowModes(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.allow);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.allow, acp.Write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it allows.\r\n *\r\n * @param policy The Policy for which you want to know the Access Modes it allows.\r\n */\r\nfunction getAllowModes(policy) {\r\n    const allowedModes = getIriAll(policy, acp.allow);\r\n    return {\r\n        read: allowedModes.includes(acp.Read),\r\n        append: allowedModes.includes(acp.Append),\r\n        write: allowedModes.includes(acp.Write),\r\n    };\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given\r\n * Policy, but with the given Access Modes disallowed on it.\r\n *\r\n * @param policy The Policy on which to set the modes to disallow.\r\n * @param modes Modes to disallow for this Policy.\r\n */\r\nfunction setDenyModes(policy, modes) {\r\n    let newPolicy = removeAll(policy, acp.deny);\r\n    if (modes.read === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Read);\r\n    }\r\n    if (modes.append === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Append);\r\n    }\r\n    if (modes.write === true) {\r\n        newPolicy = addIri(newPolicy, acp.deny, acp.Write);\r\n    }\r\n    return newPolicy;\r\n}\r\n/**\r\n * ```{note} There is no Access Control Policies specification yet. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Given a [[Policy]], return which [[AccessModes]] it disallows.\r\n *\r\n * @param policy The Policy on which you want to know the Access Modes it disallows.\r\n */\r\nfunction getDenyModes(policy) {\r\n    const deniedModes = getIriAll(policy, acp.deny);\r\n    return {\r\n        read: deniedModes.includes(acp.Read),\r\n        append: deniedModes.includes(acp.Append),\r\n        write: deniedModes.includes(acp.Write),\r\n    };\r\n}\r\n/**\r\n * Gets a human-readable representation of the given [[Policy]] to aid debugging.\r\n *\r\n * Note that changes to the exact format of the return value are not considered a breaking change;\r\n * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.\r\n *\r\n * @param policy The Policy to get a human-readable representation of.\r\n */\r\nfunction policyAsMarkdown(policy) {\r\n    function getStatus(allow, deny) {\r\n        if (deny) {\r\n            return \"denied\";\r\n        }\r\n        if (allow) {\r\n            return \"allowed\";\r\n        }\r\n        return \"unspecified\";\r\n    }\r\n    const allowModes = getAllowModes(policy);\r\n    const denyModes = getDenyModes(policy);\r\n    let markdown = `## Policy: ${asUrl(policy)}\\n\\n`;\r\n    markdown += `- Read: ${getStatus(allowModes.read, denyModes.read)}\\n`;\r\n    markdown += `- Append: ${getStatus(allowModes.append, denyModes.append)}\\n`;\r\n    markdown += `- Write: ${getStatus(allowModes.write, denyModes.write)}\\n`;\r\n    const requiredRules = getRequiredRuleUrlAll(policy);\r\n    const optionalRules = getOptionalRuleUrlAll(policy);\r\n    const forbiddenRules = getForbiddenRuleUrlAll(policy);\r\n    if (requiredRules.length === 0 &&\r\n        optionalRules.length === 0 &&\r\n        forbiddenRules.length === 0) {\r\n        markdown += \"\\n<no rules specified yet>\\n\";\r\n    }\r\n    if (requiredRules.length > 0) {\r\n        markdown += \"\\nAll of these rules should match:\\n\";\r\n        markdown += \"- \" + requiredRules.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (optionalRules.length > 0) {\r\n        markdown += \"\\nAt least one of these rules should match:\\n\";\r\n        markdown += \"- \" + optionalRules.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    if (forbiddenRules.length > 0) {\r\n        markdown += \"\\nNone of these rules should match:\\n\";\r\n        markdown += \"- \" + forbiddenRules.join(\"\\n- \") + \"\\n\";\r\n    }\r\n    return markdown;\r\n}\n\nvar acpPolicy = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createPolicy: createPolicy,\n  getPolicy: getPolicy,\n  getPolicyAll: getPolicyAll,\n  removePolicy: removePolicy,\n  setPolicy: setPolicy,\n  setAllowModes: setAllowModes,\n  getAllowModes: getAllowModes,\n  setDenyModes: setDenyModes,\n  getDenyModes: getDenyModes,\n  policyAsMarkdown: policyAsMarkdown\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n *\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * [[AccessControlResource]].\r\n * ```\r\n *\r\n * Initialises a new empty Access Control Resource for a given Resource for use\r\n * in **unit tests**.\r\n *\r\n * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.\r\n * @returns The mocked empty Access Control Resource for the given Resource.\r\n */\r\nfunction mockAcrFor(resourceUrl) {\r\n    const acrUrl = new URL(\"access-control-resource\", resourceUrl).href;\r\n    const acr = Object.assign(mockSolidDatasetFrom(acrUrl), { accessTo: resourceUrl });\r\n    return acr;\r\n}\r\n/**\r\n * ```{warning}\r\n * Do not use this function in production code.  For use in **unit tests** that require a\r\n * Resource with an [[AccessControlResource]].\r\n * ```\r\n *\r\n * Attaches an Access Control Resource to a given [[SolidDataset]] for use\r\n * in **unit tests**; e.g., unit tests that call [[getAccessControl]].\r\n *\r\n * @param resource The Resource to mock up with a new resource ACL.\r\n * @param accessControlResource The Access Control Resource to attach to the given Resource.\r\n * @returns The input Resource with an empty resource ACL attached.\r\n */\r\nfunction addMockAcrTo(resource, accessControlResource = mockAcrFor(getSourceUrl(resource))) {\r\n    const resourceWithAcr = Object.assign(internal_cloneResource(resource), {\r\n        internal_acp: {\r\n            acr: accessControlResource,\r\n            aprs: {},\r\n        },\r\n    });\r\n    return resourceWithAcr;\r\n}\n\nvar acpMock = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  mockAcrFor: mockAcrFor,\n  addMockAcrTo: addMockAcrTo\n});\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nconst v1ControlFunctions = {\r\n    hasLinkedAcr,\r\n    addAcrPolicyUrl,\r\n    addMemberAcrPolicyUrl,\r\n    getAcrPolicyUrlAll,\r\n    getMemberAcrPolicyUrlAll,\r\n    removeAcrPolicyUrl,\r\n    removeAcrPolicyUrlAll,\r\n    removeMemberAcrPolicyUrl,\r\n    removeMemberAcrPolicyUrlAll,\r\n};\r\nconst deprecatedFunctions = {\r\n    createControl: internal_createControl,\r\n    getControl: internal_getControl,\r\n    getAllControl: internal_getControlAll,\r\n    getControlAll: internal_getControlAll,\r\n    setControl: internal_setControl,\r\n    removeControl: removeControl,\r\n    addPolicyUrl: internal_addPolicyUrl,\r\n    getPolicyUrlAll: internal_getPolicyUrlAll,\r\n    removePolicyUrl: internal_removePolicyUrl,\r\n    removePolicyUrlAll: internal_removePolicyUrlAll,\r\n    addMemberPolicyUrl: internal_addMemberPolicyUrl,\r\n    getMemberPolicyUrlAll: internal_getMemberPolicyUrlAll,\r\n    removeMemberPolicyUrl: internal_getMemberPolicyUrlAll,\r\n    removeMemberPolicyUrlAll: internal_removeMemberPolicyUrlAll,\r\n};\r\n/**\r\n * @hidden\r\n * @deprecated Replaced by [[acp_v2]].\r\n */\r\nconst acp_v1 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, acpAcp), acpPolicy), acpRule), acpMock), v1ControlFunctions), deprecatedFunctions), { \r\n    /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */\r\n    getForbiddenRuleurlAll: getForbiddenRuleUrlAll });\r\n/**\r\n * ```{note} The Web Access Control specification is not yet finalised. As such, this\r\n * function is still experimental and subject to change, even in a non-major release.\r\n * ```\r\n *\r\n * Remove an [[Control]] from the [[AccessControlResource]] of a Resource.\r\n *\r\n * @param withAccessControlResource A Resource with the Access Control Resource from which to remove an Access Control.\r\n * @param control The [[Control]] to remove from the given Access Control Resource.\r\n * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, excluding the given Access Control.\r\n * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.\r\n * @deprecated\r\n */\r\nfunction removeControl(withAccessControlResource, control) {\r\n    const acr = internal_getAcr(withAccessControlResource);\r\n    const updatedAcr = removeThing(acr, control);\r\n    const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);\r\n    return updatedResource;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/** @hidden */\r\nconst acp_v2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, acpAcp), acpControl), acpPolicy), acpRule), acpMock), { \r\n    /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */\r\n    getForbiddenRuleurlAll: getForbiddenRuleUrlAll });\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nfunction getActiveRuleAll(resource, policyUrlAll) {\r\n    // Collect all the rules referenced by the active policies.\r\n    const ruleUrls = [];\r\n    policyUrlAll.forEach((policyUrl) => {\r\n        const acr = internal_getAcr(resource);\r\n        const policyThing = getThing(acr, policyUrl);\r\n        if (policyThing !== null) {\r\n            getIriAll(policyThing, acp.anyOf).forEach((activeRuleUrl) => ruleUrls.push(activeRuleUrl));\r\n            getIriAll(policyThing, acp.allOf).forEach((activeRuleUrl) => ruleUrls.push(activeRuleUrl));\r\n            getIriAll(policyThing, acp.noneOf).forEach((activeRuleUrl) => ruleUrls.push(activeRuleUrl));\r\n        }\r\n    });\r\n    return ruleUrls;\r\n}\r\nfunction internal_hasInaccessiblePolicies(resource) {\r\n    const sourceIri = getSourceIri(resource);\r\n    // Collect all policies that apply to the resource or its ACR (aka active)\r\n    const activePolicyUrls = getPolicyUrlAll(resource).concat(getAcrPolicyUrlAll(resource));\r\n    const ruleUrls = getActiveRuleAll(resource, activePolicyUrls);\r\n    // If either an active policy or rule are not defined in the ACR, return false\r\n    return (activePolicyUrls\r\n        .concat(ruleUrls)\r\n        // The call to `isDefaultEssPolicyUrl` is a workaround for an ESS bug.\r\n        // When that workaround can be removed, remove the `&&` leg that calls it.\r\n        .some((url) => url.substring(0, sourceIri.length) !== sourceIri &&\r\n        !isDefaultEssPolicyUrl(url, sourceIri)));\r\n}\r\nconst knownActorRelations = [acp.agent, acp.group];\r\n/**\r\n * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this actor.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setActorAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to get the access for.\r\n * @param actor Which instance of the given actor type you want to get the access for.\r\n * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getActorAccess(resource, actorRelation, actor) {\r\n    if (!hasAccessibleAcr(resource) ||\r\n        internal_hasInaccessiblePolicies(resource)) {\r\n        return null;\r\n    }\r\n    const acr = internal_getAcr(resource);\r\n    const acrPolicyUrls = getAcrPolicyUrlAll(resource);\r\n    const acrPolicies = acrPolicyUrls\r\n        .map((policyUrl) => getPolicy(acr, policyUrl))\r\n        .filter((policy) => policy !== null);\r\n    const applicableAcrPolicies = acrPolicies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acr));\r\n    const policyUrls = getPolicyUrlAll(resource);\r\n    const policies = policyUrls\r\n        .map((policyUrl) => getPolicy(acr, policyUrl))\r\n        .filter((policy) => policy !== null);\r\n    const applicablePolicies = policies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acr));\r\n    const initialAccess = {\r\n        read: false,\r\n        append: false,\r\n        write: false,\r\n        controlRead: false,\r\n        controlWrite: false,\r\n    };\r\n    // All allowed reading and writing defined in ACR policies\r\n    // determines whether the `controlRead` and `controlWrite` statuses are `true`.\r\n    const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {\r\n        const allAllowedAccess = Object.assign({}, acc);\r\n        const allowModes = getAllowModes(policy);\r\n        if (allowModes.read) {\r\n            allAllowedAccess.controlRead = true;\r\n        }\r\n        if (allowModes.write) {\r\n            allAllowedAccess.controlWrite = true;\r\n        }\r\n        return allAllowedAccess;\r\n    }, initialAccess);\r\n    // Then allowed reading, appending and writing in regular policies\r\n    // determines whether the respective status is `true`.\r\n    const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {\r\n        const allAllowedAccess = Object.assign({}, acc);\r\n        const allowModes = getAllowModes(policy);\r\n        if (allowModes.read) {\r\n            allAllowedAccess.read = true;\r\n        }\r\n        if (allowModes.append) {\r\n            allAllowedAccess.append = true;\r\n        }\r\n        if (allowModes.write) {\r\n            allAllowedAccess.write = true;\r\n        }\r\n        return allAllowedAccess;\r\n    }, allowedAcrAccess);\r\n    // At this point, everything that has been explicitly allowed is true.\r\n    // However, it could still be overridden by access that is explicitly denied.\r\n    // Starting with `controlRead` and `controlWrite`,\r\n    // by inspecting denied reading and writing defined in the ACR policies.\r\n    const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {\r\n        const allDeniedAccess = Object.assign({}, acc);\r\n        const denyModes = getDenyModes(policy);\r\n        if (denyModes.read === true) {\r\n            allDeniedAccess.controlRead = false;\r\n        }\r\n        if (denyModes.write === true) {\r\n            allDeniedAccess.controlWrite = false;\r\n        }\r\n        return allDeniedAccess;\r\n    }, withAllowedAccess);\r\n    // And finally, we set to `false` those access modes that are explicitly denied\r\n    // in the regular policies:\r\n    const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {\r\n        const allDeniedAccess = Object.assign({}, acc);\r\n        const denyModes = getDenyModes(policy);\r\n        if (denyModes.read === true) {\r\n            allDeniedAccess.read = false;\r\n        }\r\n        if (denyModes.append === true) {\r\n            allDeniedAccess.append = false;\r\n        }\r\n        if (denyModes.write === true) {\r\n            allDeniedAccess.write = false;\r\n        }\r\n        return allDeniedAccess;\r\n    }, withAcrDeniedAccess);\r\n    return withDeniedAccess;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Agent.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getAgentAccess(resource, webId) {\r\n    return internal_getActorAccess(resource, acp.agent, webId);\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Group in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to this Group.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to the given Group, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setGroupAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param groupUrl URL of the Group you want to get the access for.\r\n * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getGroupAccess(resource, groupUrl) {\r\n    return internal_getActorAccess(resource, acp.group, groupUrl);\r\n}\r\n/**\r\n * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to everybody.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to everybody, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setPublicAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.\r\n */\r\nfunction internal_getPublicAccess(resource) {\r\n    return internal_getActorAccess(resource, acp.agent, acp.PublicAgent);\r\n}\r\nfunction policyAppliesTo(policy, actorRelation, actor, acr) {\r\n    const allowModes = getIriAll(policy, acp.allow);\r\n    const denyModes = getIriAll(policy, acp.deny);\r\n    if (allowModes.length + denyModes.length === 0) {\r\n        // A Policy that does not specify access modes does not do anything:\r\n        return false;\r\n    }\r\n    const allOfRules = getRequiredRuleUrlAll(policy)\r\n        .map((ruleUrl) => getRule(acr, ruleUrl))\r\n        .filter(isNotNull);\r\n    const anyOfRules = getOptionalRuleUrlAll(policy)\r\n        .map((ruleUrl) => getRule(acr, ruleUrl))\r\n        .filter(isNotNull);\r\n    const noneOfRules = getForbiddenRuleUrlAll(policy)\r\n        .map((ruleUrl) => getRule(acr, ruleUrl))\r\n        .filter(isNotNull);\r\n    // We assume that this Policy applies if this specific actor is mentioned\r\n    // and no further restrictions are in place.\r\n    // (In other words, the Policy may apply to others *in addition to* this\r\n    // actor, but if it applies to this actor *unless* some other condition holds,\r\n    // we cannot be sure whether it will apply to this actor.)\r\n    // This means that:\r\n    return (\r\n    // Every existing allOf Rule explicitly applies explicitly to this given actor:\r\n    allOfRules.every((rule) => ruleAppliesTo(rule, actorRelation, actor)) &&\r\n        // If there are anyOf Rules, at least one applies explicitly to this actor:\r\n        (anyOfRules.length === 0 ||\r\n            anyOfRules.some((rule) => ruleAppliesTo(rule, actorRelation, actor))) &&\r\n        // No further restrictions are in place that make this sometimes not apply\r\n        // to the given actor:\r\n        noneOfRules.length === 0);\r\n}\r\nfunction policyConflictsWith(policy, otherAccess) {\r\n    const allowModes = getIriAll(policy, acp.allow);\r\n    const denyModes = getIriAll(policy, acp.deny);\r\n    return ((otherAccess.read === true && denyModes.includes(acp.Read)) ||\r\n        (otherAccess.read === false &&\r\n            allowModes.includes(acp.Read) &&\r\n            !denyModes.includes(acp.Read)) ||\r\n        (otherAccess.append === true && denyModes.includes(acp.Append)) ||\r\n        (otherAccess.append === false &&\r\n            allowModes.includes(acp.Append) &&\r\n            !denyModes.includes(acp.Append)) ||\r\n        (otherAccess.write === true && denyModes.includes(acp.Write)) ||\r\n        (otherAccess.write === false &&\r\n            allowModes.includes(acp.Write) &&\r\n            !denyModes.includes(acp.Write)));\r\n}\r\nfunction ruleAppliesTo(rule, actorRelation, actor) {\r\n    // A Rule that does not list *any* actor matches for everyone:\r\n    let isEmpty = true;\r\n    knownActorRelations.forEach((knownActorRelation) => {\r\n        isEmpty && (isEmpty = getIri(rule, knownActorRelation) === null);\r\n    });\r\n    return isEmpty || getIriAll(rule, actorRelation).includes(actor);\r\n}\r\n/**\r\n * Get a set of all actors mentioned in an ACR by active Rules (i.e. that are\r\n * referenced by Policies referenced by the ACR Control, and therefore that\r\n * effectively apply).\r\n *\r\n * @param resource The resource with the ACR we want to inspect\r\n * @param actorRelation\r\n */\r\nfunction internal_findActorAll(resource, actorRelation) {\r\n    const actors = new Set();\r\n    // Collect all policies that apply to the resource or its ACR (aka active)\r\n    const activePolicyUrls = getPolicyUrlAll(resource).concat(getAcrPolicyUrlAll(resource));\r\n    const rules = getActiveRuleAll(resource, activePolicyUrls);\r\n    // This code could be prettier using flat(), which isn't supported by nodeJS 10.\r\n    // If you read this comment after April 2021, feel free to refactor.\r\n    rules.forEach((ruleUrl) => {\r\n        // The rules URL being extracted from the dataset, it is safe to assume\r\n        // that getThing cannot return undefined.\r\n        const ruleThing = getThing(internal_getAcr(resource), ruleUrl);\r\n        getIriAll(ruleThing, actorRelation)\r\n            .filter((iri) => ![\r\n            acp.PublicAgent,\r\n            acp.CreatorAgent,\r\n            acp.AuthenticatedAgent,\r\n        ].includes(iri) || actorRelation != acp.agent)\r\n            .forEach((iri) => actors.add(iri));\r\n    });\r\n    return actors;\r\n}\r\n/**\r\n * Iterate through all the actors active for an ACR, and list all of their access.\r\n * @param resource The resource for which we want to list the access\r\n * @param actorRelation The type of actor we want to list access for\r\n * @returns A map with each actor access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getActorAccessAll(resource, actorRelation) {\r\n    if (!hasAccessibleAcr(resource) ||\r\n        internal_hasInaccessiblePolicies(resource)) {\r\n        return null;\r\n    }\r\n    const result = {};\r\n    const actors = internal_findActorAll(resource, actorRelation);\r\n    actors.forEach((iri) => {\r\n        // The type assertion holds, because if internal_getActorAccess were null,\r\n        // we would have returned {} already.\r\n        const access = internal_getActorAccess(resource, actorRelation, iri);\r\n        result[iri] = access;\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Get an overview of what access are defined for all Groups in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Groups.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Groups, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @returns A map with each Group's access indexed by their URL, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getGroupAccessAll(resource) {\r\n    return internal_getActorAccessAll(resource, acp.group);\r\n}\r\n/**\r\n * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.\r\n *\r\n * This will only return a value if all relevant access is defined in just the Resource's Access\r\n * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for\r\n * other Resources, this function will not be able to determine the access relevant to the mentionned\r\n * Agents.\r\n *\r\n * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without\r\n * additional conditions.\r\n *\r\n * In other words, this function will generally understand and return the access as set by\r\n * [[internal_setAgentAccess]], but not understand more convoluted Policies.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @returns A map with each Agent's access indexed by their WebID, or null if some\r\n * external policies are referenced.\r\n */\r\nfunction internal_getAgentAccessAll(resource) {\r\n    return internal_getActorAccessAll(resource, acp.agent);\r\n}\r\n/**\r\n * Set access to a Resource for a specific actor.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * actor specifically. In other words, it can, for example, add Policies that\r\n * give a particular Group Read access to the Resource. However, if other\r\n * Policies specify that everyone in that Group is *denied* Read access *except*\r\n * for a particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for an agent matching the given actor.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to set the access for.\r\n * @param actor Which instance of the given actor type you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setActorAccess(resource, actorRelation, actor, access) {\r\n    var _a, _b, _c, _d, _e;\r\n    if (!hasAccessibleAcr(resource) ||\r\n        internal_hasInaccessiblePolicies(resource)) {\r\n        return null;\r\n    }\r\n    // Get the access that currently applies to the given actor\r\n    const existingAccess = internal_getActorAccess(resource, actorRelation, actor);\r\n    /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */\r\n    if (existingAccess === null) {\r\n        return null;\r\n    }\r\n    // Get all Policies that apply specifically to the given actor\r\n    const acr = internal_getAcr(resource);\r\n    const acrPolicyUrls = getAcrPolicyUrlAll(resource);\r\n    const acrPolicies = acrPolicyUrls\r\n        // This is a temporary workaround until ESS removes its default Policy references:\r\n        .filter((policyUrl) => !isDefaultEssPolicyUrl(policyUrl, getSourceIri(resource)))\r\n        .map((policyUrl) => getPolicy(acr, policyUrl))\r\n        .filter((policy) => policy !== null);\r\n    const applicableAcrPolicies = acrPolicies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acr));\r\n    const policyUrls = getPolicyUrlAll(resource);\r\n    const policies = policyUrls\r\n        // This is a temporary workaround until ESS removes its default Policy references:\r\n        .filter((policyUrl) => !isDefaultEssPolicyUrl(policyUrl, getSourceIri(resource)))\r\n        .map((policyUrl) => getPolicy(acr, policyUrl))\r\n        .filter((policy) => policy !== null);\r\n    const applicablePolicies = policies.filter((policy) => policyAppliesTo(policy, actorRelation, actor, acr));\r\n    // We only need to override Policies that define access other than what we want:\r\n    const conflictingAcrPolicies = applicableAcrPolicies.filter((policy) => policyConflictsWith(policy, {\r\n        read: access.controlRead,\r\n        write: access.controlWrite,\r\n    }));\r\n    const conflictingPolicies = applicablePolicies.filter((policy) => policyConflictsWith(policy, {\r\n        read: access.read,\r\n        append: access.append,\r\n        write: access.write,\r\n    }));\r\n    // For every Policy that applies specifically to the given Actor, but _also_\r\n    // to another actor (i.e. that applies using an anyOf Rule, or a Rule that\r\n    // mentions both the given and another actor)...\r\n    const otherActorAcrPolicies = conflictingAcrPolicies.filter((acrPolicy) => policyHasOtherActors(acrPolicy, actorRelation, actor, acr));\r\n    const otherActorPolicies = conflictingPolicies.filter((policy) => policyHasOtherActors(policy, actorRelation, actor, acr));\r\n    // ...check what access the current actor would have if we removed them...\r\n    const otherActorAcrPolicyUrls = otherActorAcrPolicies.map((acrPolicy) => asIri(acrPolicy));\r\n    const otherActorPolicyUrls = otherActorPolicies.map((policy) => asIri(policy));\r\n    let resourceWithPoliciesExcluded = otherActorAcrPolicyUrls.reduce(removeAcrPolicyUrl, resource);\r\n    resourceWithPoliciesExcluded = otherActorPolicyUrls.reduce(removePolicyUrl, resourceWithPoliciesExcluded);\r\n    const remainingAccess = internal_getActorAccess(resourceWithPoliciesExcluded, actorRelation, actor);\r\n    /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */\r\n    if (remainingAccess === null) {\r\n        return null;\r\n    }\r\n    // ...add copies of those Policies and their Rules, but excluding the given actor...\r\n    let updatedAcr = acr;\r\n    const newAcrPolicyUrls = [];\r\n    otherActorAcrPolicies.forEach((acrPolicy) => {\r\n        const [policyCopy, ruleCopies] = copyPolicyExcludingActor(acrPolicy, acr, actorRelation, actor);\r\n        updatedAcr = setThing(updatedAcr, policyCopy);\r\n        updatedAcr = ruleCopies.reduce(setThing, updatedAcr);\r\n        newAcrPolicyUrls.push(asIri(policyCopy));\r\n    });\r\n    const newPolicyUrls = [];\r\n    otherActorPolicies.forEach((policy) => {\r\n        const [policyCopy, ruleCopies] = copyPolicyExcludingActor(policy, acr, actorRelation, actor);\r\n        updatedAcr = setThing(updatedAcr, policyCopy);\r\n        updatedAcr = ruleCopies.reduce(setThing, updatedAcr);\r\n        newPolicyUrls.push(asIri(policyCopy));\r\n    });\r\n    // ...add a new Policy that applies the given access,\r\n    // and the previously applying access for access modes that were undefined...\r\n    const newRuleIri = getSourceIri(acr) + `#rule_${encodeURIComponent(actorRelation)}_${actor}`;\r\n    let newRule = createRule(newRuleIri);\r\n    newRule = setIri(newRule, actorRelation, actor);\r\n    const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;\r\n    const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;\r\n    let acrPoliciesToUnapply = otherActorAcrPolicies;\r\n    // Only replace existing Policies if the defined access actually changes:\r\n    if (newControlReadAccess !== remainingAccess.controlRead ||\r\n        newControlWriteAccess !== remainingAccess.controlWrite) {\r\n        const newAcrPolicyIri = getSourceIri(acr) +\r\n            `#acr_policy` +\r\n            `_${encodeURIComponent(actorRelation)}_${actor}` +\r\n            `_${Date.now()}_${Math.random()}`;\r\n        let newAcrPolicy = createPolicy(newAcrPolicyIri);\r\n        newAcrPolicy = setAllowModes(newAcrPolicy, {\r\n            read: newControlReadAccess === true,\r\n            append: false,\r\n            write: newControlWriteAccess === true,\r\n        });\r\n        newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newRule);\r\n        updatedAcr = setThing(updatedAcr, newAcrPolicy);\r\n        updatedAcr = setThing(updatedAcr, newRule);\r\n        newAcrPolicyUrls.push(newAcrPolicyIri);\r\n        // If we don't have to set new access, we only need to unapply the\r\n        // ACR Policies that applied to both the given actor and other actors\r\n        // (because they have been replaced by clones not mentioning the given\r\n        // actor). Hence `policiesToUnApply` is initialied to `otherActorPolicies`.\r\n        // However, if we're in this if branch, that means we also had to replace\r\n        // Policies that defined access for just this actor, so we'll have to remove\r\n        // all Policies mentioning this actor:\r\n        acrPoliciesToUnapply = conflictingAcrPolicies;\r\n    }\r\n    const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;\r\n    const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;\r\n    const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;\r\n    let policiesToUnapply = otherActorPolicies;\r\n    // Only replace existing Policies if the defined access actually changes:\r\n    if (newReadAccess !== remainingAccess.read ||\r\n        newAppendAccess !== remainingAccess.append ||\r\n        newWriteAccess !== remainingAccess.write) {\r\n        const newPolicyIri = getSourceIri(acr) +\r\n            `#policy` +\r\n            `_${encodeURIComponent(actorRelation)}_${encodeURIComponent(actor)}` +\r\n            `_${Date.now()}_${Math.random()}`;\r\n        let newPolicy = createPolicy(newPolicyIri);\r\n        newPolicy = setAllowModes(newPolicy, {\r\n            read: newReadAccess === true,\r\n            append: newAppendAccess === true,\r\n            write: newWriteAccess === true,\r\n        });\r\n        newPolicy = addIri(newPolicy, acp.allOf, newRule);\r\n        updatedAcr = setThing(updatedAcr, newPolicy);\r\n        updatedAcr = setThing(updatedAcr, newRule);\r\n        newPolicyUrls.push(newPolicyIri);\r\n        // If we don't have to set new access, we only need to unapply the\r\n        // Policies that applied to both the given actor and other actors (because\r\n        // they have been replaced by clones not mentioning the given actor). Hence\r\n        // `policiesToUnApply` is initialied to `otherActorPolicies`.\r\n        // However, if we're in this if branch, that means we also had to replace\r\n        // Policies that defined access for just this actor, so we'll have to remove\r\n        // all Policies mentioning this actor:\r\n        policiesToUnapply = conflictingPolicies;\r\n    }\r\n    // ...then remove existing Policy URLs that mentioned both the given actor\r\n    // and other actors from the given Resource and apply the new ones (but do not\r\n    // remove the actual old Policies - they might still apply to other Resources!).\r\n    let updatedResource = internal_setAcr(resource, updatedAcr);\r\n    acrPoliciesToUnapply.forEach((previouslyApplicableAcrPolicy) => {\r\n        updatedResource = removeAcrPolicyUrl(updatedResource, asIri(previouslyApplicableAcrPolicy));\r\n    });\r\n    newAcrPolicyUrls.forEach((newAcrPolicyUrl) => {\r\n        updatedResource = addAcrPolicyUrl(updatedResource, newAcrPolicyUrl);\r\n    });\r\n    policiesToUnapply.forEach((previouslyApplicablePolicy) => {\r\n        updatedResource = removePolicyUrl(updatedResource, asIri(previouslyApplicablePolicy));\r\n    });\r\n    newPolicyUrls.forEach((newPolicyUrl) => {\r\n        updatedResource = addPolicyUrl(updatedResource, newPolicyUrl);\r\n    });\r\n    return updatedResource;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Agent specifically. In other words, it can, for example, add Policies that\r\n * give a particular Agent Read access to the Resource. However, if other\r\n * Policies specify that that Agent is *denied* Read access *except* if they're\r\n * in a particular Group, then that will be left intact.\r\n * This means that, unless *only* this function is used to manipulate access to\r\n * this Resource, the set access might not be equal to the effective access for\r\n * the given Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param webId Which Agent you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setAgentAccess(resource, webId, access) {\r\n    return internal_setActorAccess(resource, acp.agent, webId, access);\r\n}\r\n/**\r\n * Set access to a Resource for a specific Group.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for the given\r\n * Group specifically. In other words, it can, for example, add Policies that\r\n * give a particular Group Read access to the Resource. However, if other\r\n * Policies specify that it is *denied* Read access *except* if they're a\r\n * particular Agent, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for Agents in the given Group.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param groupUrl Which Group you want to set the access for.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Group. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setGroupAccess(resource, groupUrl, access) {\r\n    return internal_setActorAccess(resource, acp.group, groupUrl, access);\r\n}\r\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function adds the relevant Access Control Policies and Rules to a\r\n * Resource's Access Control Resource to define the given access for everybody\r\n * specifically. In other words, it can, for example, add Policies that\r\n * give everybody Read access to the Resource. However, if other\r\n * Policies specify that everybody is *denied* Read access *except* if they're\r\n * in a particular Group, then that will be left intact.\r\n * This means that, unless *only* this module's functions are used to manipulate\r\n * access to this Resource, the set access might not be equal to the effective\r\n * access for a particular Agent.\r\n *\r\n * There are a number of preconditions that have to be fulfilled for this\r\n * function to work:\r\n * - Access to the Resource is determined via an Access Control Resource.\r\n * - The Resource's Access Control Resource does not refer to (Policies or Rules\r\n *   in) other Resources.\r\n * - The current user has access to the Resource's Access Control Resource.\r\n *\r\n * If those conditions do not hold, this function will return `null`.\r\n *\r\n * Additionally, take note that the given access will only be applied to the\r\n * given Resource; if that Resource is a Container, access will have to be set\r\n * for its contained Resources independently.\r\n *\r\n * @param resource Resource that was fetched together with its linked Access Control Resource.\r\n * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.\r\n * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.\r\n */\r\nfunction internal_setPublicAccess(resource, access) {\r\n    return internal_setActorAccess(resource, acp.agent, acp.PublicAgent, access);\r\n}\r\nfunction policyHasOtherActors(policy, actorRelation, actor, policyAndRuleResource) {\r\n    const allOfRulesHaveOtherActors = getIriAll(policy, acp.allOf).some((ruleUrl) => {\r\n        const rule = getRule(policyAndRuleResource, ruleUrl);\r\n        /* istanbul ignore if This function only gets called after policyAppliesTo, which already filters out non-existent Rules. */\r\n        if (rule === null) {\r\n            return false;\r\n        }\r\n        return ruleHasOtherActors(rule, actorRelation, actor);\r\n    });\r\n    const anyOfRulesHaveOtherActors = getIriAll(policy, acp.anyOf).some((ruleUrl) => {\r\n        const rule = getRule(policyAndRuleResource, ruleUrl);\r\n        /* istanbul ignore if This function only gets called after policyAppliesTo, which already filters out non-existent Rules. */\r\n        if (rule === null) {\r\n            return false;\r\n        }\r\n        return ruleHasOtherActors(rule, actorRelation, actor);\r\n    });\r\n    /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */\r\n    const noneOfRulesHaveOtherActors = getIriAll(policy, acp.noneOf).some((ruleUrl) => {\r\n        const rule = getRule(policyAndRuleResource, ruleUrl);\r\n        if (rule === null) {\r\n            return false;\r\n        }\r\n        return ruleHasOtherActors(rule, actorRelation, actor);\r\n    });\r\n    return (allOfRulesHaveOtherActors ||\r\n        anyOfRulesHaveOtherActors ||\r\n        noneOfRulesHaveOtherActors);\r\n}\r\nfunction ruleHasOtherActors(rule, actorRelation, actor) {\r\n    const otherActors = [];\r\n    knownActorRelations.forEach((knownActorRelation) => {\r\n        const otherActorsWithThisRelation = getIriAll(rule, knownActorRelation).filter((applicableActor) => applicableActor !== actor || knownActorRelation !== actorRelation);\r\n        // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:\r\n        otherActors.push(...otherActorsWithThisRelation);\r\n    });\r\n    return otherActors.length > 0;\r\n}\r\nfunction copyPolicyExcludingActor(inputPolicy, policyAndRuleDataset, actorRelationToExclude, actorToExclude) {\r\n    const newIriSuffix = \"_copy_wihout\" +\r\n        `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` +\r\n        `_${Date.now()}_${Math.random()}`;\r\n    // Create new Rules for the Policy, excluding the given Actor\r\n    const newAllOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.allOf), policyAndRuleDataset, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    const newAnyOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.anyOf), policyAndRuleDataset, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    const newNoneOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.noneOf), policyAndRuleDataset, newIriSuffix, actorRelationToExclude, actorToExclude);\r\n    // Create a new Policy with the new Rules\r\n    let newPolicy = createPolicy(asIri(inputPolicy) + newIriSuffix);\r\n    getIriAll(inputPolicy, acp.allow).forEach((allowMode) => {\r\n        newPolicy = addIri(newPolicy, acp.allow, allowMode);\r\n    });\r\n    getIriAll(inputPolicy, acp.deny).forEach((denyMode) => {\r\n        newPolicy = addIri(newPolicy, acp.deny, denyMode);\r\n    });\r\n    newAllOfRules.forEach((newRule) => {\r\n        newPolicy = addIri(newPolicy, acp.allOf, newRule);\r\n    });\r\n    newAnyOfRules.forEach((newRule) => {\r\n        newPolicy = addIri(newPolicy, acp.anyOf, newRule);\r\n    });\r\n    /* istanbul ignore next Policies listing noneOf Rules are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Rules to copy. */\r\n    newNoneOfRules.forEach((newRule) => {\r\n        newPolicy = addIri(newPolicy, acp.noneOf, newRule);\r\n    });\r\n    return [\r\n        newPolicy,\r\n        newAllOfRules.concat(newAnyOfRules).concat(newNoneOfRules),\r\n    ];\r\n}\r\n/** Creates clones of all the Rules identified by `ruleIris` in `ruleDataset`, excluding the given Actor */\r\nfunction copyRulesExcludingActor(ruleIris, ruleDataset, iriSuffix, actorRelationToExclude, actorToExclude) {\r\n    return ruleIris\r\n        .map((ruleIri) => {\r\n        const rule = getRule(ruleDataset, ruleIri);\r\n        if (rule === null) {\r\n            return null;\r\n        }\r\n        let newRule = createRule(asIri(rule) + iriSuffix);\r\n        let listsOtherActors = false;\r\n        knownActorRelations.forEach((knownActorRelation) => {\r\n            getIriAll(rule, knownActorRelation).forEach((targetActor) => {\r\n                if (knownActorRelation === actorRelationToExclude &&\r\n                    targetActor === actorToExclude) {\r\n                    return;\r\n                }\r\n                listsOtherActors = true;\r\n                newRule = addIri(newRule, knownActorRelation, targetActor);\r\n            });\r\n        });\r\n        return listsOtherActors ? newRule : null;\r\n    })\r\n        .filter(isNotNull);\r\n}\r\nfunction isNotNull(value) {\r\n    return value !== null;\r\n}\r\n/**\r\n * Work around ESS adding references to external Policies to ACRs by default.\r\n *\r\n * Inrupt's Enterprise Solid Server by default adds a reference to a Policy in\r\n * every ACR that is not local to that ACR. This will be removed in the near\r\n * future: they only reflect access that holds anyway (i.e. the Pod Owner's\r\n * access), and removing them does not actually change that access.\r\n *\r\n * However, until that is implemented, we manually ignore those Policies as a\r\n * workaround, rather than always returning `null` because we cannot read them\r\n * in the ACR itself.\r\n *\r\n * When ESS is updated, delete this function and remove references to it to\r\n * remove the workaround.\r\n *\r\n * @param policyUrl URL of a Policy.\r\n * @param resourceUrl Resource in whose ACR that URL is referenced.\r\n * @returns Whether the given Policy URL is a URL the Inrupt's Enterprise Solid Server has added by default for the given Resource.\r\n */\r\nfunction isDefaultEssPolicyUrl(policyUrl, resourceUrl) {\r\n    const essServers = [\r\n        \"https://pod.inrupt.com\",\r\n        \"https://demo-ess.inrupt.com\",\r\n        \"https://dev-ess.inrupt.com\",\r\n    ];\r\n    return essServers.some((essServer) => {\r\n        if (!resourceUrl.startsWith(essServer)) {\r\n            return false;\r\n        }\r\n        // ESS Pods are of the form <origin>/<username>/,\r\n        // and resource URLs are subpaths of that.\r\n        // Hence, we can get the Pod root by getting everything up to and including\r\n        // the first slash after the origin's trailing slash:\r\n        const resourcePath = resourceUrl.substring(essServer.length + \"/\".length);\r\n        const podRoot = resourceUrl.substring(0, essServer.length + \"/\".length + resourcePath.indexOf(\"/\") + \"/\".length);\r\n        return policyUrl === podRoot + \"policies/#Owner\";\r\n    });\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nfunction universalAccessToAcl(newAccess, previousAccess) {\r\n    var _a, _b, _c, _d;\r\n    // Universal access is aligned on ACP, which means there is a distinction between\r\n    // controlRead and controlWrite. This split doesn't exist in WAC, which is why\r\n    // the type for the input variable of this function is a restriction on the\r\n    // universal Access type.\r\n    if (newAccess.controlRead !== newAccess.controlWrite) {\r\n        throw new Error(\"For Pods using Web Access Control, controlRead and controlWrite must be equal.\");\r\n    }\r\n    return {\r\n        read: (_a = newAccess.read) !== null && _a !== void 0 ? _a : previousAccess.read,\r\n        append: (_b = newAccess.append) !== null && _b !== void 0 ? _b : previousAccess.append,\r\n        write: (_c = newAccess.write) !== null && _c !== void 0 ? _c : previousAccess.write,\r\n        control: (_d = newAccess.controlRead) !== null && _d !== void 0 ? _d : previousAccess.control,\r\n    };\r\n}\r\nfunction aclAccessToUniversal(access) {\r\n    // In ACL, denying access to an actor is a notion that doesn't exist, so an\r\n    // access is either granted or not for a given mode.\r\n    // This creates a misalignment with the ACP notion of an access being granted,\r\n    // denied, or simply not mentioned. Here, we convert the boolean vision of\r\n    // ACL into the boolean or undefined vision of ACP.\r\n    return {\r\n        read: access.read,\r\n        write: access.write,\r\n        append: access.append,\r\n        controlRead: access.control,\r\n        controlWrite: access.control,\r\n    };\r\n}\r\nasync function getActorAccess(resource, actor, accessEvaluationCallback, options) {\r\n    const resourceAcl = await internal_fetchAcl(resource, options);\r\n    const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl), actor);\r\n    if (wacAccess === null) {\r\n        return null;\r\n    }\r\n    return aclAccessToUniversal(wacAccess);\r\n}\r\nasync function getActorClassAccess(resource, accessEvaluationCallback, options) {\r\n    const resourceAcl = await internal_fetchAcl(resource, options);\r\n    const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));\r\n    if (wacAccess === null) {\r\n        return null;\r\n    }\r\n    return aclAccessToUniversal(wacAccess);\r\n}\r\nasync function getActorAccessAll(resource, accessEvaluationCallback, options) {\r\n    const resourceAcl = await internal_fetchAcl(resource, options);\r\n    const wacAgentAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));\r\n    if (wacAgentAccess === null) {\r\n        return null;\r\n    }\r\n    const result = {};\r\n    for (const [webId, wacAccess] of Object.entries(wacAgentAccess)) {\r\n        result[webId] = aclAccessToUniversal(wacAccess);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to the given Agent.\r\n *\r\n * Note that this only lists permissions granted to the given Agent individually,\r\n * and will not exhaustively list modes the given Agent may have access to because\r\n * they apply to everyone, or because they apply to the Agent through a group for\r\n * instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Access\r\n * @param agent The Agent for which the Access is granted\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.\r\n */\r\nfunction getAgentAccess$1(resource, agent, options = internal_defaultFetchOptions) {\r\n    return getActorAccess(resource, agent, getAgentAccess$2, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to the given Group.\r\n *\r\n * Note that this only lists permissions granted to the given Group individually,\r\n * and will not exhaustively list modes the given Group may have access to because\r\n * they apply to everyone, or because they apply to the Group through another\r\n * Group that may contain it for instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Access\r\n * @param group The Group for which the Access is granted\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.\r\n */\r\nfunction getGroupAccess$1(resource, group, options = internal_defaultFetchOptions) {\r\n    return getActorAccess(resource, group, getGroupAccess$2, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted to everyone.\r\n *\r\n * Note that this only lists permissions explicitly granted to everyone as a whole,\r\n * and will not exhaustively list modes any individual Agent or Group may have\r\n * access to because they specifically apply to them only.\r\n *\r\n * @param resource The URL of the Resource for which we want to list public Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns What Access modes are granted to the everyone explicitly, or null if it could not be determined.\r\n */\r\nfunction getPublicAccess$1(resource, options = internal_defaultFetchOptions) {\r\n    return getActorClassAccess(resource, getPublicAccess$2, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted explicitly to each individual Agent.\r\n *\r\n * Note that this only lists permissions granted to each Agent individually,\r\n * and will not exhaustively list modes any Agent may have access to because\r\n * they apply to everyone, or because they apply to an Agent through a group for\r\n * instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Agents Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A map of Agent WebIDs and the access granted to them, or null if it could not be determined.\r\n */\r\nfunction getAgentAccessAll$1(resource, options = internal_defaultFetchOptions) {\r\n    return getActorAccessAll(resource, getAgentAccessAll$2, options);\r\n}\r\n/**\r\n * For a given Resource, look up its metadata, and read the Access permissions\r\n * granted explicitly to each individual Group.\r\n *\r\n * Note that this only lists permissions granted to each Group individually,\r\n * and will not exhaustively list modes any Group may have access to because\r\n * they apply individually to all of the Agents in the Group, or to everyone\r\n * for instance.\r\n *\r\n * @param resource The URL of the Resource for which we want to list Agents Access\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns A map of Group URLs and the access granted to them, or null if it could not be determined.\r\n */\r\nfunction getGroupAccessAll$1(resource, options = internal_defaultFetchOptions) {\r\n    return getActorAccessAll(resource, getGroupAccessAll$2, options);\r\n}\r\nasync function prepareResourceAcl(resource, options) {\r\n    if (!hasAccessibleAcl(resource)) {\r\n        return null;\r\n    }\r\n    const acl = await internal_fetchAcl(resource, options);\r\n    const resourceWithAcl = internal_setAcl(resource, acl);\r\n    let resourceAcl;\r\n    if (hasResourceAcl(resourceWithAcl)) {\r\n        // This is the simple case, where the Resource ACL we need to update already\r\n        // exists.\r\n        resourceAcl = internal_getResourceAcl(resourceWithAcl);\r\n    }\r\n    else if (hasFallbackAcl(resourceWithAcl)) {\r\n        // In this case, the Resource ACL needs to be created first, and then updated.\r\n        resourceAcl = createAclFromFallbackAcl(resourceWithAcl);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    return internal_setResourceAcl(resourceWithAcl, resourceAcl);\r\n}\r\nasync function saveUpdatedAcl(resource, acl, options) {\r\n    let savedAcl = null;\r\n    try {\r\n        savedAcl = await saveAclFor(resource, acl, options);\r\n        return internal_setResourceAcl(resource, savedAcl);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\r\nasync function setActorClassAccess(resource, access, getAccess, setAccess, options) {\r\n    const resourceWithOldAcl = await prepareResourceAcl(resource, options);\r\n    if (resourceWithOldAcl === null) {\r\n        return null;\r\n    }\r\n    const resourceAcl = getResourceAcl(resourceWithOldAcl);\r\n    const currentAccess = getAccess(resourceWithOldAcl);\r\n    const wacAccess = universalAccessToAcl(access, currentAccess);\r\n    const updatedResourceAcl = setAccess(resourceAcl, wacAccess);\r\n    return await saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);\r\n}\r\nasync function setActorAccess(resource, actor, access, getAccess, setAccess, options) {\r\n    const resourceWithOldAcl = await prepareResourceAcl(resource, options);\r\n    if (resourceWithOldAcl === null) {\r\n        return null;\r\n    }\r\n    const currentAccess = getAccess(resourceWithOldAcl, actor);\r\n    const resourceAcl = getResourceAcl(resourceWithOldAcl);\r\n    const wacAccess = universalAccessToAcl(access, currentAccess);\r\n    const updatedResourceAcl = setAccess(resourceAcl, actor, wacAccess);\r\n    return await saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);\r\n}\r\n/**\r\n * Set the Access modes for a given Agent to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param agent The Agent for whom Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\r\nasync function setAgentResourceAccess(resource, agent, access, options = internal_defaultFetchOptions) {\r\n    return await setActorAccess(resource, agent, access, getAgentAccess$2, setAgentResourceAccess$1, options);\r\n}\r\n/**\r\n * Set the Access modes for a given Group to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param agent The Group for which Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\r\nasync function setGroupResourceAccess(resource, group, access, options = internal_defaultFetchOptions) {\r\n    return await setActorAccess(resource, group, access, getGroupAccess$2, setGroupResourceAccess$1, options);\r\n}\r\n/**\r\n * Set the Access modes for everyone to a given Resource.\r\n *\r\n * Important note: if the target resource did not have a Resource ACL, and its\r\n * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create\r\n * a new Resource ACL. This has the side effect that the next time the Fallback\r\n * ACL is updated, the changes _will not impact_ the target resource.\r\n *\r\n * If the target Resource's Access mode cannot be determined, e.g. the user does\r\n * not have Read and Write access to the target Resource's ACL, or to its\r\n * fallback ACL if it does not have a Resource ACL, then `null` is returned.\r\n *\r\n * @param resource The Resource for which Access is being set\r\n * @param access The Access being set\r\n * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).\r\n * @returns The Resource, with its ACL updated, or null if the new Access could not\r\n * be set.\r\n */\r\nasync function setPublicResourceAccess(resource, access, options = internal_defaultFetchOptions) {\r\n    return await setActorClassAccess(resource, access, getPublicAccess$2, setPublicResourceAccess$1, options);\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nasync function getAccessFor(resourceUrl, actorType, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {\r\n    if (actorType === \"agent\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When reading Agent-specific access, the given agent cannot be left undefined.\");\r\n        }\r\n        return await getAgentAccess(resourceUrl, actor, options);\r\n    }\r\n    if (actorType === \"group\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When reading Group-specific access, the given group cannot be left undefined.\");\r\n        }\r\n        return await getGroupAccess(resourceUrl, actor, options);\r\n    }\r\n    if (actorType === \"public\") {\r\n        if (typeof actor === \"string\") {\r\n            throw new Error(`When reading public access, no actor type should be specified (here [${actor}]).`);\r\n        }\r\n        return await getPublicAccess(resourceUrl, actor);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given set of actors: all Agents\r\n * or all Groups.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given actor (Agent\r\n *   or Group). If additional restrictions are set up to apply to the given Agent\r\n *   in a particular situation, those will not be reflected in the return value\r\n *   of this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param actorType type of actor whose access is being read.\r\n * @returns What access is set for the given resource, grouped by resp. Agent or Group.\r\n * @since 1.5.0\r\n */\r\nasync function getAccessForAll(resourceUrl, actorType, options = internal_defaultFetchOptions) {\r\n    if (actorType === \"agent\") {\r\n        return await getAgentAccessAll(resourceUrl, options);\r\n    }\r\n    if (actorType === \"group\") {\r\n        return await getGroupAccessAll(resourceUrl, options);\r\n    }\r\n    return null;\r\n}\r\nasync function setAccessFor(resourceUrl, actorType, access, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {\r\n    if (actorType === \"agent\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When writing Agent-specific access, the given agent cannot be left undefined.\");\r\n        }\r\n        return await setAgentAccess(resourceUrl, actor, access, options);\r\n    }\r\n    if (actorType === \"group\") {\r\n        if (typeof actor !== \"string\") {\r\n            throw new Error(\"When writing Group-specific access, the given group cannot be left undefined.\");\r\n        }\r\n        return await setGroupAccess(resourceUrl, actor, access, options);\r\n    }\r\n    if (actorType === \"public\") {\r\n        if (typeof actor === \"string\") {\r\n            throw new Error(`When writing public access, no actor type should be specified (here [${actor}]).`);\r\n        }\r\n        return await setPublicAccess(resourceUrl, access, actor);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/**\r\n * Get an overview of what access is defined for a given Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Agent. If\r\n *   additional restrictions are set up to apply to the given Agent in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Agent you want to get the access for.\r\n * @since 1.5.0\r\n */\r\nasync function getAgentAccess(resourceUrl, webId, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        return internal_getAgentAccess(resourceInfo, webId);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return await getAgentAccess$1(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Agent.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Agent. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Agent has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Agent's access to.\r\n * @param webId WebID of the Agent you want to set access for.\r\n * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Agent explicitly.\r\n * @since 1.5.0\r\n */\r\nasync function setAgentAccess(resourceUrl, webId, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const updatedResource = internal_setAgentAccess(resourceInfo, webId, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return internal_getAgentAccess(updatedResource, webId);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead != access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + \"`controlRead` and `controlWrite` should have the same value.\");\r\n        }\r\n        const wacAccess = access;\r\n        await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);\r\n        return await getAgentAccess$1(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for all Agents with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Agents. If\r\n *   additional restrictions are set up to apply to the listed Agents in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, grouped by Agent.\r\n * @since 1.5.0\r\n */\r\nasync function getAgentAccessAll(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        return internal_getAgentAccessAll(resourceInfo);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return await getAgentAccessAll$1(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for a given Group.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the given Group. If\r\n *   additional restrictions are set up to apply to the given Group in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @param webId WebID of the Group you want to get the access for.\r\n * @since 1.5.0\r\n */\r\nasync function getGroupAccess(resourceUrl, webId, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        return internal_getGroupAccess(resourceInfo, webId);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return await getGroupAccess$1(resourceInfo, webId, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for all Groups with respect to a given\r\n * Resource.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for the returned Groups. If\r\n *   additional restrictions are set up to apply to the listed Groups in a\r\n *   particular situation, those will not be reflected in the return value of\r\n *   this function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @returns The access information to the Resource, sorted by Group.\r\n * @since 1.5.0\r\n */\r\nasync function getGroupAccessAll(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        return internal_getGroupAccessAll(resourceInfo);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return await getGroupAccessAll$1(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for a specific Group.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for the given Group. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access the given Group has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change the Group's access to.\r\n * @param groupUrl URL of the Group you want to set access for.\r\n * @param access What access permissions you want to set for the given Group to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for the given Group explicitly.\r\n * @since 1.5.0\r\n */\r\nasync function setGroupAccess(resourceUrl, groupUrl, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const updatedResource = internal_setGroupAccess(resourceInfo, groupUrl, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return internal_getGroupAccess(updatedResource, groupUrl);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead != access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + \"`controlRead` and `controlWrite` should have the same value.\");\r\n        }\r\n        const wacAccess = access;\r\n        await setGroupResourceAccess(resourceInfo, groupUrl, wacAccess, options);\r\n        return await getGroupAccess$1(resourceInfo, groupUrl, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get an overview of what access is defined for everyone.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably reading access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only return access specified explicitly for everyone. If\r\n *   additional restrictions are set up to apply to users in a particular\r\n *   situation, those will not be reflected in the return value of this\r\n *   function.\r\n * - It will only return access specified explicitly for the given Resource.\r\n *   In other words, if the Resource is a Container, the returned Access may not\r\n *   apply to contained Resources.\r\n * - If the current user does not have permission to view access for the given\r\n *   Resource, this function will resolve to `null`.\r\n *\r\n * @param resourceUrl URL of the Resource you want to read the access for.\r\n * @since 1.5.0\r\n */\r\nasync function getPublicAccess(resourceUrl, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        return internal_getPublicAccess(resourceInfo);\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        return await getPublicAccess$1(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Set access to a Resource for everybody.\r\n *\r\n * This function works with Solid Pods that implement either the Web Access\r\n * Control spec or the Access Control Policies proposal, with some caveats:\r\n *\r\n * - If access to the given Resource has been set using anything other than the\r\n *   functions in this module, it is possible that it has been set in a way that\r\n *   prevents this function from reliably setting access, in which case it will\r\n *   resolve to `null`.\r\n * - It will only set access explicitly for everybody. In other words,\r\n *   additional restrictions could be present that further restrict or loosen\r\n *   what access a user has in particular circumstances.\r\n * - The provided access will only apply to the given Resource. In other words,\r\n *   if the Resource is a Container, the configured Access may not apply to\r\n *   contained Resources.\r\n * - If the current user does not have permission to view or change access for\r\n *   the given Resource, this function will resolve to `null`.\r\n *\r\n * Additionally, two caveats apply to users with a Pod server that uses WAC:\r\n * - If the Resource did not have an ACL yet, a new one will be initialised.\r\n *   This means that changes to the ACL of a parent Container can no longer\r\n *   affect access people have to this Resource, although existing access will\r\n *   be preserved.\r\n * - Setting different values for `controlRead` and `controlWrite` is not\r\n *   supported, and **will throw an error**. If you expect (some of) your users\r\n *   to have Pods implementing WAC, be sure to pass the same value for both.\r\n *\r\n * @param resourceUrl URL of the Resource you want to change public access to.\r\n * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.\r\n * @returns What access has been set for everybody explicitly.\r\n * @since 1.5.0\r\n */\r\nasync function setPublicAccess(resourceUrl, access, options = internal_defaultFetchOptions) {\r\n    const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);\r\n    if (hasAccessibleAcr(resourceInfo)) {\r\n        const updatedResource = internal_setPublicAccess(resourceInfo, access);\r\n        if (updatedResource) {\r\n            try {\r\n                await saveAcrFor(updatedResource, options);\r\n                return internal_getPublicAccess(updatedResource);\r\n            }\r\n            catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    if (hasAccessibleAcl(resourceInfo)) {\r\n        if (access.controlRead != access.controlWrite) {\r\n            throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + \"`controlRead` and `controlWrite` should have the same value.\");\r\n        }\r\n        const wacAccess = access;\r\n        await setPublicResourceAccess(resourceInfo, wacAccess, options);\r\n        return await getPublicAccess$1(resourceInfo, options);\r\n    }\r\n    return null;\r\n}\n\nvar universal = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAgentAccess: getAgentAccess,\n  setAgentAccess: setAgentAccess,\n  getAgentAccessAll: getAgentAccessAll,\n  getGroupAccess: getGroupAccess,\n  getGroupAccessAll: getGroupAccessAll,\n  setGroupAccess: setGroupAccess,\n  getPublicAccess: getPublicAccess,\n  setPublicAccess: setPublicAccess,\n  getAccessFor: getAccessFor,\n  getAccessForAll: getAccessForAll,\n  setAccessFor: setAccessFor\n});\n\nexport { FetchError, SolidClientError, ThingExpectedError, universal as access, acp_v1, acp_v2, addBoolean, addDatetime, addDecimal, addInteger, addIri, addLiteral, addMockFallbackAclTo, addMockResourceAclTo, addNamedNode, addStringNoLocale, addStringWithLocale, addTerm, addUrl, asIri, asUrl, changeLogAsMarkdown, createAcl, createAclFromFallbackAcl, createContainerAt, createContainerInContainer, createSolidDataset, createThing, deleteAclFor, deleteContainer, deleteFile, deleteSolidDataset, getAgentAccess$2 as getAgentAccess, getAgentAccessAll$2 as getAgentAccessAll, getAgentDefaultAccess, getAgentDefaultAccessAll, getAgentResourceAccess, getAgentResourceAccessAll, getBoolean, getBooleanAll, getContainedResourceUrlAll, getContentType$1 as getContentType, getDatetime, getDatetimeAll, getDecimal, getDecimalAll, getFallbackAcl, getFile, getFileWithAcl, getGroupAccess$2 as getGroupAccess, getGroupAccessAll$2 as getGroupAccessAll, getGroupDefaultAccess, getGroupDefaultAccessAll, getGroupResourceAccess, getGroupResourceAccessAll, getInteger, getIntegerAll, getIri, getIriAll, getLiteral, getLiteralAll, getNamedNode, getNamedNodeAll, getPodOwner, getPublicAccess$2 as getPublicAccess, getPublicDefaultAccess, getPublicResourceAccess, getResourceAcl, getResourceInfo, getResourceInfoWithAcl, getSolidDataset, getSolidDatasetWithAcl, getSourceIri, getSourceUrl, getStringByLocaleAll, getStringNoLocale, getStringNoLocaleAll, getStringWithLocale, getStringWithLocaleAll, getTerm, getTermAll, getThing, getThingAll, getUrl, getUrlAll, hasAccessibleAcl, hasAcl, hasFallbackAcl, hasResourceAcl, hasResourceInfo, hasServerResourceInfo, isContainer, isPodOwner, isRawData, isThing, mockContainerFrom, mockFetchError, mockFileFrom, mockSolidDatasetFrom, mockThingFrom, overwriteFile, removeAll, removeBoolean, removeDatetime, removeDecimal, removeInteger, removeIri, removeLiteral, removeNamedNode, removeStringNoLocale, removeStringWithLocale, removeThing, removeUrl, saveAclFor, saveFileInContainer, saveSolidDatasetAt, saveSolidDatasetInContainer, setAgentDefaultAccess, setAgentResourceAccess$1 as setAgentResourceAccess, setBoolean, setDatetime, setDecimal, setGroupDefaultAccess, setGroupResourceAccess$1 as setGroupResourceAccess, setInteger, setIri, setLiteral, setNamedNode, setPublicDefaultAccess, setPublicResourceAccess$1 as setPublicResourceAccess, setStringNoLocale, setStringWithLocale, setTerm, setThing, setUrl, solidDatasetAsMarkdown, thingAsMarkdown };\n","<template>\r\n  <div>\r\n    <b-button @click=\"test\">Test</b-button>\r\n    see https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-data/\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport {/* handleIncomingRedirect, login,*/ fetch, getDefaultSession,/* onSessionRestore*/ } from '@inrupt/solid-client-authn-browser'\r\n\r\n//import { SPACE } from \"@inrupt/vocab-solid-common\";\r\nimport { FOAF, SCHEMA_INRUPT_EXT, VCARD } from \"@inrupt/vocab-common-rdf\";\r\n\r\nimport {\r\n  getSolidDataset,\r\n  getThing,\r\n  getStringNoLocale,\r\n  getUrl,\r\n  getUrlAll,\r\n  /* saveSolidDatasetAt */\r\n} from \"@inrupt/solid-client\";\r\n\r\nexport default {\r\n  name: \"SolidFetchTest\",\r\n\r\n  methods: {\r\n    async test() {\r\n\r\n      // 3. Make authenticated requests by passing `fetch` to the solid-client functions.\r\n      // The user must have logged in as someone with the appropriate access to the specified URL.\r\n      let webId = await getDefaultSession().info.webId\r\n      // For example, the user must be someone with Read access to the specified URL.\r\n      const userDataset = await getSolidDataset(\r\n        //  \"https://docs-example.inrupt.net/profile/card\", {\r\n        webId, {\r\n          fetch: fetch\r\n        });\r\n        console.log(userDataset)\r\n\r\n        const profile = getThing(\r\n          userDataset,\r\n          webId\r\n        );\r\n\r\n        const lastName = getStringNoLocale(profile, SCHEMA_INRUPT_EXT.familyName);\r\n        const fname = getStringNoLocale(profile, FOAF.firstName);\r\n        const role = getStringNoLocale(profile, VCARD.role);\r\n\r\n        console.log(lastName, fname, role)\r\n\r\n        // 3. Retrieve specific data from the retrieved thing; i.e. profile.\r\n\r\n        // 3a. Get a single string data value from the profile.\r\n        // Specifically, the operation returns the profile's VCARD.fn\r\n        // (i.e., \"http://www.w3.org/2006/vcard/ns#fn\") value as a string.\r\n\r\n        const fn = getStringNoLocale(profile, VCARD.fn);\r\n\r\n        // 3b. Get multiple URL data from the profile.\r\n        // Specifically , the operation returns the profile's FOAF.knows\r\n        // (i.e., \"http://xmlns.com/foaf/0.1/knows\") values as an array of URLs.\r\n        // The URLs point to the Things representing Persons.\r\n\r\n        const acquaintances = getUrlAll(profile, FOAF.knows);\r\n\r\n        console.log(fn, acquaintances)\r\n\r\n      //  console.log(\"SPACE\",SPACE)\r\n        let storage = getUrl(profile, \"http://www.w3.org/ns/pim/space#storage\");\r\n        console.log(\"storage\", storage)\r\n        //\r\n        // // ...\r\n        //\r\n\r\n        // let myChangedDataset = userDataset\r\n        // // // For example, the user must be someone with Write access to the specified URL.\r\n        // const savedSolidDataset = await saveSolidDatasetAt(\r\n        //   \"https://docs-example.inrupt.net/profile/card\",\r\n        //   myChangedDataset, {\r\n        //     fetch: fetch\r\n        //   });\r\n        //\r\n        //   console.log(savedSolidDataset)\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n\r\n  <style>\r\n\r\n  </style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SolidFetchTest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./SolidFetchTest.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SolidFetchTest.vue?vue&type=template&id=4c3d30f3&\"\nimport script from \"./SolidFetchTest.vue?vue&type=script&lang=js&\"\nexport * from \"./SolidFetchTest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var DataFactory = require('./lib/data-factory')\n\nmodule.exports = DataFactory\n","function Variable (name) {\n  this.value = name\n}\n\nVariable.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","'use strict'\n\nvar COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i\nvar WS_TRIM_PATTERN = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\nvar WS_CHAR_PATTERN = /\\s|\\uFEFF|\\xA0/\nvar WS_FOLD_PATTERN = /\\r?\\n[\\x20\\x09]+/g\nvar DELIMITER_PATTERN = /[;,\"]/\nvar WS_DELIMITER_PATTERN = /[;,\"]|\\s/\n\n/**\n * Token character pattern\n * @type {RegExp}\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nvar TOKEN_PATTERN = /^[!#$%&'*+\\-\\.^_`|~\\da-zA-Z]+$/\n\nvar STATE = {\n  IDLE: 1 << 0,\n  URI: 1 << 1,\n  ATTR: 1 << 2,\n}\n\nfunction trim( value ) {\n  return value.replace( WS_TRIM_PATTERN, '' )\n}\n\nfunction hasWhitespace( value ) {\n  return WS_CHAR_PATTERN.test( value )\n}\n\nfunction skipWhitespace( value, offset ) {\n  while( hasWhitespace( value[offset] ) ) {\n    offset++\n  }\n  return offset\n}\n\nfunction needsQuotes( value ) {\n  return WS_DELIMITER_PATTERN.test( value ) ||\n    !TOKEN_PATTERN.test( value )\n}\n\nclass Link {\n\n  /**\n   * Link\n   * @constructor\n   * @param {String} [value]\n   * @returns {Link}\n   */\n  constructor( value ) {\n\n    /** @type {Array} URI references */\n    this.refs = []\n\n    if( value ) {\n      this.parse( value )\n    }\n\n  }\n\n  /**\n   * Get refs with given relation type\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  rel( value ) {\n\n    var links = []\n    var type = value.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ].rel.toLowerCase() === type ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /**\n   * Get refs where given attribute has a given value\n   * @param {String} attr\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  get( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    var links = []\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  set( link ) {\n    this.refs.push( link )\n    return this\n  }\n\n  has( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        return true\n      }\n    }\n\n    return false\n\n  }\n\n  parse( value, offset ) {\n\n    offset = offset || 0\n    value = offset ? value.slice( offset ) : value\n\n    // Trim & unfold folded lines\n    value = trim( value ).replace( WS_FOLD_PATTERN, '' )\n\n    var state = STATE.IDLE\n    var length = value.length\n    var offset = 0\n    var ref = null\n\n    while( offset < length ) {\n      if( state === STATE.IDLE ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === '<' ) {\n          if( ref != null ) {\n            ref.rel != null ?\n              this.refs.push( ...Link.expandRelations( ref ) ) :\n              this.refs.push( ref )\n          }\n          var end = value.indexOf( '>', offset )\n          if( end === -1 ) throw new Error( 'Expected end of URI delimiter at offset ' + offset )\n          ref = { uri: value.slice( offset + 1, end ) }\n          // this.refs.push( ref )\n          offset = end\n          state = STATE.URI\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n        offset++\n      } else if( state === STATE.URI ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === ';' ) {\n          state = STATE.ATTR\n          offset++\n        } else if( value[offset] === ',' ) {\n          state = STATE.IDLE\n          offset++\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n      } else if( state === STATE.ATTR ) {\n        if( value[offset] ===';' || hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        }\n        var end = value.indexOf( '=', offset )\n        if( end === -1 ) throw new Error( 'Expected attribute delimiter at offset ' + offset )\n        var attr = trim( value.slice( offset, end ) ).toLowerCase()\n        var attrValue = ''\n        offset = end + 1\n        offset = skipWhitespace( value, offset )\n        if( value[offset] === '\"' ) {\n          offset++\n          while( offset < length ) {\n            if( value[offset] === '\"' ) {\n              offset++; break\n            }\n            if( value[offset] === '\\\\' ) {\n              offset++\n            }\n            attrValue += value[offset]\n            offset++\n          }\n        } else {\n          var end = offset + 1\n          while( !DELIMITER_PATTERN.test( value[end] ) && end < length ) {\n            end++\n          }\n          attrValue = value.slice( offset, end )\n          offset = end\n        }\n        if( ref[ attr ] && Link.isSingleOccurenceAttr( attr ) ) {\n          // Ignore multiples of attributes which may only appear once\n        } else if( attr[ attr.length - 1 ] === '*' ) {\n          ref[ attr ] = Link.parseExtendedValue( attrValue )\n        } else {\n          attrValue = attr === 'type' ?\n            attrValue.toLowerCase() : attrValue\n          if( ref[ attr ] != null ) {\n            if( Array.isArray( ref[ attr ] ) ) {\n              ref[ attr ].push( attrValue )\n            } else {\n              ref[ attr ] = [ ref[ attr ], attrValue ]\n            }\n          } else {\n            ref[ attr ] = attrValue\n          }\n        }\n        switch( value[offset] ) {\n          case ',': state = STATE.IDLE; break\n          case ';': state = STATE.ATTR; break\n        }\n        offset++\n      } else {\n        throw new Error( 'Unknown parser state \"' + state + '\"' )\n      }\n    }\n\n    if( ref != null ) {\n      ref.rel != null ?\n        this.refs.push( ...Link.expandRelations( ref ) ) :\n        this.refs.push( ref )\n    }\n\n    ref = null\n\n    return this\n\n  }\n\n  toString() {\n\n    var refs = []\n    var link = ''\n    var ref = null\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      ref = this.refs[i]\n      link = Object.keys( this.refs[i] ).reduce( function( link, attr ) {\n        if( attr === 'uri' ) return link\n        return link + '; ' + Link.formatAttribute( attr, ref[ attr ] )\n      }, '<' + ref.uri + '>' )\n      refs.push( link )\n    }\n\n    return refs.join( ', ' )\n\n  }\n\n}\n\n/**\n * Determines whether an encoding can be\n * natively handled with a `Buffer`\n * @param {String} value\n * @returns {Boolean}\n */\nLink.isCompatibleEncoding = function( value ) {\n  return COMPATIBLE_ENCODING_PATTERN.test( value )\n}\n\nLink.parse = function( value, offset ) {\n  return new Link().parse( value, offset )\n}\n\nLink.isSingleOccurenceAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'media' ||\n    attr === 'title' || attr === 'title*'\n}\n\nLink.isTokenAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'anchor'\n}\n\nLink.escapeQuotes = function( value ) {\n  return value.replace( /\"/g, '\\\\\"' )\n}\n\nLink.expandRelations = function( ref ) {\n  var rels = ref.rel.split( ' ' )\n  return rels.map( function( rel ) {\n    var value = Object.assign( {}, ref )\n    value.rel = rel\n    return value\n  })\n}\n\n/**\n * Parses an extended value and attempts to decode it\n * @internal\n * @param {String} value\n * @return {Object}\n */\nLink.parseExtendedValue = function( value ) {\n  var parts = /([^']+)?(?:'([^']+)')?(.+)/.exec( value )\n  return {\n    language: parts[2].toLowerCase(),\n    encoding: Link.isCompatibleEncoding( parts[1] ) ?\n      null : parts[1].toLowerCase(),\n    value: Link.isCompatibleEncoding( parts[1] ) ?\n      decodeURIComponent( parts[3] ) : parts[3]\n  }\n}\n\n/**\n * Format a given extended attribute and it's value\n * @param {String} attr\n * @param {Object} data\n * @return {String}\n */\nLink.formatExtendedAttribute = function( attr, data ) {\n\n  var encoding = ( data.encoding || 'utf-8' ).toUpperCase()\n  var language = data.language || 'en'\n\n  var encodedValue = ''\n\n  if( Buffer.isBuffer( data.value ) && Link.isCompatibleEncoding( encoding ) ) {\n    encodedValue = data.value.toString( encoding )\n  } else if( Buffer.isBuffer( data.value ) ) {\n    encodedValue = data.value.toString( 'hex' )\n      .replace( /[0-9a-f]{2}/gi, '%$1' )\n  } else {\n    encodedValue = encodeURIComponent( data.value )\n  }\n\n  return attr + '=' + encoding + '\\'' +\n    language + '\\'' + encodedValue\n\n}\n\n/**\n * Format a given attribute and it's value\n * @param {String} attr\n * @param {String|Object} value\n * @return {String}\n */\nLink.formatAttribute = function( attr, value ) {\n\n  if( Array.isArray( value ) ) {\n    return value.map(( item ) => {\n      return Link.formatAttribute( attr, item )\n    }).join( '; ' )\n  }\n\n  if( attr[ attr.length - 1 ] === '*' || typeof value !== 'string' ) {\n    return Link.formatExtendedAttribute( attr, value )\n  }\n\n  if( Link.isTokenAttr( attr ) ) {\n    value = needsQuotes( value ) ?\n      '\"' + Link.escapeQuotes( value ) + '\"' :\n      Link.escapeQuotes( value )\n  } else if( needsQuotes( value ) ) {\n    value = encodeURIComponent( value )\n    // We don't need to escape <SP> <,> <;> within quotes\n    value = value\n      .replace( /%20/g, ' ' )\n      .replace( /%2C/g, ',' )\n      .replace( /%3B/g, ';' )\n\n    value = '\"' + value + '\"'\n  }\n\n  return attr + '=' + value\n\n}\n\nmodule.exports = Link\n","const rdf = require('@rdfjs/data-model')\nconst DatasetCore = require('./DatasetCore')\n\nfunction dataset (quads) {\n  return new DatasetCore(quads)\n}\n\nmodule.exports = Object.assign({ dataset }, rdf)\n","var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn) {\n  var module = { exports: {} };\n\treturn fn(module, module.exports), module.exports;\n}\n\nvar BlankNode_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n\n});\n\nvar DefaultGraph_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n\n});\n\nvar NamedNode_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n\n});\n\nvar Literal_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\n\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && other.datatype.equals(this.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n\n});\n\nvar Quad_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n\n});\n\nvar Variable_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n\n});\n\nvar DataFactory_1 = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\n\n\n\n\n\n\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n\n});\n\nvar rdfDataFactory = createCommonjsModule(function (module, exports) {\nvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(BlankNode_1, exports);\n__exportStar(DataFactory_1, exports);\n__exportStar(DefaultGraph_1, exports);\n__exportStar(Literal_1, exports);\n__exportStar(NamedNode_1, exports);\n__exportStar(Quad_1, exports);\n__exportStar(Variable_1, exports);\n\n});\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory = new rdfDataFactory.DataFactory();\r\nfunction _NS(localName) {\r\n    return rdfFactory.namedNode(\"http://schema.org/\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar SCHEMA_INRUPT_EXT = {\r\n    PREFIX: \"schema-inrupt-ext\",\r\n    NAMESPACE: \"http://schema.org/\",\r\n    PREFIX_AND_NAMESPACE: { \"schema-inrupt-ext\": \"http://schema.org/\" },\r\n    NS: _NS,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Family Name\r\n     */\r\n    familyName: _NS(\"familyName\"),\r\n    /**\r\n     * Additional Name\r\n     */\r\n    additionalName: _NS(\"additionalName\"),\r\n    /**\r\n     * License\r\n     */\r\n    license: _NS(\"license\"),\r\n    /**\r\n     * Must have comment too!\r\n     */\r\n    newTerm: _NS(\"newTerm\"),\r\n    /**\r\n     * Name\r\n     */\r\n    name: _NS(\"name\"),\r\n    /**\r\n     * Text\r\n     */\r\n    text: _NS(\"text\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$1 = new rdfDataFactory.DataFactory();\r\nfunction _NS$1(localName) {\r\n    return rdfFactory$1.namedNode(\"http://www.w3.org/2006/vcard/ns#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar VCARD = {\r\n    PREFIX: \"vcard\",\r\n    NAMESPACE: \"http://www.w3.org/2006/vcard/ns#\",\r\n    PREFIX_AND_NAMESPACE: { \"vcard\": \"http://www.w3.org/2006/vcard/ns#\" },\r\n    NS: _NS$1,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * Acquaintance\r\n     */\r\n    Acquaintance: _NS$1(\"Acquaintance\"),\r\n    /**\r\n     * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.\r\n     */\r\n    RelatedType: _NS$1(\"RelatedType\"),\r\n    /**\r\n     * Agent\r\n     */\r\n    Agent: _NS$1(\"Agent\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    BBS: _NS$1(\"BBS\"),\r\n    /**\r\n     * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.\r\n     */\r\n    TelephoneType: _NS$1(\"TelephoneType\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Car: _NS$1(\"Car\"),\r\n    /**\r\n     * Also called mobile telephone\r\n     */\r\n    Cell: _NS$1(\"Cell\"),\r\n    /**\r\n     * Child\r\n     */\r\n    Child: _NS$1(\"Child\"),\r\n    /**\r\n     * Colleague\r\n     */\r\n    Colleague: _NS$1(\"Colleague\"),\r\n    /**\r\n     * Contact\r\n     */\r\n    Contact: _NS$1(\"Contact\"),\r\n    /**\r\n     * Coresident\r\n     */\r\n    Coresident: _NS$1(\"Coresident\"),\r\n    /**\r\n     * Coworker\r\n     */\r\n    Coworker: _NS$1(\"Coworker\"),\r\n    /**\r\n     * Crush\r\n     */\r\n    Crush: _NS$1(\"Crush\"),\r\n    /**\r\n     * Date\r\n     */\r\n    Date: _NS$1(\"Date\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Dom: _NS$1(\"Dom\"),\r\n    /**\r\n     * Used for type codes. The URI of the type code must be used as the value for Type.\r\n     */\r\n    Type: _NS$1(\"Type\"),\r\n    /**\r\n     * Emergency\r\n     */\r\n    Emergency: _NS$1(\"Emergency\"),\r\n    /**\r\n     * Fax\r\n     */\r\n    Fax: _NS$1(\"Fax\"),\r\n    /**\r\n     * Female\r\n     */\r\n    Female: _NS$1(\"Female\"),\r\n    /**\r\n     * Used for gender codes. The URI of the gender code must be used as the value for Gender.\r\n     */\r\n    Gender: _NS$1(\"Gender\"),\r\n    /**\r\n     * Friend\r\n     */\r\n    Friend: _NS$1(\"Friend\"),\r\n    /**\r\n     * This implies that the property is related to an individual's personal life\r\n     */\r\n    Home: _NS$1(\"Home\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    ISDN: _NS$1(\"ISDN\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Internet: _NS$1(\"Internet\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Intl: _NS$1(\"Intl\"),\r\n    /**\r\n     * Kin\r\n     */\r\n    Kin: _NS$1(\"Kin\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Label: _NS$1(\"Label\"),\r\n    /**\r\n     * Male\r\n     */\r\n    Male: _NS$1(\"Male\"),\r\n    /**\r\n     * Me\r\n     */\r\n    Me: _NS$1(\"Me\"),\r\n    /**\r\n     * Met\r\n     */\r\n    Met: _NS$1(\"Met\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Modem: _NS$1(\"Modem\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Msg: _NS$1(\"Msg\"),\r\n    /**\r\n     * Muse\r\n     */\r\n    Muse: _NS$1(\"Muse\"),\r\n    /**\r\n     * Neighbor\r\n     */\r\n    Neighbor: _NS$1(\"Neighbor\"),\r\n    /**\r\n     * None\r\n     */\r\n    None: _NS$1(\"None\"),\r\n    /**\r\n     * Other\r\n     */\r\n    Other: _NS$1(\"Other\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    PCS: _NS$1(\"PCS\"),\r\n    /**\r\n     * Pager\r\n     */\r\n    Pager: _NS$1(\"Pager\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Parcel: _NS$1(\"Parcel\"),\r\n    /**\r\n     * Parent\r\n     */\r\n    Parent: _NS$1(\"Parent\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Postal: _NS$1(\"Postal\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    Pref: _NS$1(\"Pref\"),\r\n    /**\r\n     * Sibling\r\n     */\r\n    Sibling: _NS$1(\"Sibling\"),\r\n    /**\r\n     * Spouse\r\n     */\r\n    Spouse: _NS$1(\"Spouse\"),\r\n    /**\r\n     * Sweetheart\r\n     */\r\n    Sweetheart: _NS$1(\"Sweetheart\"),\r\n    /**\r\n     * This class is deprecated. Use the hasTelephone object property.\r\n     */\r\n    Tel: _NS$1(\"Tel\"),\r\n    /**\r\n     * Also called sms telephone\r\n     */\r\n    Text: _NS$1(\"Text\"),\r\n    /**\r\n     * Text phone\r\n     */\r\n    TextPhone: _NS$1(\"TextPhone\"),\r\n    /**\r\n     * Unknown\r\n     */\r\n    Unknown: _NS$1(\"Unknown\"),\r\n    /**\r\n     * Video\r\n     */\r\n    Video: _NS$1(\"Video\"),\r\n    /**\r\n     * Voice\r\n     */\r\n    Voice: _NS$1(\"Voice\"),\r\n    /**\r\n     * This implies that the property is related to an individual's work place\r\n     */\r\n    Work: _NS$1(\"Work\"),\r\n    /**\r\n     * This class is deprecated\r\n     */\r\n    X400: _NS$1(\"X400\"),\r\n    /**\r\n     * To specify the components of the delivery address for the  object\r\n     */\r\n    Address: _NS$1(\"Address\"),\r\n    /**\r\n     * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.\r\n     */\r\n    Email: _NS$1(\"Email\"),\r\n    /**\r\n     * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.\r\n     */\r\n    Group: _NS$1(\"Group\"),\r\n    /**\r\n     * The parent class for all objects\r\n     */\r\n    Kind: _NS$1(\"Kind\"),\r\n    /**\r\n     * An object representing a single person or entity\r\n     */\r\n    Individual: _NS$1(\"Individual\"),\r\n    /**\r\n     * An object representing a named geographical place\r\n     */\r\n    Location: _NS$1(\"Location\"),\r\n    /**\r\n     * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.\r\n  \n     */\r\n    Organization: _NS$1(\"Organization\"),\r\n    /**\r\n     * To specify the components of the name of the object\r\n     */\r\n    Name: _NS$1(\"Name\"),\r\n    /**\r\n     * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)\r\n     */\r\n    VCard: _NS$1(\"VCard\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    adr: _NS$1(\"adr\"),\r\n    /**\r\n     * To specify the components of the delivery address for the object\r\n     */\r\n    hasAddress: _NS$1(\"hasAddress\"),\r\n    /**\r\n     * This object property has been deprecated\r\n     */\r\n    agent: _NS$1(\"agent\"),\r\n    /**\r\n     * The date of marriage, or equivalent, of the object\r\n     */\r\n    anniversary: _NS$1(\"anniversary\"),\r\n    /**\r\n     * To specify the birth date of the object\r\n     */\r\n    bday: _NS$1(\"bday\"),\r\n    /**\r\n     * The category information about the object, also known as tags\r\n     */\r\n    category: _NS$1(\"category\"),\r\n    /**\r\n     * This data property has been deprecated\r\n     */\r\n    class: _NS$1(\"class\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    email: _NS$1(\"email\"),\r\n    /**\r\n     * To specify the electronic mail address for communication with the object\r\n     */\r\n    hasEmail: _NS$1(\"hasEmail\"),\r\n    /**\r\n     * This data property has been deprecated\r\n     */\r\n    extended_address: _NS$1(\"extended-address\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    geo: _NS$1(\"geo\"),\r\n    /**\r\n     * To specify information related to the global positioning of the object. May also be used as a property parameter.\r\n     */\r\n    hasGeo: _NS$1(\"hasGeo\"),\r\n    /**\r\n     * Used to support property parameters for the additional name data property\r\n     */\r\n    hasAdditionalName: _NS$1(\"hasAdditionalName\"),\r\n    /**\r\n     * To specify the busy time associated with the object. (Was called FBURL in RFC6350)\r\n     */\r\n    hasCalendarBusy: _NS$1(\"hasCalendarBusy\"),\r\n    /**\r\n     * To specify the calendar associated with the object. (Was called CALURI in RFC6350)\r\n     */\r\n    hasCalendarLink: _NS$1(\"hasCalendarLink\"),\r\n    /**\r\n     * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)\r\n     */\r\n    hasCalendarRequest: _NS$1(\"hasCalendarRequest\"),\r\n    /**\r\n     * Used to support property parameters for the category data property\r\n     */\r\n    hasCategory: _NS$1(\"hasCategory\"),\r\n    /**\r\n     * Used to support property parameters for the country name data property\r\n     */\r\n    hasCountryName: _NS$1(\"hasCountryName\"),\r\n    /**\r\n     * Used to support property parameters for the formatted name data property\r\n     */\r\n    hasFN: _NS$1(\"hasFN\"),\r\n    /**\r\n     * Used to support property parameters for the family name data property\r\n     */\r\n    hasFamilyName: _NS$1(\"hasFamilyName\"),\r\n    /**\r\n     * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.\r\n     */\r\n    hasGender: _NS$1(\"hasGender\"),\r\n    /**\r\n     * Used to support property parameters for the given name data property\r\n     */\r\n    hasGivenName: _NS$1(\"hasGivenName\"),\r\n    /**\r\n     * Used to support property parameters for the honorific prefix data property\r\n     */\r\n    hasHonorificPrefix: _NS$1(\"hasHonorificPrefix\"),\r\n    /**\r\n     * Used to support property parameters for the honorific suffix data property\r\n     */\r\n    hasHonorificSuffix: _NS$1(\"hasHonorificSuffix\"),\r\n    /**\r\n     * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)\r\n     */\r\n    hasInstantMessage: _NS$1(\"hasInstantMessage\"),\r\n    /**\r\n     * Used to support property parameters for the language data property\r\n     */\r\n    hasLanguage: _NS$1(\"hasLanguage\"),\r\n    /**\r\n     * Used to support property parameters for the locality data property\r\n     */\r\n    hasLocality: _NS$1(\"hasLocality\"),\r\n    /**\r\n     * Used to support property parameters for the nickname data property\r\n     */\r\n    hasNickname: _NS$1(\"hasNickname\"),\r\n    /**\r\n     * The nick name associated with the object\r\n     */\r\n    nickname: _NS$1(\"nickname\"),\r\n    /**\r\n     * Used to support property parameters for the note data property\r\n     */\r\n    hasNote: _NS$1(\"hasNote\"),\r\n    /**\r\n     * Used to support property parameters for the organization name data property\r\n     */\r\n    hasOrganizationName: _NS$1(\"hasOrganizationName\"),\r\n    /**\r\n     * Used to support property parameters for the organization unit name data property\r\n     */\r\n    hasOrganizationUnit: _NS$1(\"hasOrganizationUnit\"),\r\n    /**\r\n     * Used to support property parameters for the postal code data property\r\n     */\r\n    hasPostalCode: _NS$1(\"hasPostalCode\"),\r\n    /**\r\n     * Used to support property parameters for the region data property\r\n     */\r\n    hasRegion: _NS$1(\"hasRegion\"),\r\n    /**\r\n     * To specify a relationship between another entity and the entity represented by this object\r\n     */\r\n    hasRelated: _NS$1(\"hasRelated\"),\r\n    /**\r\n     * Used to support property parameters for the role data property\r\n     */\r\n    hasRole: _NS$1(\"hasRole\"),\r\n    /**\r\n     * To identify the source of directory information of the object\r\n     */\r\n    hasSource: _NS$1(\"hasSource\"),\r\n    /**\r\n     * Used to support property parameters for the street address data property\r\n     */\r\n    hasStreetAddress: _NS$1(\"hasStreetAddress\"),\r\n    /**\r\n     * Used to support property parameters for the title data property\r\n     */\r\n    hasTitle: _NS$1(\"hasTitle\"),\r\n    /**\r\n     * To specify a value that represents a globally unique identifier corresponding to the object\r\n     */\r\n    hasUID: _NS$1(\"hasUID\"),\r\n    /**\r\n     * Used to indicate the resource value of an object property that requires property parameters\r\n     */\r\n    hasValue: _NS$1(\"hasValue\"),\r\n    /**\r\n     * This data property has been deprecated\r\n     */\r\n    label: _NS$1(\"label\"),\r\n    /**\r\n     * To specify the language that may be used for contacting the object. May also be used as a property parameter.\r\n     */\r\n    language: _NS$1(\"language\"),\r\n    /**\r\n     * This data property has been deprecated. See hasGeo\r\n     */\r\n    latitude: _NS$1(\"latitude\"),\r\n    /**\r\n     * This data property has been deprecated. See hasGeo\r\n     */\r\n    longitude: _NS$1(\"longitude\"),\r\n    /**\r\n     * This data property has been deprecated\r\n     */\r\n    mailer: _NS$1(\"mailer\"),\r\n    /**\r\n     * A note associated with the object\r\n     */\r\n    note: _NS$1(\"note\"),\r\n    /**\r\n     * This object property has been mapped. Use the organization-name data property.\r\n     */\r\n    org: _NS$1(\"org\"),\r\n    /**\r\n     * To specify the organizational name associated with the object\r\n     */\r\n    organization_name: _NS$1(\"organization-name\"),\r\n    /**\r\n     * To specify the organizational unit name associated with the object\r\n     */\r\n    organization_unit: _NS$1(\"organization-unit\"),\r\n    /**\r\n     * This data property has been deprecated\r\n     */\r\n    post_office_box: _NS$1(\"post-office-box\"),\r\n    /**\r\n     * To specify the identifier for the product that created the object\r\n     */\r\n    prodid: _NS$1(\"prodid\"),\r\n    /**\r\n     * To specify revision information about the object\r\n     */\r\n    rev: _NS$1(\"rev\"),\r\n    /**\r\n     * To specify the function or part played in a particular situation by the object\r\n     */\r\n    role: _NS$1(\"role\"),\r\n    /**\r\n     * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.\r\n     */\r\n    sort_string: _NS$1(\"sort-string\"),\r\n    /**\r\n     * To specify the position or job of the object\r\n     */\r\n    title: _NS$1(\"title\"),\r\n    /**\r\n     * To indicate time zone information that is specific to the object. May also be used as a property parameter.\r\n     */\r\n    tz: _NS$1(\"tz\"),\r\n    /**\r\n     * Used to indicate the literal value of a data property that requires property parameters\r\n     */\r\n    value: _NS$1(\"value\"),\r\n    /**\r\n     * The country name associated with the address of the object\r\n     */\r\n    country_name: _NS$1(\"country-name\"),\r\n    /**\r\n     * The locality (e.g. city or town) associated with the address of the object\r\n     */\r\n    locality: _NS$1(\"locality\"),\r\n    /**\r\n     * The postal code associated with the address of the object\r\n     */\r\n    postal_code: _NS$1(\"postal-code\"),\r\n    /**\r\n     * The region (e.g. state or province) associated with the address of the object\r\n     */\r\n    region: _NS$1(\"region\"),\r\n    /**\r\n     * The street address associated with the address of the object\r\n     */\r\n    street_address: _NS$1(\"street-address\"),\r\n    /**\r\n     * To include a member in the group this object represents. (This property can only be used by Group individuals)\r\n     */\r\n    hasMember: _NS$1(\"hasMember\"),\r\n    /**\r\n     * The additional name associated with the object\r\n     */\r\n    additional_name: _NS$1(\"additional-name\"),\r\n    /**\r\n     * The family name associated with the object\r\n     */\r\n    family_name: _NS$1(\"family-name\"),\r\n    /**\r\n     * The given name associated with the object\r\n     */\r\n    given_name: _NS$1(\"given-name\"),\r\n    /**\r\n     * The honorific prefix of the name associated with the object\r\n     */\r\n    honorific_prefix: _NS$1(\"honorific-prefix\"),\r\n    /**\r\n     * The honorific suffix of the name associated with the object\r\n     */\r\n    honorific_suffix: _NS$1(\"honorific-suffix\"),\r\n    /**\r\n     * The formatted text corresponding to the name of the object\r\n     */\r\n    fn: _NS$1(\"fn\"),\r\n    /**\r\n     * To specify a public key or authentication certificate associated with the object\r\n     */\r\n    hasKey: _NS$1(\"hasKey\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    key: _NS$1(\"key\"),\r\n    /**\r\n     * To specify a graphic image of a logo associated with the object\r\n     */\r\n    hasLogo: _NS$1(\"hasLogo\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    logo: _NS$1(\"logo\"),\r\n    /**\r\n     * To specify the components of the name of the object\r\n     */\r\n    hasName: _NS$1(\"hasName\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    n: _NS$1(\"n\"),\r\n    /**\r\n     * To specify an image or photograph information that annotates some aspect of the object\r\n     */\r\n    hasPhoto: _NS$1(\"hasPhoto\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    photo: _NS$1(\"photo\"),\r\n    /**\r\n     * To specify a digital sound content information that annotates some aspect of the object\r\n     */\r\n    hasSound: _NS$1(\"hasSound\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    sound: _NS$1(\"sound\"),\r\n    /**\r\n     * To specify the telephone number for telephony communication with the object\r\n     */\r\n    hasTelephone: _NS$1(\"hasTelephone\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    tel: _NS$1(\"tel\"),\r\n    /**\r\n     * To specify a uniform resource locator associated with the object\r\n     */\r\n    hasURL: _NS$1(\"hasURL\"),\r\n    /**\r\n     * This object property has been mapped\r\n     */\r\n    url: _NS$1(\"url\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$2 = new rdfDataFactory.DataFactory();\r\nfunction _NS$2(localName) {\r\n    return rdfFactory$2.namedNode(\"http://www.w3.org/2006/vcard/ns#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar VCARD_INRUPT_EXT = {\r\n    PREFIX: \"vcard-inrupt-ext\",\r\n    NAMESPACE: \"http://www.w3.org/2006/vcard/ns#\",\r\n    PREFIX_AND_NAMESPACE: { \"vcard-inrupt-ext\": \"http://www.w3.org/2006/vcard/ns#\" },\r\n    NS: _NS$2,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * To specify the components of the delivery address for the object\r\n     */\r\n    hasAddress: _NS$2(\"hasAddress\"),\r\n    /**\r\n     * To specify the electronic mail address for communication with the object\r\n     */\r\n    hasEmail: _NS$2(\"hasEmail\"),\r\n    /**\r\n     * To specify the telephone number for telephony communication with the object\r\n     */\r\n    hasTelephone: _NS$2(\"hasTelephone\"),\r\n    /**\r\n     * The formatted text corresponding to the name of the object\r\n     */\r\n    fn: _NS$2(\"fn\"),\r\n    /**\r\n     * To specify the function or part played in a particular situation by the object\r\n     */\r\n    role: _NS$2(\"role\"),\r\n    /**\r\n     * To specify the organizational name associated with the object\r\n     */\r\n    organization_name: _NS$2(\"organization-name\"),\r\n    /**\r\n     * The street address associated with the address of the object\r\n     */\r\n    street_address: _NS$2(\"street-address\"),\r\n    /**\r\n     * The locality (e.g. city or town) associated with the address of the object\r\n     */\r\n    locality: _NS$2(\"locality\"),\r\n    /**\r\n     * The postal code associated with the address of the object\r\n     */\r\n    postal_code: _NS$2(\"postal-code\"),\r\n    /**\r\n     * The region (e.g. state or province) associated with the address of the object\r\n     */\r\n    region: _NS$2(\"region\"),\r\n    /**\r\n     * The country name associated with the address of the object\r\n     */\r\n    country_name: _NS$2(\"country-name\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$3 = new rdfDataFactory.DataFactory();\r\nfunction _NS$3(localName) {\r\n    return rdfFactory$3.namedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar RDF = {\r\n    PREFIX: \"rdf\",\r\n    NAMESPACE: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\r\n    PREFIX_AND_NAMESPACE: { \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" },\r\n    NS: _NS$3,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * The datatype of RDF literals storing fragments of HTML content\r\n     */\r\n    HTML: _NS$3(\"HTML\"),\r\n    /**\r\n     * The datatype of language-tagged string values\r\n     */\r\n    langString: _NS$3(\"langString\"),\r\n    /**\r\n     * The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2\r\n     */\r\n    PlainLiteral: _NS$3(\"PlainLiteral\"),\r\n    /**\r\n     * The class of RDF properties.\r\n     */\r\n    Property: _NS$3(\"Property\"),\r\n    /**\r\n     * The class of RDF statements.\r\n     */\r\n    Statement: _NS$3(\"Statement\"),\r\n    /**\r\n     * The class of unordered containers.\r\n     */\r\n    Bag: _NS$3(\"Bag\"),\r\n    /**\r\n     * The class of ordered containers.\r\n     */\r\n    Seq: _NS$3(\"Seq\"),\r\n    /**\r\n     * The class of containers of alternatives.\r\n     */\r\n    Alt: _NS$3(\"Alt\"),\r\n    /**\r\n     * The class of RDF Lists.\r\n     */\r\n    List: _NS$3(\"List\"),\r\n    /**\r\n     * The datatype of XML literal values.\r\n     */\r\n    XMLLiteral: _NS$3(\"XMLLiteral\"),\r\n    /**\r\n     * The datatype of RDF literals storing JSON content.\r\n     */\r\n    JSON: _NS$3(\"JSON\"),\r\n    /**\r\n     * A class representing a compound literal.\r\n     */\r\n    CompoundLiteral: _NS$3(\"CompoundLiteral\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The subject is an instance of a class.\r\n     */\r\n    type: _NS$3(\"type\"),\r\n    /**\r\n     * The subject of the subject RDF statement.\r\n     */\r\n    subject: _NS$3(\"subject\"),\r\n    /**\r\n     * The predicate of the subject RDF statement.\r\n     */\r\n    predicate: _NS$3(\"predicate\"),\r\n    /**\r\n     * The object of the subject RDF statement.\r\n     */\r\n    object: _NS$3(\"object\"),\r\n    /**\r\n     * Idiomatic property used for structured values.\r\n     */\r\n    value: _NS$3(\"value\"),\r\n    /**\r\n     * The empty list, with no items in it. If the rest of a list is nil then the list has no more items in it.\r\n     */\r\n    nil: _NS$3(\"nil\"),\r\n    /**\r\n     * The first item in the subject RDF list.\r\n     */\r\n    first: _NS$3(\"first\"),\r\n    /**\r\n     * The rest of the subject RDF list after the first item.\r\n     */\r\n    rest: _NS$3(\"rest\"),\r\n    /**\r\n     * The language component of a CompoundLiteral.\r\n     */\r\n    language: _NS$3(\"language\"),\r\n    /**\r\n     * The base direction component of a CompoundLiteral.\r\n     */\r\n    direction: _NS$3(\"direction\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$4 = new rdfDataFactory.DataFactory();\r\nfunction _NS$4(localName) {\r\n    return rdfFactory$4.namedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar RDF_INRUPT_EXT = {\r\n    PREFIX: \"rdf-inrupt-ext\",\r\n    NAMESPACE: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\r\n    PREFIX_AND_NAMESPACE: { \"rdf-inrupt-ext\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" },\r\n    NS: _NS$4,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The subject is an instance of a class.\r\n     */\r\n    type: _NS$4(\"type\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$5 = new rdfDataFactory.DataFactory();\r\nfunction _NS$5(localName) {\r\n    return rdfFactory$5.namedNode(\"http://www.w3.org/2000/01/rdf-schema#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar RDFS = {\r\n    PREFIX: \"rdfs\",\r\n    NAMESPACE: \"http://www.w3.org/2000/01/rdf-schema#\",\r\n    PREFIX_AND_NAMESPACE: { \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\" },\r\n    NS: _NS$5,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * The class resource, everything.\r\n     */\r\n    Resource: _NS$5(\"Resource\"),\r\n    /**\r\n     * The class of classes.\r\n     */\r\n    Class: _NS$5(\"Class\"),\r\n    /**\r\n     * The class of literal values, eg. textual strings and integers.\r\n     */\r\n    Literal: _NS$5(\"Literal\"),\r\n    /**\r\n     * The class of RDF containers.\r\n     */\r\n    Container: _NS$5(\"Container\"),\r\n    /**\r\n     * The class of container membership properties, rdf:_1, rdf:_2, ...,\r\n                      all of which are sub-properties of 'member'.\r\n     */\r\n    ContainerMembershipProperty: _NS$5(\"ContainerMembershipProperty\"),\r\n    /**\r\n     * The class of RDF datatypes.\r\n     */\r\n    Datatype: _NS$5(\"Datatype\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The defininition of the subject resource.\r\n     */\r\n    isDefinedBy: _NS$5(\"isDefinedBy\"),\r\n    /**\r\n     * A human-readable name for the subject.\r\n     */\r\n    label: _NS$5(\"label\"),\r\n    /**\r\n     * A description of the subject resource.\r\n     */\r\n    comment: _NS$5(\"comment\"),\r\n    /**\r\n     * The subject is a subclass of a class.\r\n     */\r\n    subClassOf: _NS$5(\"subClassOf\"),\r\n    /**\r\n     * A range of the subject property.\r\n     */\r\n    range: _NS$5(\"range\"),\r\n    /**\r\n     * A domain of the subject property.\r\n     */\r\n    domain: _NS$5(\"domain\"),\r\n    /**\r\n     * The subject is a subproperty of a property.\r\n     */\r\n    subPropertyOf: _NS$5(\"subPropertyOf\"),\r\n    /**\r\n     * Further information about the subject resource.\r\n     */\r\n    seeAlso: _NS$5(\"seeAlso\"),\r\n    /**\r\n     * A member of the subject resource.\r\n     */\r\n    member: _NS$5(\"member\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$6 = new rdfDataFactory.DataFactory();\r\nfunction _NS$6(localName) {\r\n    return rdfFactory$6.namedNode(\"http://www.w3.org/2001/XMLSchema#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar XSD = {\r\n    PREFIX: \"xsd\",\r\n    NAMESPACE: \"http://www.w3.org/2001/XMLSchema#\",\r\n    PREFIX_AND_NAMESPACE: { \"xsd\": \"http://www.w3.org/2001/XMLSchema#\" },\r\n    NS: _NS$6,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * .\r\n     */\r\n    changes: _NS$6(\"changes\"),\r\n    /**\r\n     * .\r\n     */\r\n    string: _NS$6(\"string\"),\r\n    /**\r\n     * .\r\n     */\r\n    boolean: _NS$6(\"boolean\"),\r\n    /**\r\n     * .\r\n     */\r\n    float: _NS$6(\"float\"),\r\n    /**\r\n     * .\r\n     */\r\n    double: _NS$6(\"double\"),\r\n    /**\r\n     * .\r\n     */\r\n    decimal: _NS$6(\"decimal\"),\r\n    /**\r\n     * .\r\n     */\r\n    dateTime: _NS$6(\"dateTime\"),\r\n    /**\r\n     * .\r\n     */\r\n    duration: _NS$6(\"duration\"),\r\n    /**\r\n     * .\r\n     */\r\n    hexBinary: _NS$6(\"hexBinary\"),\r\n    /**\r\n     * .\r\n     */\r\n    base64Binary: _NS$6(\"base64Binary\"),\r\n    /**\r\n     * .\r\n     */\r\n    anyURI: _NS$6(\"anyURI\"),\r\n    /**\r\n     * .\r\n     */\r\n    ID: _NS$6(\"ID\"),\r\n    /**\r\n     * .\r\n     */\r\n    IDREF: _NS$6(\"IDREF\"),\r\n    /**\r\n     * .\r\n     */\r\n    ENTITY: _NS$6(\"ENTITY\"),\r\n    /**\r\n     * .\r\n     */\r\n    NOTATION: _NS$6(\"NOTATION\"),\r\n    /**\r\n     * .\r\n     */\r\n    normalizedString: _NS$6(\"normalizedString\"),\r\n    /**\r\n     * .\r\n     */\r\n    token: _NS$6(\"token\"),\r\n    /**\r\n     * .\r\n     */\r\n    language: _NS$6(\"language\"),\r\n    /**\r\n     * .\r\n     */\r\n    IDREFS: _NS$6(\"IDREFS\"),\r\n    /**\r\n     * .\r\n     */\r\n    ENTITIES: _NS$6(\"ENTITIES\"),\r\n    /**\r\n     * .\r\n     */\r\n    NMTOKEN: _NS$6(\"NMTOKEN\"),\r\n    /**\r\n     * .\r\n     */\r\n    NMTOKENS: _NS$6(\"NMTOKENS\"),\r\n    /**\r\n     * .\r\n     */\r\n    Name: _NS$6(\"Name\"),\r\n    /**\r\n     * .\r\n     */\r\n    QName: _NS$6(\"QName\"),\r\n    /**\r\n     * .\r\n     */\r\n    NCName: _NS$6(\"NCName\"),\r\n    /**\r\n     * .\r\n     */\r\n    integer: _NS$6(\"integer\"),\r\n    /**\r\n     * .\r\n     */\r\n    nonNegativeInteger: _NS$6(\"nonNegativeInteger\"),\r\n    /**\r\n     * .\r\n     */\r\n    positiveInteger: _NS$6(\"positiveInteger\"),\r\n    /**\r\n     * .\r\n     */\r\n    nonPositiveInteger: _NS$6(\"nonPositiveInteger\"),\r\n    /**\r\n     * .\r\n     */\r\n    negativeInteger: _NS$6(\"negativeInteger\"),\r\n    /**\r\n     * .\r\n     */\r\n    byte: _NS$6(\"byte\"),\r\n    /**\r\n     * .\r\n     */\r\n    int: _NS$6(\"int\"),\r\n    /**\r\n     * .\r\n     */\r\n    long: _NS$6(\"long\"),\r\n    /**\r\n     * .\r\n     */\r\n    short: _NS$6(\"short\"),\r\n    /**\r\n     * .\r\n     */\r\n    unsignedByte: _NS$6(\"unsignedByte\"),\r\n    /**\r\n     * .\r\n     */\r\n    unsignedInt: _NS$6(\"unsignedInt\"),\r\n    /**\r\n     * .\r\n     */\r\n    unsignedLong: _NS$6(\"unsignedLong\"),\r\n    /**\r\n     * .\r\n     */\r\n    unsignedShort: _NS$6(\"unsignedShort\"),\r\n    /**\r\n     * .\r\n     */\r\n    date: _NS$6(\"date\"),\r\n    /**\r\n     * .\r\n     */\r\n    time: _NS$6(\"time\"),\r\n    /**\r\n     * .\r\n     */\r\n    gYearMonth: _NS$6(\"gYearMonth\"),\r\n    /**\r\n     * .\r\n     */\r\n    gYear: _NS$6(\"gYear\"),\r\n    /**\r\n     * .\r\n     */\r\n    gMonthDay: _NS$6(\"gMonthDay\"),\r\n    /**\r\n     * .\r\n     */\r\n    gDay: _NS$6(\"gDay\"),\r\n    /**\r\n     * .\r\n     */\r\n    gMonth: _NS$6(\"gMonth\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$7 = new rdfDataFactory.DataFactory();\r\nfunction _NS$7(localName) {\r\n    return rdfFactory$7.namedNode(\"http://www.w3.org/2002/07/owl#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar OWL = {\r\n    PREFIX: \"owl\",\r\n    NAMESPACE: \"http://www.w3.org/2002/07/owl#\",\r\n    PREFIX_AND_NAMESPACE: { \"owl\": \"http://www.w3.org/2002/07/owl#\" },\r\n    NS: _NS$7,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * The class of ontologies.\r\n     */\r\n    Ontology: _NS$7(\"Ontology\"),\r\n    /**\r\n     * The class of collections of pairwise different individuals.\r\n     */\r\n    AllDifferent: _NS$7(\"AllDifferent\"),\r\n    /**\r\n     * The class of collections of pairwise disjoint classes.\r\n     */\r\n    AllDisjointClasses: _NS$7(\"AllDisjointClasses\"),\r\n    /**\r\n     * The class of collections of pairwise disjoint properties.\r\n     */\r\n    AllDisjointProperties: _NS$7(\"AllDisjointProperties\"),\r\n    /**\r\n     * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.\r\n     */\r\n    Annotation: _NS$7(\"Annotation\"),\r\n    /**\r\n     * The class of annotation properties.\r\n     */\r\n    AnnotationProperty: _NS$7(\"AnnotationProperty\"),\r\n    /**\r\n     * The class of asymmetric properties.\r\n     */\r\n    AsymmetricProperty: _NS$7(\"AsymmetricProperty\"),\r\n    /**\r\n     * The class of object properties.\r\n     */\r\n    ObjectProperty: _NS$7(\"ObjectProperty\"),\r\n    /**\r\n     * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.\r\n     */\r\n    Axiom: _NS$7(\"Axiom\"),\r\n    /**\r\n     * The class of OWL classes.\r\n     */\r\n    Class: _NS$7(\"Class\"),\r\n    /**\r\n     * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.\r\n     */\r\n    DataRange: _NS$7(\"DataRange\"),\r\n    /**\r\n     * The class of data properties.\r\n     */\r\n    DatatypeProperty: _NS$7(\"DatatypeProperty\"),\r\n    /**\r\n     * The class of deprecated classes.\r\n     */\r\n    DeprecatedClass: _NS$7(\"DeprecatedClass\"),\r\n    /**\r\n     * The class of deprecated properties.\r\n     */\r\n    DeprecatedProperty: _NS$7(\"DeprecatedProperty\"),\r\n    /**\r\n     * The class of functional properties.\r\n     */\r\n    FunctionalProperty: _NS$7(\"FunctionalProperty\"),\r\n    /**\r\n     * The class of inverse-functional properties.\r\n     */\r\n    InverseFunctionalProperty: _NS$7(\"InverseFunctionalProperty\"),\r\n    /**\r\n     * The class of irreflexive properties.\r\n     */\r\n    IrreflexiveProperty: _NS$7(\"IrreflexiveProperty\"),\r\n    /**\r\n     * The class of named individuals.\r\n     */\r\n    NamedIndividual: _NS$7(\"NamedIndividual\"),\r\n    /**\r\n     * The class of OWL individuals.\r\n     */\r\n    Thing: _NS$7(\"Thing\"),\r\n    /**\r\n     * The class of negative property assertions.\r\n     */\r\n    NegativePropertyAssertion: _NS$7(\"NegativePropertyAssertion\"),\r\n    /**\r\n     * This is the empty class.\r\n     */\r\n    Nothing: _NS$7(\"Nothing\"),\r\n    /**\r\n     * The class of ontology properties.\r\n     */\r\n    OntologyProperty: _NS$7(\"OntologyProperty\"),\r\n    /**\r\n     * The class of reflexive properties.\r\n     */\r\n    ReflexiveProperty: _NS$7(\"ReflexiveProperty\"),\r\n    /**\r\n     * The class of property restrictions.\r\n     */\r\n    Restriction: _NS$7(\"Restriction\"),\r\n    /**\r\n     * The class of symmetric properties.\r\n     */\r\n    SymmetricProperty: _NS$7(\"SymmetricProperty\"),\r\n    /**\r\n     * The class of transitive properties.\r\n     */\r\n    TransitiveProperty: _NS$7(\"TransitiveProperty\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The annotation property that provides version information for an ontology or another OWL construct.\r\n     */\r\n    versionInfo: _NS$7(\"versionInfo\"),\r\n    /**\r\n     * The property that determines the class that a universal property restriction refers to.\r\n     */\r\n    allValuesFrom: _NS$7(\"allValuesFrom\"),\r\n    /**\r\n     * The property that determines the predicate of an annotated axiom or annotated annotation.\r\n     */\r\n    annotatedProperty: _NS$7(\"annotatedProperty\"),\r\n    /**\r\n     * The property that determines the subject of an annotated axiom or annotated annotation.\r\n     */\r\n    annotatedSource: _NS$7(\"annotatedSource\"),\r\n    /**\r\n     * The property that determines the object of an annotated axiom or annotated annotation.\r\n     */\r\n    annotatedTarget: _NS$7(\"annotatedTarget\"),\r\n    /**\r\n     * The property that determines the predicate of a negative property assertion.\r\n     */\r\n    assertionProperty: _NS$7(\"assertionProperty\"),\r\n    /**\r\n     * The annotation property that indicates that a given ontology is backward compatible with another ontology.\r\n     */\r\n    backwardCompatibleWith: _NS$7(\"backwardCompatibleWith\"),\r\n    /**\r\n     * The data property that does not relate any individual to any data value.\r\n     */\r\n    bottomDataProperty: _NS$7(\"bottomDataProperty\"),\r\n    /**\r\n     * The object property that does not relate any two individuals.\r\n     */\r\n    bottomObjectProperty: _NS$7(\"bottomObjectProperty\"),\r\n    /**\r\n     * The property that determines the cardinality of an exact cardinality restriction.\r\n     */\r\n    cardinality: _NS$7(\"cardinality\"),\r\n    /**\r\n     * The property that determines that a given class is the complement of another class.\r\n     */\r\n    complementOf: _NS$7(\"complementOf\"),\r\n    /**\r\n     * The property that determines that a given data range is the complement of another data range with respect to the data domain.\r\n     */\r\n    datatypeComplementOf: _NS$7(\"datatypeComplementOf\"),\r\n    /**\r\n     * The annotation property that indicates that a given entity has been deprecated.\r\n     */\r\n    deprecated: _NS$7(\"deprecated\"),\r\n    /**\r\n     * The property that determines that two given individuals are different.\r\n     */\r\n    differentFrom: _NS$7(\"differentFrom\"),\r\n    /**\r\n     * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.\r\n     */\r\n    disjointUnionOf: _NS$7(\"disjointUnionOf\"),\r\n    /**\r\n     * The property that determines that two given classes are disjoint.\r\n     */\r\n    disjointWith: _NS$7(\"disjointWith\"),\r\n    /**\r\n     * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.\r\n     */\r\n    distinctMembers: _NS$7(\"distinctMembers\"),\r\n    /**\r\n     * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.\r\n     */\r\n    equivalentClass: _NS$7(\"equivalentClass\"),\r\n    /**\r\n     * The property that determines that two given properties are equivalent.\r\n     */\r\n    equivalentProperty: _NS$7(\"equivalentProperty\"),\r\n    /**\r\n     * The property that determines the collection of properties that jointly build a key.\r\n     */\r\n    hasKey: _NS$7(\"hasKey\"),\r\n    /**\r\n     * The property that determines the property that a self restriction refers to.\r\n     */\r\n    hasSelf: _NS$7(\"hasSelf\"),\r\n    /**\r\n     * The property that determines the individual that a has-value restriction refers to.\r\n     */\r\n    hasValue: _NS$7(\"hasValue\"),\r\n    /**\r\n     * The annotation property that indicates that a given ontology is incompatible with another ontology.\r\n     */\r\n    incompatibleWith: _NS$7(\"incompatibleWith\"),\r\n    /**\r\n     * The property that determines the collection of classes or data ranges that build an intersection.\r\n     */\r\n    intersectionOf: _NS$7(\"intersectionOf\"),\r\n    /**\r\n     * The property that determines that two given properties are inverse.\r\n     */\r\n    inverseOf: _NS$7(\"inverseOf\"),\r\n    /**\r\n     * The property that determines the cardinality of a maximum cardinality restriction.\r\n     */\r\n    maxCardinality: _NS$7(\"maxCardinality\"),\r\n    /**\r\n     * The property that determines the cardinality of a maximum qualified cardinality restriction.\r\n     */\r\n    maxQualifiedCardinality: _NS$7(\"maxQualifiedCardinality\"),\r\n    /**\r\n     * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.\r\n     */\r\n    members: _NS$7(\"members\"),\r\n    /**\r\n     * The property that determines the cardinality of a minimum cardinality restriction.\r\n     */\r\n    minCardinality: _NS$7(\"minCardinality\"),\r\n    /**\r\n     * The property that determines the cardinality of a minimum qualified cardinality restriction.\r\n     */\r\n    minQualifiedCardinality: _NS$7(\"minQualifiedCardinality\"),\r\n    /**\r\n     * The property that determines the class that a qualified object cardinality restriction refers to.\r\n     */\r\n    onClass: _NS$7(\"onClass\"),\r\n    /**\r\n     * The property that determines the data range that a qualified data cardinality restriction refers to.\r\n     */\r\n    onDataRange: _NS$7(\"onDataRange\"),\r\n    /**\r\n     * The property that determines the datatype that a datatype restriction refers to.\r\n     */\r\n    onDatatype: _NS$7(\"onDatatype\"),\r\n    /**\r\n     * The property that determines the collection of individuals or data values that build an enumeration.\r\n     */\r\n    oneOf: _NS$7(\"oneOf\"),\r\n    /**\r\n     * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.\r\n     */\r\n    onProperties: _NS$7(\"onProperties\"),\r\n    /**\r\n     * The property that determines the property that a property restriction refers to.\r\n     */\r\n    onProperty: _NS$7(\"onProperty\"),\r\n    /**\r\n     * The annotation property that indicates the predecessor ontology of a given ontology.\r\n     */\r\n    priorVersion: _NS$7(\"priorVersion\"),\r\n    /**\r\n     * The property that determines the n-tuple of properties that build a sub property chain of a given property.\r\n     */\r\n    propertyChainAxiom: _NS$7(\"propertyChainAxiom\"),\r\n    /**\r\n     * The property that determines that two given properties are disjoint.\r\n     */\r\n    propertyDisjointWith: _NS$7(\"propertyDisjointWith\"),\r\n    /**\r\n     * The property that determines the cardinality of an exact qualified cardinality restriction.\r\n     */\r\n    qualifiedCardinality: _NS$7(\"qualifiedCardinality\"),\r\n    /**\r\n     * The property that determines that two given individuals are equal.\r\n     */\r\n    sameAs: _NS$7(\"sameAs\"),\r\n    /**\r\n     * The property that determines the class that an existential property restriction refers to.\r\n     */\r\n    someValuesFrom: _NS$7(\"someValuesFrom\"),\r\n    /**\r\n     * The property that determines the subject of a negative property assertion.\r\n     */\r\n    sourceIndividual: _NS$7(\"sourceIndividual\"),\r\n    /**\r\n     * The property that determines the object of a negative object property assertion.\r\n     */\r\n    targetIndividual: _NS$7(\"targetIndividual\"),\r\n    /**\r\n     * The property that determines the value of a negative data property assertion.\r\n     */\r\n    targetValue: _NS$7(\"targetValue\"),\r\n    /**\r\n     * The data property that relates every individual to every data value.\r\n     */\r\n    topDataProperty: _NS$7(\"topDataProperty\"),\r\n    /**\r\n     * The object property that relates every two individuals.\r\n     */\r\n    topObjectProperty: _NS$7(\"topObjectProperty\"),\r\n    /**\r\n     * The property that determines the collection of classes or data ranges that build a union.\r\n     */\r\n    unionOf: _NS$7(\"unionOf\"),\r\n    /**\r\n     * The property that determines the collection of facet-value pairs that define a datatype restriction.\r\n     */\r\n    withRestrictions: _NS$7(\"withRestrictions\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$8 = new rdfDataFactory.DataFactory();\r\nfunction _NS$8(localName) {\r\n    return rdfFactory$8.namedNode(\"http://www.w3.org/ns/ldp#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar LDP = {\r\n    PREFIX: \"ldp\",\r\n    NAMESPACE: \"http://www.w3.org/ns/ldp#\",\r\n    PREFIX_AND_NAMESPACE: { \"ldp\": \"http://www.w3.org/ns/ldp#\" },\r\n    NS: _NS$8,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * A HTTP-addressable resource whose lifecycle is managed by a LDP server.\r\n     */\r\n    Resource: _NS$8(\"Resource\"),\r\n    /**\r\n     * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.\r\n     */\r\n    RDFSource: _NS$8(\"RDFSource\"),\r\n    /**\r\n     * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.\r\n     */\r\n    NonRDFSource: _NS$8(\"NonRDFSource\"),\r\n    /**\r\n     * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.\r\n     */\r\n    Container: _NS$8(\"Container\"),\r\n    /**\r\n     * An LDPC that uses a predefined predicate to simply link to its contained resources.\r\n     */\r\n    BasicContainer: _NS$8(\"BasicContainer\"),\r\n    /**\r\n     * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.\r\n     */\r\n    DirectContainer: _NS$8(\"DirectContainer\"),\r\n    /**\r\n     * An LDPC that has the flexibility of choosing what form the membership triples take.\r\n     */\r\n    IndirectContainer: _NS$8(\"IndirectContainer\"),\r\n    /**\r\n     * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.\r\n     */\r\n    Page: _NS$8(\"Page\"),\r\n    /**\r\n     * Element in the list of sorting criteria used by the server to assign container members to pages.\r\n     */\r\n    PageSortCriterion: _NS$8(\"PageSortCriterion\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.\r\n     */\r\n    hasMemberRelation: _NS$8(\"hasMemberRelation\"),\r\n    /**\r\n     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.\r\n     */\r\n    isMemberOfRelation: _NS$8(\"isMemberOfRelation\"),\r\n    /**\r\n     * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.\r\n     */\r\n    membershipResource: _NS$8(\"membershipResource\"),\r\n    /**\r\n     * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.\r\n     */\r\n    insertedContentRelation: _NS$8(\"insertedContentRelation\"),\r\n    /**\r\n     * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.\r\n     */\r\n    member: _NS$8(\"member\"),\r\n    /**\r\n     * Links a container with resources created through the container.\r\n     */\r\n    contains: _NS$8(\"contains\"),\r\n    /**\r\n     * Links a resource with constraints that the server requires requests like creation and update to conform to.\r\n     */\r\n    constrainedBy: _NS$8(\"constrainedBy\"),\r\n    /**\r\n     * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.\r\n     */\r\n    pageSortCriteria: _NS$8(\"pageSortCriteria\"),\r\n    /**\r\n     * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.\r\n     */\r\n    pageSortPredicate: _NS$8(\"pageSortPredicate\"),\r\n    /**\r\n     * The ascending/descending/etc order used to order the members across pages in a page sequence.\r\n     */\r\n    pageSortOrder: _NS$8(\"pageSortOrder\"),\r\n    /**\r\n     * The collation used to order the members across pages in a page sequence when comparing strings.\r\n     */\r\n    pageSortCollation: _NS$8(\"pageSortCollation\"),\r\n    /**\r\n     * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.\r\n     */\r\n    pageSequence: _NS$8(\"pageSequence\"),\r\n    /**\r\n     * Links a resource to a container where notifications for the resource can be created and discovered.\r\n     */\r\n    inbox: _NS$8(\"inbox\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$9 = new rdfDataFactory.DataFactory();\r\nfunction _NS$9(localName) {\r\n    return rdfFactory$9.namedNode(\"http://www.w3.org/2011/http#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar HTTP = {\r\n    PREFIX: \"http\",\r\n    NAMESPACE: \"http://www.w3.org/2011/http#\",\r\n    PREFIX_AND_NAMESPACE: { \"http\": \"http://www.w3.org/2011/http#\" },\r\n    NS: _NS$9,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * A connection used for HTTP transfer.\r\n     */\r\n    Connection: _NS$9(\"Connection\"),\r\n    /**\r\n     * An entity header in an HTTP message.\r\n     */\r\n    EntityHeader: _NS$9(\"EntityHeader\"),\r\n    /**\r\n     * A header in an HTTP message.\r\n     */\r\n    MessageHeader: _NS$9(\"MessageHeader\"),\r\n    /**\r\n     * A general header in an HTTP message.\r\n     */\r\n    GeneralHeader: _NS$9(\"GeneralHeader\"),\r\n    /**\r\n     * A part of a deconstructed header value.\r\n     */\r\n    HeaderElement: _NS$9(\"HeaderElement\"),\r\n    /**\r\n     * A header name.\r\n     */\r\n    HeaderName: _NS$9(\"HeaderName\"),\r\n    /**\r\n     * An HTTP message.\r\n     */\r\n    Message: _NS$9(\"Message\"),\r\n    /**\r\n     * The HTTP method used for the request.\r\n     */\r\n    Method: _NS$9(\"Method\"),\r\n    /**\r\n     * A parameter for a part of a header value.\r\n     */\r\n    Parameter: _NS$9(\"Parameter\"),\r\n    /**\r\n     * An HTTP request.\r\n     */\r\n    Request: _NS$9(\"Request\"),\r\n    /**\r\n     * A header in an HTTP request message.\r\n     */\r\n    RequestHeader: _NS$9(\"RequestHeader\"),\r\n    /**\r\n     * An HTTP response.\r\n     */\r\n    Response: _NS$9(\"Response\"),\r\n    /**\r\n     * A header in an HTTP response message.\r\n     */\r\n    ResponseHeader: _NS$9(\"ResponseHeader\"),\r\n    /**\r\n     * The status code of an HTTP response.\r\n     */\r\n    StatusCode: _NS$9(\"StatusCode\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The absolute request URI.\r\n     */\r\n    absoluteURI: _NS$9(\"absoluteURI\"),\r\n    /**\r\n     * The request URI of an HTTP request.\r\n     */\r\n    requestURI: _NS$9(\"requestURI\"),\r\n    /**\r\n     * The absolute path sort of request URI.\r\n     */\r\n    absolutePath: _NS$9(\"absolutePath\"),\r\n    /**\r\n     * The authority sort of request URI.\r\n     */\r\n    authority: _NS$9(\"authority\"),\r\n    /**\r\n     * The entity body of an HTTP message.\r\n     */\r\n    body: _NS$9(\"body\"),\r\n    /**\r\n     * The authority of a connection used for the HTTP transfer.\r\n     */\r\n    connectionAuthority: _NS$9(\"connectionAuthority\"),\r\n    /**\r\n     * The name of a header element.\r\n     */\r\n    elementName: _NS$9(\"elementName\"),\r\n    /**\r\n     * The value of a header element.\r\n     */\r\n    elementValue: _NS$9(\"elementValue\"),\r\n    /**\r\n     * The name of an HTTP header field.\r\n     */\r\n    fieldName: _NS$9(\"fieldName\"),\r\n    /**\r\n     * The value of an HTTP header field.\r\n     */\r\n    fieldValue: _NS$9(\"fieldValue\"),\r\n    /**\r\n     * The deconstructed parts of an HTTP header value.\r\n     */\r\n    headerElements: _NS$9(\"headerElements\"),\r\n    /**\r\n     * The name of an HTTP header.\r\n     */\r\n    hdrName: _NS$9(\"hdrName\"),\r\n    /**\r\n     * The headers in an HTTP message.\r\n     */\r\n    headers: _NS$9(\"headers\"),\r\n    /**\r\n     * The HTTP version of an HTTP message.\r\n     */\r\n    httpVersion: _NS$9(\"httpVersion\"),\r\n    /**\r\n     * The HTTP method used for the HTTP request.\r\n     */\r\n    mthd: _NS$9(\"mthd\"),\r\n    /**\r\n     * The HTTP method name used for the HTTP request.\r\n     */\r\n    methodName: _NS$9(\"methodName\"),\r\n    /**\r\n     * The name of a parameter in a part of a deconstructed HTTP header value.\r\n     */\r\n    paramName: _NS$9(\"paramName\"),\r\n    /**\r\n     * The parameters in a part of a deconstructed HTTP header value.\r\n     */\r\n    params: _NS$9(\"params\"),\r\n    /**\r\n     * The value of a parameter in a part of a deconstructed HTTP header value.\r\n     */\r\n    paramValue: _NS$9(\"paramValue\"),\r\n    /**\r\n     * The reason phrase (status text) of an HTTP response.\r\n     */\r\n    reasonPhrase: _NS$9(\"reasonPhrase\"),\r\n    /**\r\n     * The HTTP requests made via a connection.\r\n     */\r\n    requests: _NS$9(\"requests\"),\r\n    /**\r\n     * The HTTP response sent in answer to an HTTP request.\r\n     */\r\n    resp: _NS$9(\"resp\"),\r\n    /**\r\n     * The status code of an HTTP response.\r\n     */\r\n    sc: _NS$9(\"sc\"),\r\n    /**\r\n     * The status code number.\r\n     */\r\n    statusCodeNumber: _NS$9(\"statusCodeNumber\"),\r\n    /**\r\n     * The status code value of an HTTP response.\r\n     */\r\n    statusCodeValue: _NS$9(\"statusCodeValue\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$a = new rdfDataFactory.DataFactory();\r\nfunction _NS$a(localName) {\r\n    return rdfFactory$a.namedNode(\"http://www.w3.org/2007/ont/httph#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar HTTPH = {\r\n    PREFIX: \"httph\",\r\n    NAMESPACE: \"http://www.w3.org/2007/ont/httph#\",\r\n    PREFIX_AND_NAMESPACE: { \"httph\": \"http://www.w3.org/2007/ont/httph#\" },\r\n    NS: _NS$a,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * See the HTTP specification\r\n     */\r\n    content_type: _NS$a(\"content-type\"),\r\n    /**\r\n     * See the HTTP specification\r\n     */\r\n    accept: _NS$a(\"accept\"),\r\n    /**\r\n     * See the HTTP specification\r\n     */\r\n    accept_language: _NS$a(\"accept-language\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$b = new rdfDataFactory.DataFactory();\r\nfunction _NS$b(localName) {\r\n    return rdfFactory$b.namedNode(\"http://purl.org/ontology/olo/core#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar OLO = {\r\n    PREFIX: \"olo\",\r\n    NAMESPACE: \"http://purl.org/ontology/olo/core#\",\r\n    PREFIX_AND_NAMESPACE: { \"olo\": \"http://purl.org/ontology/olo/core#\" },\r\n    NS: _NS$b,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * An ordered list with a given length an indexed items.\r\n     */\r\n    OrderedList: _NS$b(\"OrderedList\"),\r\n    /**\r\n     * A slot in an ordered list with a fixed index.\r\n     */\r\n    Slot: _NS$b(\"Slot\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The length of an ordered list.\r\n     */\r\n    length: _NS$b(\"length\"),\r\n    /**\r\n     * Associates the next slot in an ordered list.\r\n     */\r\n    next: _NS$b(\"next\"),\r\n    /**\r\n     * An index of a slot in an ordered list.\r\n     */\r\n    index: _NS$b(\"index\"),\r\n    /**\r\n     * An ordered list of an slot.\r\n     */\r\n    ordered_list: _NS$b(\"ordered_list\"),\r\n    /**\r\n     * Associates the previous slot in an ordered list\r\n     */\r\n    previous: _NS$b(\"previous\"),\r\n    /**\r\n     * An item of a slot in an ordered list.\r\n     */\r\n    item: _NS$b(\"item\"),\r\n    /**\r\n     * A slot in an ordered list.\r\n     */\r\n    slot: _NS$b(\"slot\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$c = new rdfDataFactory.DataFactory();\r\nfunction _NS$c(localName) {\r\n    return rdfFactory$c.namedNode(\"http://www.w3.org/2004/02/skos/core#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar SKOS = {\r\n    PREFIX: \"skos\",\r\n    NAMESPACE: \"http://www.w3.org/2004/02/skos/core#\",\r\n    PREFIX_AND_NAMESPACE: { \"skos\": \"http://www.w3.org/2004/02/skos/core#\" },\r\n    NS: _NS$c,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * An idea or notion; a unit of thought.\r\n     */\r\n    Concept: _NS$c(\"Concept\"),\r\n    /**\r\n     * A set of concepts, optionally including statements about semantic relationships between those concepts.\r\n     */\r\n    ConceptScheme: _NS$c(\"ConceptScheme\"),\r\n    /**\r\n     * A meaningful collection of concepts.\r\n     */\r\n    Collection: _NS$c(\"Collection\"),\r\n    /**\r\n     * An ordered collection of concepts, where both the grouping and the ordering are meaningful.\r\n     */\r\n    OrderedCollection: _NS$c(\"OrderedCollection\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * A statement or formal explanation of the meaning of a concept.\r\n     */\r\n    definition: _NS$c(\"definition\"),\r\n    /**\r\n     * A note that helps to clarify the meaning and/or the use of a concept.\r\n     */\r\n    scopeNote: _NS$c(\"scopeNote\"),\r\n    /**\r\n     * An example of the use of a concept.\r\n     */\r\n    example: _NS$c(\"example\"),\r\n    /**\r\n     * Relates a resource (for example a concept) to a concept scheme in which it is included.\r\n     */\r\n    inScheme: _NS$c(\"inScheme\"),\r\n    /**\r\n     * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.\r\n     */\r\n    hasTopConcept: _NS$c(\"hasTopConcept\"),\r\n    /**\r\n     * Relates a concept to the concept scheme that it is a top level concept of.\r\n     */\r\n    topConceptOf: _NS$c(\"topConceptOf\"),\r\n    /**\r\n     * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.\r\n     */\r\n    prefLabel: _NS$c(\"prefLabel\"),\r\n    /**\r\n     * The range of skos:altLabel is the class of RDF plain literals.\r\n     */\r\n    altLabel: _NS$c(\"altLabel\"),\r\n    /**\r\n     * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.\r\n     */\r\n    hiddenLabel: _NS$c(\"hiddenLabel\"),\r\n    /**\r\n     * A notation, also known as classification code, is a string of characters such as \"T58.5\" or \"303.4833\" used to uniquely identify a concept within the scope of a given concept scheme.\r\n     */\r\n    notation: _NS$c(\"notation\"),\r\n    /**\r\n     * A general note, for any purpose.\r\n     */\r\n    note: _NS$c(\"note\"),\r\n    /**\r\n     * A note about a modification to a concept.\r\n     */\r\n    changeNote: _NS$c(\"changeNote\"),\r\n    /**\r\n     * A note for an editor, translator or maintainer of the vocabulary.\r\n     */\r\n    editorialNote: _NS$c(\"editorialNote\"),\r\n    /**\r\n     * A note about the past state/use/meaning of a concept.\r\n     */\r\n    historyNote: _NS$c(\"historyNote\"),\r\n    /**\r\n     * Links a concept to a concept related by meaning.\r\n     */\r\n    semanticRelation: _NS$c(\"semanticRelation\"),\r\n    /**\r\n     * Broader concepts are typically rendered as parents in a concept hierarchy (tree).\r\n     */\r\n    broader: _NS$c(\"broader\"),\r\n    /**\r\n     * skos:broaderTransitive is a transitive superproperty of skos:broader.\r\n     */\r\n    broaderTransitive: _NS$c(\"broaderTransitive\"),\r\n    /**\r\n     * Narrower concepts are typically rendered as children in a concept hierarchy (tree).\r\n     */\r\n    narrower: _NS$c(\"narrower\"),\r\n    /**\r\n     * skos:narrowerTransitive is a transitive superproperty of skos:narrower.\r\n     */\r\n    narrowerTransitive: _NS$c(\"narrowerTransitive\"),\r\n    /**\r\n     * skos:related is disjoint with skos:broaderTransitive\r\n     */\r\n    related: _NS$c(\"related\"),\r\n    /**\r\n     * Relates a collection to one of its members.\r\n     */\r\n    member: _NS$c(\"member\"),\r\n    /**\r\n     * For any resource, every item in the list given as the value of the\r\n        skos:memberList property is also a value of the skos:member property.\r\n     */\r\n    memberList: _NS$c(\"memberList\"),\r\n    /**\r\n     * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.\r\n     */\r\n    mappingRelation: _NS$c(\"mappingRelation\"),\r\n    /**\r\n     * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.\r\n     */\r\n    broadMatch: _NS$c(\"broadMatch\"),\r\n    /**\r\n     * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.\r\n     */\r\n    narrowMatch: _NS$c(\"narrowMatch\"),\r\n    /**\r\n     * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.\r\n     */\r\n    relatedMatch: _NS$c(\"relatedMatch\"),\r\n    /**\r\n     * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.\r\n     */\r\n    exactMatch: _NS$c(\"exactMatch\"),\r\n    /**\r\n     * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of \"compound errors\" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.\r\n     */\r\n    closeMatch: _NS$c(\"closeMatch\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$d = new rdfDataFactory.DataFactory();\r\nfunction _NS$d(localName) {\r\n    return rdfFactory$d.namedNode(\"http://www.w3.org/ns/ui#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar UI = {\r\n    PREFIX: \"ui\",\r\n    NAMESPACE: \"http://www.w3.org/ns/ui#\",\r\n    PREFIX_AND_NAMESPACE: { \"ui\": \"http://www.w3.org/ns/ui#\" },\r\n    NS: _NS$d,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     *\r\n     */\r\n    BooleanField: _NS$d(\"BooleanField\"),\r\n    /**\r\n     *\r\n     */\r\n    NumericField: _NS$d(\"NumericField\"),\r\n    /**\r\n     *\r\n     */\r\n    ValueField: _NS$d(\"ValueField\"),\r\n    /**\r\n     *\r\n     */\r\n    Group: _NS$d(\"Group\"),\r\n    /**\r\n     * A form can be any type of single field, or typically a Group of several fields,\r\n      including interspersed headings and comments.\r\n     */\r\n    Form: _NS$d(\"Form\"),\r\n    /**\r\n     *\r\n     */\r\n    Single: _NS$d(\"Single\"),\r\n    /**\r\n     *\r\n     */\r\n    Choice: _NS$d(\"Choice\"),\r\n    /**\r\n     * A classifier allows the user to select the type of an object.\r\n      The possible types must be subclasses of some overall class, the \"category\".\r\n      (Ideally, the superclass is also set up as the disjoint union of the subclasses,\r\n      if they are disjoint.)\r\n  \n      The form normally stores the resulting classes using an rdf:type triple,\r\n      but a different predicate can be used if required, so the classifier field\r\n      needs is 'property' defined too.\r\n  \n      If the subclass selected itself is has subclasses defined, the user can\r\n      recursively select from them in turn, as many levels as needed.\r\n     */\r\n    Classifier: _NS$d(\"Classifier\"),\r\n    /**\r\n     *\r\n     */\r\n    ColorField: _NS$d(\"ColorField\"),\r\n    /**\r\n     * Comment\r\n     */\r\n    Comment: _NS$d(\"Comment\"),\r\n    /**\r\n     *\r\n     */\r\n    DateField: _NS$d(\"DateField\"),\r\n    /**\r\n     *\r\n     */\r\n    DateTimeField: _NS$d(\"DateTimeField\"),\r\n    /**\r\n     *\r\n     */\r\n    DecimalField: _NS$d(\"DecimalField\"),\r\n    /**\r\n     *\r\n     */\r\n    EmailField: _NS$d(\"EmailField\"),\r\n    /**\r\n     *\r\n     */\r\n    Heading: _NS$d(\"Heading\"),\r\n    /**\r\n     *\r\n     */\r\n    SingleLineTextField: _NS$d(\"SingleLineTextField\"),\r\n    /**\r\n     *\r\n     */\r\n    TextField: _NS$d(\"TextField\"),\r\n    /**\r\n     *\r\n     */\r\n    Options: _NS$d(\"Options\"),\r\n    /**\r\n     *\r\n     */\r\n    IntegerField: _NS$d(\"IntegerField\"),\r\n    /**\r\n     *\r\n     */\r\n    FloatField: _NS$d(\"FloatField\"),\r\n    /**\r\n     *\r\n     */\r\n    PhoneField: _NS$d(\"PhoneField\"),\r\n    /**\r\n     *\r\n     */\r\n    Multiple: _NS$d(\"Multiple\"),\r\n    /**\r\n     *\r\n     */\r\n    MultiLineTextField: _NS$d(\"MultiLineTextField\"),\r\n    /**\r\n     *\r\n     */\r\n    TriStateField: _NS$d(\"TriStateField\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * parts\r\n     */\r\n    parts: _NS$d(\"parts\"),\r\n    /**\r\n     * from\r\n     */\r\n    from: _NS$d(\"from\"),\r\n    /**\r\n     * Label\r\n     */\r\n    label: _NS$d(\"label\"),\r\n    /**\r\n     * Many fields prompt for information about a given property of the subject.\r\n      When field is filled in, this gives which property is written into the data.\r\n     */\r\n    property: _NS$d(\"property\"),\r\n    /**\r\n     * The value for which this case is selected.\r\n     */\r\n    for: _NS$d(\"for\"),\r\n    /**\r\n     * A string for the UI to use if the user needs a longer\r\n          prompts than just a field name, the rdfs:label.\r\n     */\r\n    prompt: _NS$d(\"prompt\"),\r\n    /**\r\n     *\r\n     */\r\n    use: _NS$d(\"use\"),\r\n    /**\r\n     * A form which may be used to collect information about a\r\n      hitherto locally undocumented instance instance of this class.\r\n     */\r\n    creationForm: _NS$d(\"creationForm\"),\r\n    /**\r\n     * Contents\r\n     */\r\n    contents: _NS$d(\"contents\"),\r\n    /**\r\n     * size of field\r\n     */\r\n    size: _NS$d(\"size\"),\r\n    /**\r\n     * Must be a valid CSS style string such as one could put in\r\n          an HTML style attribute.  Depending on the user interface system, this can\r\n          by given to individuals, classes or properties. It is up to a user interface\r\n          which wants to draw on them to pick how it uses styles from which parts\r\n          of the data it has.  For example, the style of a class may be picked\r\n          to distinguish information about things in that class.\r\n     */\r\n    style: _NS$d(\"style\"),\r\n    /**\r\n     * The superclass subclasses of which will be selected.\r\n     */\r\n    category: _NS$d(\"category\"),\r\n    /**\r\n     * Many fields prompt for information about a given property of the subject\r\n     */\r\n    dependingOn: _NS$d(\"dependingOn\"),\r\n    /**\r\n     * Max length\r\n     */\r\n    maxLength: _NS$d(\"maxLength\"),\r\n    /**\r\n     * part\r\n     */\r\n    part: _NS$d(\"part\"),\r\n    /**\r\n     * A form which may be used to add more infromation to an\r\n  instance of this class which we know something about.  Anything from\r\n  adding just add one more fact, to adding a whole lot of information about a specific\r\n  facet of the thing.\r\n  \n     */\r\n    annotationForm: _NS$d(\"annotationForm\"),\r\n    /**\r\n     * Must be a valid CSS color string such as one could put in\r\n          an HTML style attribute.  This should be in the #xxxxxx form,\r\n          (with 6 digits of hex)  so that it\r\n          can work with Graphviz.\r\n     */\r\n    backgroundColor: _NS$d(\"backgroundColor\"),\r\n    /**\r\n     * URI or base64 representation of an image\r\n     */\r\n    backgroundImage: _NS$d(\"backgroundImage\"),\r\n    /**\r\n     * Must be a valid CSS color string such as one could put in\r\n          an HTML style attribute.  This should be in the #xxxxxx form,\r\n          (with 6 digits of hex)  so that it\r\n          can work with Graphviz.\r\n     */\r\n    color: _NS$d(\"color\"),\r\n    /**\r\n     * A really simple way of enabling user interfaces to\r\n              create new information about a class of things is to make a define of properties\r\n              to be specified when a information about a new item\r\n              (\"New item\" here means an item which the system\r\n              does not have prvious information about yet,\r\n              not an items which has just been created,\r\n              like new friend as opposed to new baby)\r\n     */\r\n    initialProperties: _NS$d(\"initialProperties\"),\r\n    /**\r\n     * max\r\n     */\r\n    maxValue: _NS$d(\"maxValue\"),\r\n    /**\r\n     * min\r\n     */\r\n    minValue: _NS$d(\"minValue\"),\r\n    /**\r\n     * The sequence in which this item is arranged with repect to other parts.\r\n     */\r\n    seqeunce: _NS$d(\"seqeunce\"),\r\n    /**\r\n     * A property which typically is used to sort\r\n          members of a given class.\r\n     */\r\n    sortBy: _NS$d(\"sortBy\"),\r\n    /**\r\n     * When individuals or classes must be sorted, then\r\n          if they are given different values of sortPriority a user agent can\r\n          use this as a hint to how to present information.\r\n     */\r\n    sortPriority: _NS$d(\"sortPriority\"),\r\n    /**\r\n     * This  is a crude way of specifying a table-based\r\n              view for objects of this class.\r\n     */\r\n    tableProperties: _NS$d(\"tableProperties\"),\r\n    /**\r\n     * Pattern\r\n     */\r\n    pattern: _NS$d(\"pattern\"),\r\n    /**\r\n     * Value\r\n     */\r\n    value: _NS$d(\"value\"),\r\n    /**\r\n     * Values\r\n     */\r\n    values: _NS$d(\"values\"),\r\n    /**\r\n     * Minimum date offset\r\n     */\r\n    minDateOffset: _NS$d(\"minDateOffset\"),\r\n    /**\r\n     * Maximum date offset\r\n     */\r\n    maxDateOffset: _NS$d(\"maxDateOffset\"),\r\n    /**\r\n     * Minimum datetime offset\r\n     */\r\n    minDatetimeOffset: _NS$d(\"minDatetimeOffset\"),\r\n    /**\r\n     * Maximum datetime offset\r\n     */\r\n    maxDatetimeOffset: _NS$d(\"maxDatetimeOffset\"),\r\n    /**\r\n     * Name\r\n     */\r\n    name: _NS$d(\"name\"),\r\n    /**\r\n     * Time field\r\n     */\r\n    TimeField: _NS$d(\"TimeField\"),\r\n    /**\r\n     * Old value\r\n     */\r\n    oldValue: _NS$d(\"oldValue\"),\r\n    /**\r\n     * Base\r\n     */\r\n    base: _NS$d(\"base\"),\r\n    /**\r\n     * Parent property\r\n     */\r\n    parentProperty: _NS$d(\"parentProperty\"),\r\n    /**\r\n     * Reference\r\n     */\r\n    reference: _NS$d(\"reference\"),\r\n    /**\r\n     * Valid\r\n     */\r\n    valid: _NS$d(\"valid\"),\r\n    /**\r\n     * Default error\r\n     */\r\n    defaultError: _NS$d(\"defaultError\"),\r\n    /**\r\n     * Parts clone\r\n     */\r\n    partsClone: _NS$d(\"partsClone\"),\r\n    /**\r\n     * Min length\r\n     */\r\n    minLength: _NS$d(\"minLength\"),\r\n    /**\r\n     * Validation error\r\n     */\r\n    validationError: _NS$d(\"validationError\"),\r\n    /**\r\n     * Required\r\n     */\r\n    required: _NS$d(\"required\"),\r\n    /**\r\n     * Required error\r\n     */\r\n    requiredError: _NS$d(\"requiredError\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$e = new rdfDataFactory.DataFactory();\r\nfunction _NS$e(localName) {\r\n    return rdfFactory$e.namedNode(\"http://purl.org/vocab/vann/\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar VANN = {\r\n    PREFIX: \"vann\",\r\n    NAMESPACE: \"http://purl.org/vocab/vann/\",\r\n    PREFIX_AND_NAMESPACE: { \"vann\": \"http://purl.org/vocab/vann/\" },\r\n    NS: _NS$e,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.\r\n     */\r\n    preferredNamespacePrefix: _NS$e(\"preferredNamespacePrefix\"),\r\n    /**\r\n     * The preferred namespace URI to use when using terms from this vocabulary in an XML document.\r\n     */\r\n    preferredNamespaceUri: _NS$e(\"preferredNamespaceUri\"),\r\n    /**\r\n     * A reference to a resource that describes changes between this version of a vocabulary and the previous.\r\n     */\r\n    changes: _NS$e(\"changes\"),\r\n    /**\r\n     * A reference to a resource that provides an example of how this resource can be used.\r\n     */\r\n    example: _NS$e(\"example\"),\r\n    /**\r\n     * A group of related terms in a vocabulary.\r\n     */\r\n    termGroup: _NS$e(\"termGroup\"),\r\n    /**\r\n     * A reference to a resource that provides information on how this resource is to be used.\r\n     */\r\n    usageNote: _NS$e(\"usageNote\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$f = new rdfDataFactory.DataFactory();\r\nfunction _NS$f(localName) {\r\n    return rdfFactory$f.namedNode(\"http://purl.org/dc/terms/\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar DCTERMS = {\r\n    PREFIX: \"dcterms\",\r\n    NAMESPACE: \"http://purl.org/dc/terms/\",\r\n    PREFIX_AND_NAMESPACE: { \"dcterms\": \"http://purl.org/dc/terms/\" },\r\n    NS: _NS$f,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * A resource that acts or has the power to act.\r\n     */\r\n    Agent: _NS$f(\"Agent\"),\r\n    /**\r\n     * A group of agents.\r\n     */\r\n    AgentClass: _NS$f(\"AgentClass\"),\r\n    /**\r\n     * A book, article, or other documentary resource.\r\n     */\r\n    BibliographicResource: _NS$f(\"BibliographicResource\"),\r\n    /**\r\n     * A digital resource format.\r\n     */\r\n    FileFormat: _NS$f(\"FileFormat\"),\r\n    /**\r\n     * A file format or physical medium.\r\n     */\r\n    MediaType: _NS$f(\"MediaType\"),\r\n    /**\r\n     * A rate at which something recurs.\r\n     */\r\n    Frequency: _NS$f(\"Frequency\"),\r\n    /**\r\n     * The extent or range of judicial, law enforcement, or other authority.\r\n     */\r\n    Jurisdiction: _NS$f(\"Jurisdiction\"),\r\n    /**\r\n     * A location, period of time, or jurisdiction.\r\n     */\r\n    LocationPeriodOrJurisdiction: _NS$f(\"LocationPeriodOrJurisdiction\"),\r\n    /**\r\n     * A legal document giving official permission to do something with a Resource.\r\n     */\r\n    LicenseDocument: _NS$f(\"LicenseDocument\"),\r\n    /**\r\n     * A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something with a resource, or a statement about access rights.\r\n     */\r\n    RightsStatement: _NS$f(\"RightsStatement\"),\r\n    /**\r\n     * A system of signs, symbols, sounds, gestures, or rules used in communication.\r\n     */\r\n    LinguisticSystem: _NS$f(\"LinguisticSystem\"),\r\n    /**\r\n     * A spatial region or named place.\r\n     */\r\n    Location: _NS$f(\"Location\"),\r\n    /**\r\n     * A media type or extent.\r\n     */\r\n    MediaTypeOrExtent: _NS$f(\"MediaTypeOrExtent\"),\r\n    /**\r\n     * A method by which resources are added to a collection.\r\n     */\r\n    MethodOfAccrual: _NS$f(\"MethodOfAccrual\"),\r\n    /**\r\n     * A process that is used to engender knowledge, attitudes, and skills.\r\n     */\r\n    MethodOfInstruction: _NS$f(\"MethodOfInstruction\"),\r\n    /**\r\n     * An interval of time that is named or defined by its start and end dates.\r\n     */\r\n    PeriodOfTime: _NS$f(\"PeriodOfTime\"),\r\n    /**\r\n     * A physical material or carrier.\r\n     */\r\n    PhysicalMedium: _NS$f(\"PhysicalMedium\"),\r\n    /**\r\n     * A material thing.\r\n     */\r\n    PhysicalResource: _NS$f(\"PhysicalResource\"),\r\n    /**\r\n     * A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.\r\n     */\r\n    Policy: _NS$f(\"Policy\"),\r\n    /**\r\n     * A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.\r\n     */\r\n    ProvenanceStatement: _NS$f(\"ProvenanceStatement\"),\r\n    /**\r\n     * A dimension or extent, or a time taken to play or execute.\r\n     */\r\n    SizeOrDuration: _NS$f(\"SizeOrDuration\"),\r\n    /**\r\n     * A basis for comparison; a reference point against which other things can be evaluated.\r\n     */\r\n    Standard: _NS$f(\"Standard\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Date on which the resource was changed.\r\n     */\r\n    modified: _NS$f(\"modified\"),\r\n    /**\r\n     * An entity responsible for making the resource available.\r\n     */\r\n    publisher: _NS$f(\"publisher\"),\r\n    /**\r\n     * A name given to the resource.\r\n     */\r\n    title: _NS$f(\"title\"),\r\n    /**\r\n     * An account of the resource.\r\n     */\r\n    description: _NS$f(\"description\"),\r\n    /**\r\n     * A related resource that is a version, edition, or adaptation of the described resource.\r\n     */\r\n    hasVersion: _NS$f(\"hasVersion\"),\r\n    /**\r\n     * Date of formal issuance (e.g., publication) of the resource.\r\n     */\r\n    issued: _NS$f(\"issued\"),\r\n    /**\r\n     * The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.\r\n     */\r\n    Box: _NS$f(\"Box\"),\r\n    /**\r\n     * The set of codes listed in ISO 3166-1 for the representation of names of countries.\r\n     */\r\n    ISO3166: _NS$f(\"ISO3166\"),\r\n    /**\r\n     * The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.\r\n     */\r\n    ISO639_2: _NS$f(\"ISO639-2\"),\r\n    /**\r\n     * The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.\r\n     */\r\n    ISO639_3: _NS$f(\"ISO639-3\"),\r\n    /**\r\n     * The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.\r\n     */\r\n    Period: _NS$f(\"Period\"),\r\n    /**\r\n     * The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.\r\n     */\r\n    Point: _NS$f(\"Point\"),\r\n    /**\r\n     * The set of tags, constructed according to RFC 1766, for the identification of languages.\r\n     */\r\n    RFC1766: _NS$f(\"RFC1766\"),\r\n    /**\r\n     * The set of tags constructed according to RFC 3066 for the identification of languages.\r\n     */\r\n    RFC3066: _NS$f(\"RFC3066\"),\r\n    /**\r\n     * The set of tags constructed according to RFC 4646 for the identification of languages.\r\n     */\r\n    RFC4646: _NS$f(\"RFC4646\"),\r\n    /**\r\n     * The set of tags constructed according to RFC 5646 for the identification of languages.\r\n     */\r\n    RFC5646: _NS$f(\"RFC5646\"),\r\n    /**\r\n     * The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.\r\n     */\r\n    URI: _NS$f(\"URI\"),\r\n    /**\r\n     * The set of dates and times constructed according to the W3C Date and Time Formats Specification.\r\n     */\r\n    W3CDTF: _NS$f(\"W3CDTF\"),\r\n    /**\r\n     * A summary of the resource.\r\n     */\r\n    abstract: _NS$f(\"abstract\"),\r\n    /**\r\n     * Information about who can access the resource or an indication of its security status.\r\n     */\r\n    accessRights: _NS$f(\"accessRights\"),\r\n    /**\r\n     * Information about rights held in and over the resource.\r\n     */\r\n    rights: _NS$f(\"rights\"),\r\n    /**\r\n     * The method by which items are added to a collection.\r\n     */\r\n    accrualMethod: _NS$f(\"accrualMethod\"),\r\n    /**\r\n     * The frequency with which items are added to a collection.\r\n     */\r\n    accrualPeriodicity: _NS$f(\"accrualPeriodicity\"),\r\n    /**\r\n     * The policy governing the addition of items to a collection.\r\n     */\r\n    accrualPolicy: _NS$f(\"accrualPolicy\"),\r\n    /**\r\n     * An alternative name for the resource.\r\n     */\r\n    alternative: _NS$f(\"alternative\"),\r\n    /**\r\n     * A class of entity for whom the resource is intended or useful.\r\n     */\r\n    audience: _NS$f(\"audience\"),\r\n    /**\r\n     * Date (often a range) that the resource became or will become available.\r\n     */\r\n    available: _NS$f(\"available\"),\r\n    /**\r\n     * A point or period of time associated with an event in the lifecycle of the resource.\r\n     */\r\n    date: _NS$f(\"date\"),\r\n    /**\r\n     * A bibliographic reference for the resource.\r\n     */\r\n    bibliographicCitation: _NS$f(\"bibliographicCitation\"),\r\n    /**\r\n     * An unambiguous reference to the resource within a given context.\r\n     */\r\n    identifier: _NS$f(\"identifier\"),\r\n    /**\r\n     * An established standard to which the described resource conforms.\r\n     */\r\n    conformsTo: _NS$f(\"conformsTo\"),\r\n    /**\r\n     * A related resource.\r\n     */\r\n    relation: _NS$f(\"relation\"),\r\n    /**\r\n     * An entity responsible for making contributions to the resource.\r\n     */\r\n    contributor: _NS$f(\"contributor\"),\r\n    /**\r\n     * The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.\r\n     */\r\n    coverage: _NS$f(\"coverage\"),\r\n    /**\r\n     * Date of creation of the resource.\r\n     */\r\n    created: _NS$f(\"created\"),\r\n    /**\r\n     * An entity primarily responsible for making the resource.\r\n     */\r\n    creator: _NS$f(\"creator\"),\r\n    /**\r\n     * Date of acceptance of the resource.\r\n     */\r\n    dateAccepted: _NS$f(\"dateAccepted\"),\r\n    /**\r\n     * Date of copyright.\r\n     */\r\n    dateCopyrighted: _NS$f(\"dateCopyrighted\"),\r\n    /**\r\n     * Date of submission of the resource.\r\n     */\r\n    dateSubmitted: _NS$f(\"dateSubmitted\"),\r\n    /**\r\n     * A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.\r\n     */\r\n    educationLevel: _NS$f(\"educationLevel\"),\r\n    /**\r\n     * The size or duration of the resource.\r\n     */\r\n    extent: _NS$f(\"extent\"),\r\n    /**\r\n     * The file format, physical medium, or dimensions of the resource.\r\n     */\r\n    format: _NS$f(\"format\"),\r\n    /**\r\n     * A related resource that is substantially the same as the pre-existing described resource, but in another format.\r\n     */\r\n    hasFormat: _NS$f(\"hasFormat\"),\r\n    /**\r\n     * A related resource that is included either physically or logically in the described resource.\r\n     */\r\n    hasPart: _NS$f(\"hasPart\"),\r\n    /**\r\n     * A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.\r\n     */\r\n    instructionalMethod: _NS$f(\"instructionalMethod\"),\r\n    /**\r\n     * A related resource that is substantially the same as the described resource, but in another format.\r\n     */\r\n    isFormatOf: _NS$f(\"isFormatOf\"),\r\n    /**\r\n     * A related resource in which the described resource is physically or logically included.\r\n     */\r\n    isPartOf: _NS$f(\"isPartOf\"),\r\n    /**\r\n     * A related resource that references, cites, or otherwise points to the described resource.\r\n     */\r\n    isReferencedBy: _NS$f(\"isReferencedBy\"),\r\n    /**\r\n     * A related resource that supplants, displaces, or supersedes the described resource.\r\n     */\r\n    isReplacedBy: _NS$f(\"isReplacedBy\"),\r\n    /**\r\n     * A related resource that requires the described resource to support its function, delivery, or coherence.\r\n     */\r\n    isRequiredBy: _NS$f(\"isRequiredBy\"),\r\n    /**\r\n     * A related resource of which the described resource is a version, edition, or adaptation.\r\n     */\r\n    isVersionOf: _NS$f(\"isVersionOf\"),\r\n    /**\r\n     * A language of the resource.\r\n     */\r\n    language: _NS$f(\"language\"),\r\n    /**\r\n     * A legal document giving official permission to do something with the resource.\r\n     */\r\n    license: _NS$f(\"license\"),\r\n    /**\r\n     * An entity that mediates access to the resource and for whom the resource is intended or useful.\r\n     */\r\n    mediator: _NS$f(\"mediator\"),\r\n    /**\r\n     * The material or physical carrier of the resource.\r\n     */\r\n    medium: _NS$f(\"medium\"),\r\n    /**\r\n     * A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.\r\n     */\r\n    provenance: _NS$f(\"provenance\"),\r\n    /**\r\n     * A related resource that is referenced, cited, or otherwise pointed to by the described resource.\r\n     */\r\n    references: _NS$f(\"references\"),\r\n    /**\r\n     * A related resource that is supplanted, displaced, or superseded by the described resource.\r\n     */\r\n    replaces: _NS$f(\"replaces\"),\r\n    /**\r\n     * A related resource that is required by the described resource to support its function, delivery, or coherence.\r\n     */\r\n    requires: _NS$f(\"requires\"),\r\n    /**\r\n     * A person or organization owning or managing rights over the resource.\r\n     */\r\n    rightsHolder: _NS$f(\"rightsHolder\"),\r\n    /**\r\n     * A related resource from which the described resource is derived.\r\n     */\r\n    source: _NS$f(\"source\"),\r\n    /**\r\n     * Spatial characteristics of the resource.\r\n     */\r\n    spatial: _NS$f(\"spatial\"),\r\n    /**\r\n     * The topic of the resource.\r\n     */\r\n    subject: _NS$f(\"subject\"),\r\n    /**\r\n     * A list of subunits of the resource.\r\n     */\r\n    tableOfContents: _NS$f(\"tableOfContents\"),\r\n    /**\r\n     * Temporal characteristics of the resource.\r\n     */\r\n    temporal: _NS$f(\"temporal\"),\r\n    /**\r\n     * The nature or genre of the resource.\r\n     */\r\n    type: _NS$f(\"type\"),\r\n    /**\r\n     * Date (often a range) of validity of a resource.\r\n     */\r\n    valid: _NS$f(\"valid\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$g = new rdfDataFactory.DataFactory();\r\nfunction _NS$g(localName) {\r\n    return rdfFactory$g.namedNode(\"https://www.w3.org/ns/activitystreams#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar AS = {\r\n    PREFIX: \"as\",\r\n    NAMESPACE: \"https://www.w3.org/ns/activitystreams#\",\r\n    PREFIX_AND_NAMESPACE: { \"as\": \"https://www.w3.org/ns/activitystreams#\" },\r\n    NS: _NS$g,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * An Object representing some form of Action that has been taken\r\n     */\r\n    Activity: _NS$g(\"Activity\"),\r\n    /**\r\n     * Object\r\n     */\r\n    Object: _NS$g(\"Object\"),\r\n    /**\r\n     * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model\r\n     */\r\n    Link: _NS$g(\"Link\"),\r\n    /**\r\n     * An ordered or unordered collection of Objects or Links\r\n     */\r\n    Collection: _NS$g(\"Collection\"),\r\n    /**\r\n     * A subset of items from a Collection\r\n     */\r\n    CollectionPage: _NS$g(\"CollectionPage\"),\r\n    /**\r\n     * An Image file\r\n     */\r\n    Image: _NS$g(\"Image\"),\r\n    /**\r\n     * A rdf:List variant for Objects and Links\r\n     */\r\n    OrderedItems: _NS$g(\"OrderedItems\"),\r\n    /**\r\n     * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)\r\n     */\r\n    Relationship: _NS$g(\"Relationship\"),\r\n    /**\r\n     * A question of any sort.\r\n     */\r\n    Question: _NS$g(\"Question\"),\r\n    /**\r\n     * A Profile Document\r\n     */\r\n    Profile: _NS$g(\"Profile\"),\r\n    /**\r\n     * A placeholder for a deleted object\r\n     */\r\n    Tombstone: _NS$g(\"Tombstone\"),\r\n    /**\r\n     * A physical or logical location\r\n     */\r\n    Place: _NS$g(\"Place\"),\r\n    /**\r\n     * An ordered subset of items from an OrderedCollection\r\n     */\r\n    OrderedCollectionPage: _NS$g(\"OrderedCollectionPage\"),\r\n    /**\r\n     * Actor accepts the Object\r\n     */\r\n    Accept: _NS$g(\"Accept\"),\r\n    /**\r\n     * Block\r\n     */\r\n    Block: _NS$g(\"Block\"),\r\n    /**\r\n     * Actor is ignoring the Object\r\n     */\r\n    Ignore: _NS$g(\"Ignore\"),\r\n    /**\r\n     * An Activity that has no direct object\r\n     */\r\n    IntransitiveActivity: _NS$g(\"IntransitiveActivity\"),\r\n    /**\r\n     * To Add an Object or Link to Something\r\n     */\r\n    Add: _NS$g(\"Add\"),\r\n    /**\r\n     * Actor announces the object to the target\r\n     */\r\n    Announce: _NS$g(\"Announce\"),\r\n    /**\r\n     * Represents a software application of any sort\r\n     */\r\n    Application: _NS$g(\"Application\"),\r\n    /**\r\n     * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a \"check-in\")\r\n     */\r\n    Arrive: _NS$g(\"Arrive\"),\r\n    /**\r\n     * A written work. Typically several paragraphs long. For example, a blog post or a news article.\r\n     */\r\n    Article: _NS$g(\"Article\"),\r\n    /**\r\n     * An audio file\r\n     */\r\n    Audio: _NS$g(\"Audio\"),\r\n    /**\r\n     * Represents a digital document/file of any sort\r\n     */\r\n    Document: _NS$g(\"Document\"),\r\n    /**\r\n     * A variation of Collection in which items are strictly ordered\r\n     */\r\n    OrderedCollection: _NS$g(\"OrderedCollection\"),\r\n    /**\r\n     * To Create Something\r\n     */\r\n    Create: _NS$g(\"Create\"),\r\n    /**\r\n     * To Delete Something\r\n     */\r\n    Delete: _NS$g(\"Delete\"),\r\n    /**\r\n     * The actor dislikes the object\r\n     */\r\n    Dislike: _NS$g(\"Dislike\"),\r\n    /**\r\n     * An Event of any kind\r\n     */\r\n    Event: _NS$g(\"Event\"),\r\n    /**\r\n     * To flag something (e.g. flag as inappropriate, flag as spam, etc)\r\n     */\r\n    Flag: _NS$g(\"Flag\"),\r\n    /**\r\n     * To Express Interest in Something\r\n     */\r\n    Follow: _NS$g(\"Follow\"),\r\n    /**\r\n     * A Group of any kind.\r\n     */\r\n    Group: _NS$g(\"Group\"),\r\n    /**\r\n     * To invite someone or something to something\r\n     */\r\n    Invite: _NS$g(\"Invite\"),\r\n    /**\r\n     * To Offer something to someone or something\r\n     */\r\n    Offer: _NS$g(\"Offer\"),\r\n    /**\r\n     * To Join Something\r\n     */\r\n    Join: _NS$g(\"Join\"),\r\n    /**\r\n     * To Leave Something\r\n     */\r\n    Leave: _NS$g(\"Leave\"),\r\n    /**\r\n     * To Like Something\r\n     */\r\n    Like: _NS$g(\"Like\"),\r\n    /**\r\n     * The actor viewed the object\r\n     */\r\n    View: _NS$g(\"View\"),\r\n    /**\r\n     * The actor listened to the object\r\n     */\r\n    Listen: _NS$g(\"Listen\"),\r\n    /**\r\n     * The actor read the object\r\n     */\r\n    Read: _NS$g(\"Read\"),\r\n    /**\r\n     * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.\r\n     */\r\n    Move: _NS$g(\"Move\"),\r\n    /**\r\n     * The actor is traveling to the target. The origin specifies where the actor is traveling from.\r\n     */\r\n    Travel: _NS$g(\"Travel\"),\r\n    /**\r\n     * A specialized Link that represents an @mention\r\n     */\r\n    Mention: _NS$g(\"Mention\"),\r\n    /**\r\n     * A Short note, typically less than a single paragraph. A \"tweet\" is an example, or a \"status update\"\r\n     */\r\n    Note: _NS$g(\"Note\"),\r\n    /**\r\n     * A Web Page\r\n     */\r\n    Page: _NS$g(\"Page\"),\r\n    /**\r\n     * A Person\r\n     */\r\n    Person: _NS$g(\"Person\"),\r\n    /**\r\n     * An Organization\r\n     */\r\n    Organization: _NS$g(\"Organization\"),\r\n    /**\r\n     * Actor rejects the Object\r\n     */\r\n    Reject: _NS$g(\"Reject\"),\r\n    /**\r\n     * To Remove Something\r\n     */\r\n    Remove: _NS$g(\"Remove\"),\r\n    /**\r\n     * A service provided by some entity\r\n     */\r\n    Service: _NS$g(\"Service\"),\r\n    /**\r\n     * Actor tentatively accepts the Object\r\n     */\r\n    TentativeAccept: _NS$g(\"TentativeAccept\"),\r\n    /**\r\n     * Actor tentatively rejects the object\r\n     */\r\n    TentativeReject: _NS$g(\"TentativeReject\"),\r\n    /**\r\n     * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.\r\n     */\r\n    Undo: _NS$g(\"Undo\"),\r\n    /**\r\n     * To Update/Modify Something\r\n     */\r\n    Update: _NS$g(\"Update\"),\r\n    /**\r\n     * A Video document of any kind.\r\n     */\r\n    Video: _NS$g(\"Video\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Subproperty of as:attributedTo that identifies the primary actor\r\n     */\r\n    actor: _NS$g(\"actor\"),\r\n    /**\r\n     * Identifies an entity to which an object is attributed\r\n     */\r\n    attributedTo: _NS$g(\"attributedTo\"),\r\n    /**\r\n     * attachment\r\n     */\r\n    attachment: _NS$g(\"attachment\"),\r\n    /**\r\n     * attachments\r\n     */\r\n    attachments: _NS$g(\"attachments\"),\r\n    /**\r\n     * Identifies the author of an object. Deprecated. Use as:attributedTo instead\r\n     */\r\n    author: _NS$g(\"author\"),\r\n    /**\r\n     * bcc\r\n     */\r\n    bcc: _NS$g(\"bcc\"),\r\n    /**\r\n     * bto\r\n     */\r\n    bto: _NS$g(\"bto\"),\r\n    /**\r\n     * cc\r\n     */\r\n    cc: _NS$g(\"cc\"),\r\n    /**\r\n     * Specifies the context within which an object exists or an activity was performed\r\n     */\r\n    context: _NS$g(\"context\"),\r\n    /**\r\n     * current\r\n     */\r\n    current: _NS$g(\"current\"),\r\n    /**\r\n     * first\r\n     */\r\n    first: _NS$g(\"first\"),\r\n    /**\r\n     * generator\r\n     */\r\n    generator: _NS$g(\"generator\"),\r\n    /**\r\n     * icon\r\n     */\r\n    icon: _NS$g(\"icon\"),\r\n    /**\r\n     * image\r\n     */\r\n    image: _NS$g(\"image\"),\r\n    /**\r\n     * inReplyTo\r\n     */\r\n    inReplyTo: _NS$g(\"inReplyTo\"),\r\n    /**\r\n     * items\r\n     */\r\n    items: _NS$g(\"items\"),\r\n    /**\r\n     * last\r\n     */\r\n    last: _NS$g(\"last\"),\r\n    /**\r\n     * location\r\n     */\r\n    location: _NS$g(\"location\"),\r\n    /**\r\n     * next\r\n     */\r\n    next: _NS$g(\"next\"),\r\n    /**\r\n     * object\r\n     */\r\n    object: _NS$g(\"object\"),\r\n    /**\r\n     * Describes a possible exclusive answer or option for a question.\r\n     */\r\n    oneOf: _NS$g(\"oneOf\"),\r\n    /**\r\n     * Describes a possible inclusive answer or option for a question.\r\n     */\r\n    anyOf: _NS$g(\"anyOf\"),\r\n    /**\r\n     * prev\r\n     */\r\n    prev: _NS$g(\"prev\"),\r\n    /**\r\n     * preview\r\n     */\r\n    preview: _NS$g(\"preview\"),\r\n    /**\r\n     * provider\r\n     */\r\n    provider: _NS$g(\"provider\"),\r\n    /**\r\n     * replies\r\n     */\r\n    replies: _NS$g(\"replies\"),\r\n    /**\r\n     * result\r\n     */\r\n    result: _NS$g(\"result\"),\r\n    /**\r\n     * audience\r\n     */\r\n    audience: _NS$g(\"audience\"),\r\n    /**\r\n     * partOf\r\n     */\r\n    partOf: _NS$g(\"partOf\"),\r\n    /**\r\n     * tag\r\n     */\r\n    tag: _NS$g(\"tag\"),\r\n    /**\r\n     * tags\r\n     */\r\n    tags: _NS$g(\"tags\"),\r\n    /**\r\n     * target\r\n     */\r\n    target: _NS$g(\"target\"),\r\n    /**\r\n     * For certain activities, specifies the entity from which the action is directed.\r\n     */\r\n    origin: _NS$g(\"origin\"),\r\n    /**\r\n     * Indentifies an object used (or to be used) to complete an activity\r\n     */\r\n    instrument: _NS$g(\"instrument\"),\r\n    /**\r\n     * to\r\n     */\r\n    to: _NS$g(\"to\"),\r\n    /**\r\n     * Specifies a link to a specific representation of the Object\r\n     */\r\n    url: _NS$g(\"url\"),\r\n    /**\r\n     * On a Relationship object, identifies the subject. e.g. when saying \"John is connected to Sally\", 'subject' refers to 'John'\r\n     */\r\n    subject: _NS$g(\"subject\"),\r\n    /**\r\n     * On a Relationship object, describes the type of relationship\r\n     */\r\n    relationship: _NS$g(\"relationship\"),\r\n    /**\r\n     * On a Profile object, describes the object described by the profile\r\n     */\r\n    describes: _NS$g(\"describes\"),\r\n    /**\r\n     * On a Tombstone object, describes the former type of the deleted object\r\n     */\r\n    formerType: _NS$g(\"formerType\"),\r\n    /**\r\n     * Specifies the accuracy around the point established by the longitude and latitude\r\n     */\r\n    accuracy: _NS$g(\"accuracy\"),\r\n    /**\r\n     * The altitude of a place\r\n     */\r\n    altitude: _NS$g(\"altitude\"),\r\n    /**\r\n     * The content of the object.\r\n     */\r\n    content: _NS$g(\"content\"),\r\n    /**\r\n     * name\r\n     */\r\n    name: _NS$g(\"name\"),\r\n    /**\r\n     * downstreamDuplicates\r\n     */\r\n    downstreamDuplicates: _NS$g(\"downstreamDuplicates\"),\r\n    /**\r\n     * The duration of the object\r\n     */\r\n    duration: _NS$g(\"duration\"),\r\n    /**\r\n     * The ending time of the object\r\n     */\r\n    endTime: _NS$g(\"endTime\"),\r\n    /**\r\n     * The display height expressed as device independent pixels\r\n     */\r\n    height: _NS$g(\"height\"),\r\n    /**\r\n     * The target URI of the Link\r\n     */\r\n    href: _NS$g(\"href\"),\r\n    /**\r\n     * A hint about the language of the referenced resource\r\n     */\r\n    hreflang: _NS$g(\"hreflang\"),\r\n    /**\r\n     * id\r\n     */\r\n    id: _NS$g(\"id\"),\r\n    /**\r\n     * The latitude\r\n     */\r\n    latitude: _NS$g(\"latitude\"),\r\n    /**\r\n     * The longitude\r\n     */\r\n    longitude: _NS$g(\"longitude\"),\r\n    /**\r\n     * The MIME Media Type\r\n     */\r\n    mediaType: _NS$g(\"mediaType\"),\r\n    /**\r\n     * objectType\r\n     */\r\n    objectType: _NS$g(\"objectType\"),\r\n    /**\r\n     * Specifies the date and time the object was published\r\n     */\r\n    published: _NS$g(\"published\"),\r\n    /**\r\n     * Specifies a radius around the point established by the longitude and latitude\r\n     */\r\n    radius: _NS$g(\"radius\"),\r\n    /**\r\n     * A numeric rating (>= 0.0, <= 5.0) for the object\r\n     */\r\n    rating: _NS$g(\"rating\"),\r\n    /**\r\n     * The RFC 5988 or HTML5 Link Relation associated with the Link\r\n     */\r\n    rel: _NS$g(\"rel\"),\r\n    /**\r\n     * In a strictly ordered logical collection, specifies the index position of the first item in the items list\r\n     */\r\n    startIndex: _NS$g(\"startIndex\"),\r\n    /**\r\n     * The starting time of the object\r\n     */\r\n    startTime: _NS$g(\"startTime\"),\r\n    /**\r\n     * A short summary of the object\r\n     */\r\n    summary: _NS$g(\"summary\"),\r\n    /**\r\n     * The total number of items in a logical collection\r\n     */\r\n    totalItems: _NS$g(\"totalItems\"),\r\n    /**\r\n     * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.\r\n     */\r\n    units: _NS$g(\"units\"),\r\n    /**\r\n     * Specifies when the object was last updated\r\n     */\r\n    updated: _NS$g(\"updated\"),\r\n    /**\r\n     * upstreamDuplicates\r\n     */\r\n    upstreamDuplicates: _NS$g(\"upstreamDuplicates\"),\r\n    /**\r\n     * verb\r\n     */\r\n    verb: _NS$g(\"verb\"),\r\n    /**\r\n     * Specifies the preferred display width of the content, expressed in terms of device independent pixels.\r\n     */\r\n    width: _NS$g(\"width\"),\r\n    /**\r\n     * Specifies the date and time the object was deleted\r\n     */\r\n    deleted: _NS$g(\"deleted\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$h = new rdfDataFactory.DataFactory();\r\nfunction _NS$h(localName) {\r\n    return rdfFactory$h.namedNode(\"http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar RLOG = {\r\n    PREFIX: \"rlog\",\r\n    NAMESPACE: \"http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#\",\r\n    PREFIX_AND_NAMESPACE: { \"rlog\": \"http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#\" },\r\n    NS: _NS$h,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html\r\n     */\r\n    Level: _NS$h(\"Level\"),\r\n    /**\r\n     * An entry in a log.\r\n     */\r\n    Entry: _NS$h(\"Entry\"),\r\n    /**\r\n     * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.\r\n     */\r\n    StatusCode: _NS$h(\"StatusCode\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The ALL has the lowest possible rank and is intended to turn on all logging.\r\n     */\r\n    ALL: _NS$h(\"ALL\"),\r\n    /**\r\n     * Attention: the ids here can change, they are just used to define an order over the levels!\r\n     */\r\n    priority: _NS$h(\"priority\"),\r\n    /**\r\n     * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.\r\n     */\r\n    DEBUG: _NS$h(\"DEBUG\"),\r\n    /**\r\n     * The ERROR level designates error events that might still allow the application to continue running.\r\n     */\r\n    ERROR: _NS$h(\"ERROR\"),\r\n    /**\r\n     * The FATAL level designates very severe error events that will presumably lead the application to abort.\r\n     */\r\n    FATAL: _NS$h(\"FATAL\"),\r\n    /**\r\n     * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.\r\n     */\r\n    INFO: _NS$h(\"INFO\"),\r\n    /**\r\n     * The OFF has the highest possible rank and is intended to turn off logging.\r\n     */\r\n    OFF: _NS$h(\"OFF\"),\r\n    /**\r\n     * The TRACE Level designates finer-grained informational events than the DEBUG.\r\n     */\r\n    TRACE: _NS$h(\"TRACE\"),\r\n    /**\r\n     * The WARN level designates potentially harmful situations.\r\n     */\r\n    WARN: _NS$h(\"WARN\"),\r\n    /**\r\n     * Outputs the fully qualified class name of the caller issuing the logging request.\r\n     */\r\n    className: _NS$h(\"className\"),\r\n    /**\r\n     * The numerical value of the code, e.g. 200, 404 or 42.\r\n     */\r\n    codeId: _NS$h(\"codeId\"),\r\n    /**\r\n     * Logging datetime (or just date)\r\n     */\r\n    date: _NS$h(\"date\"),\r\n    /**\r\n     * Links a log message to a status code.\r\n     */\r\n    hasCode: _NS$h(\"hasCode\"),\r\n    /**\r\n     * logLevel\r\n     */\r\n    level: _NS$h(\"level\"),\r\n    /**\r\n     * Logging message\r\n     */\r\n    message: _NS$h(\"message\"),\r\n    /**\r\n     * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to.\r\n     */\r\n    resource: _NS$h(\"resource\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$i = new rdfDataFactory.DataFactory();\r\nfunction _NS$i(localName) {\r\n    return rdfFactory$i.namedNode(\"http://xmlns.com/foaf/0.1/\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar FOAF = {\r\n    PREFIX: \"foaf\",\r\n    NAMESPACE: \"http://xmlns.com/foaf/0.1/\",\r\n    PREFIX_AND_NAMESPACE: { \"foaf\": \"http://xmlns.com/foaf/0.1/\" },\r\n    NS: _NS$i,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * An agent (eg. person, group, software or physical artifact).\r\n     */\r\n    Agent: _NS$i(\"Agent\"),\r\n    /**\r\n     * A document.\r\n     */\r\n    Document: _NS$i(\"Document\"),\r\n    /**\r\n     * An organization.\r\n     */\r\n    Organization: _NS$i(\"Organization\"),\r\n    /**\r\n     * A project (a collective endeavour of some kind).\r\n     */\r\n    Project: _NS$i(\"Project\"),\r\n    /**\r\n     * A class of Agents.\r\n     */\r\n    Group: _NS$i(\"Group\"),\r\n    /**\r\n     * An image.\r\n     */\r\n    Image: _NS$i(\"Image\"),\r\n    /**\r\n     * A foaf:LabelProperty is any RDF property with texual values that serve as labels.\r\n     */\r\n    LabelProperty: _NS$i(\"LabelProperty\"),\r\n    /**\r\n     * An online account.\r\n     */\r\n    OnlineAccount: _NS$i(\"OnlineAccount\"),\r\n    /**\r\n     * An online chat account.\r\n     */\r\n    OnlineChatAccount: _NS$i(\"OnlineChatAccount\"),\r\n    /**\r\n     * An online e-commerce account.\r\n     */\r\n    OnlineEcommerceAccount: _NS$i(\"OnlineEcommerceAccount\"),\r\n    /**\r\n     * An online gaming account.\r\n     */\r\n    OnlineGamingAccount: _NS$i(\"OnlineGamingAccount\"),\r\n    /**\r\n     * A person.\r\n     */\r\n    Person: _NS$i(\"Person\"),\r\n    /**\r\n     * A personal profile RDF document.\r\n     */\r\n    PersonalProfileDocument: _NS$i(\"PersonalProfileDocument\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Indicates an account held by this agent.\r\n     */\r\n    account: _NS$i(\"account\"),\r\n    /**\r\n     * Indicates the name (identifier) associated with this online account.\r\n     */\r\n    accountName: _NS$i(\"accountName\"),\r\n    /**\r\n     * Indicates a homepage of the service provide for this online account.\r\n     */\r\n    accountServiceHomepage: _NS$i(\"accountServiceHomepage\"),\r\n    /**\r\n     * The age in years of some agent.\r\n     */\r\n    age: _NS$i(\"age\"),\r\n    /**\r\n     * An AIM chat ID\r\n     */\r\n    aimChatID: _NS$i(\"aimChatID\"),\r\n    /**\r\n     * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).\r\n     */\r\n    nick: _NS$i(\"nick\"),\r\n    /**\r\n     * A location that something is based near, for some broadly human notion of near.\r\n     */\r\n    based_near: _NS$i(\"based_near\"),\r\n    /**\r\n     * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.\r\n     */\r\n    birthday: _NS$i(\"birthday\"),\r\n    /**\r\n     * A current project this person works on.\r\n     */\r\n    currentProject: _NS$i(\"currentProject\"),\r\n    /**\r\n     * A depiction of some thing.\r\n     */\r\n    depiction: _NS$i(\"depiction\"),\r\n    /**\r\n     * A thing depicted in this representation.\r\n     */\r\n    depicts: _NS$i(\"depicts\"),\r\n    /**\r\n     * A checksum for the DNA of some thing. Joke.\r\n     */\r\n    dnaChecksum: _NS$i(\"dnaChecksum\"),\r\n    /**\r\n     * The family name of some person.\r\n     */\r\n    familyName: _NS$i(\"familyName\"),\r\n    /**\r\n     * The family name of some person.\r\n     */\r\n    family_name: _NS$i(\"family_name\"),\r\n    /**\r\n     * The first name of a person.\r\n     */\r\n    firstName: _NS$i(\"firstName\"),\r\n    /**\r\n     * The underlying or 'focal' entity associated with some SKOS-described concept.\r\n     */\r\n    focus: _NS$i(\"focus\"),\r\n    /**\r\n     * An organization funding a project or person.\r\n     */\r\n    fundedBy: _NS$i(\"fundedBy\"),\r\n    /**\r\n     * A textual geekcode for this person, see http://www.geekcode.com/geek.html\r\n     */\r\n    geekcode: _NS$i(\"geekcode\"),\r\n    /**\r\n     * The gender of this Agent (typically but not necessarily 'male' or 'female').\r\n     */\r\n    gender: _NS$i(\"gender\"),\r\n    /**\r\n     * The given name of some person.\r\n     */\r\n    givenName: _NS$i(\"givenName\"),\r\n    /**\r\n     * The given name of some person.\r\n     */\r\n    givenname: _NS$i(\"givenname\"),\r\n    /**\r\n     * Indicates an account held by this agent.\r\n     */\r\n    holdsAccount: _NS$i(\"holdsAccount\"),\r\n    /**\r\n     * A homepage for some thing.\r\n     */\r\n    homepage: _NS$i(\"homepage\"),\r\n    /**\r\n     * A page or document about this thing.\r\n     */\r\n    page: _NS$i(\"page\"),\r\n    /**\r\n     * A document that this thing is the primary topic of.\r\n     */\r\n    isPrimaryTopicOf: _NS$i(\"isPrimaryTopicOf\"),\r\n    /**\r\n     * An ICQ chat ID\r\n     */\r\n    icqChatID: _NS$i(\"icqChatID\"),\r\n    /**\r\n     * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).\r\n     */\r\n    img: _NS$i(\"img\"),\r\n    /**\r\n     * A page about a topic of interest to this person.\r\n     */\r\n    interest: _NS$i(\"interest\"),\r\n    /**\r\n     * The primary topic of some page or document.\r\n     */\r\n    primaryTopic: _NS$i(\"primaryTopic\"),\r\n    /**\r\n     * A jabber ID for something.\r\n     */\r\n    jabberID: _NS$i(\"jabberID\"),\r\n    /**\r\n     * A person known by this person (indicating some level of reciprocated interaction between the parties).\r\n     */\r\n    knows: _NS$i(\"knows\"),\r\n    /**\r\n     * The last name of a person.\r\n     */\r\n    lastName: _NS$i(\"lastName\"),\r\n    /**\r\n     * A logo representing some thing.\r\n     */\r\n    logo: _NS$i(\"logo\"),\r\n    /**\r\n     * Something that was made by this agent.\r\n     */\r\n    made: _NS$i(\"made\"),\r\n    /**\r\n     * An agent that made this thing.\r\n     */\r\n    maker: _NS$i(\"maker\"),\r\n    /**\r\n     * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.\r\n     */\r\n    mbox: _NS$i(\"mbox\"),\r\n    /**\r\n     * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.\r\n     */\r\n    mbox_sha1sum: _NS$i(\"mbox_sha1sum\"),\r\n    /**\r\n     * Indicates a member of a Group\r\n     */\r\n    member: _NS$i(\"member\"),\r\n    /**\r\n     * Indicates the class of individuals that are a member of a Group\r\n     */\r\n    membershipClass: _NS$i(\"membershipClass\"),\r\n    /**\r\n     * An MSN chat ID\r\n     */\r\n    msnChatID: _NS$i(\"msnChatID\"),\r\n    /**\r\n     * A Myers Briggs (MBTI) personality classification.\r\n     */\r\n    myersBriggs: _NS$i(\"myersBriggs\"),\r\n    /**\r\n     * A name for some thing.\r\n     */\r\n    name: _NS$i(\"name\"),\r\n    /**\r\n     * An OpenID for an Agent.\r\n     */\r\n    openid: _NS$i(\"openid\"),\r\n    /**\r\n     * A topic of some page or document.\r\n     */\r\n    topic: _NS$i(\"topic\"),\r\n    /**\r\n     * A project this person has previously worked on.\r\n     */\r\n    pastProject: _NS$i(\"pastProject\"),\r\n    /**\r\n     * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).\r\n     */\r\n    phone: _NS$i(\"phone\"),\r\n    /**\r\n     * A .plan comment, in the tradition of finger and '.plan' files.\r\n     */\r\n    plan: _NS$i(\"plan\"),\r\n    /**\r\n     * A link to the publications of this person.\r\n     */\r\n    publications: _NS$i(\"publications\"),\r\n    /**\r\n     * A homepage of a school attended by the person.\r\n     */\r\n    schoolHomepage: _NS$i(\"schoolHomepage\"),\r\n    /**\r\n     * A sha1sum hash, in hex.\r\n     */\r\n    sha1: _NS$i(\"sha1\"),\r\n    /**\r\n     * A Skype ID\r\n     */\r\n    skypeID: _NS$i(\"skypeID\"),\r\n    /**\r\n     * A string expressing what the user is happy for the general public (normally) to know about their current activity.\r\n     */\r\n    status: _NS$i(\"status\"),\r\n    /**\r\n     * The surname of some person.\r\n     */\r\n    surname: _NS$i(\"surname\"),\r\n    /**\r\n     * A theme.\r\n     */\r\n    theme: _NS$i(\"theme\"),\r\n    /**\r\n     * A derived thumbnail image.\r\n     */\r\n    thumbnail: _NS$i(\"thumbnail\"),\r\n    /**\r\n     * A tipjar document for this agent, describing means for payment and reward.\r\n     */\r\n    tipjar: _NS$i(\"tipjar\"),\r\n    /**\r\n     * Title (Mr, Mrs, Ms, Dr. etc)\r\n     */\r\n    title: _NS$i(\"title\"),\r\n    /**\r\n     * A thing of interest to this person.\r\n     */\r\n    topic_interest: _NS$i(\"topic_interest\"),\r\n    /**\r\n     * A weblog of some thing (whether person, group, company etc.).\r\n     */\r\n    weblog: _NS$i(\"weblog\"),\r\n    /**\r\n     * A work info homepage of some person; a page about their work for some organization.\r\n     */\r\n    workInfoHomepage: _NS$i(\"workInfoHomepage\"),\r\n    /**\r\n     * A workplace homepage of some person; the homepage of an organization they work for.\r\n     */\r\n    workplaceHomepage: _NS$i(\"workplaceHomepage\"),\r\n    /**\r\n     * A Yahoo chat ID\r\n     */\r\n    yahooChatID: _NS$i(\"yahooChatID\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$j = new rdfDataFactory.DataFactory();\r\nfunction _NS$j(localName) {\r\n    return rdfFactory$j.namedNode(\"http://purl.org/linked-data/cube#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar QB = {\r\n    PREFIX: \"qb\",\r\n    NAMESPACE: \"http://purl.org/linked-data/cube#\",\r\n    PREFIX_AND_NAMESPACE: { \"qb\": \"http://purl.org/linked-data/cube#\" },\r\n    NS: _NS$j,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.\r\n     */\r\n    DataSet: _NS$j(\"DataSet\"),\r\n    /**\r\n     * Abstract superclass for everything that can have attributes and dimensions\r\n     */\r\n    Attachable: _NS$j(\"Attachable\"),\r\n    /**\r\n     * A single observation in the cube, may have one or more associated measured values\r\n     */\r\n    Observation: _NS$j(\"Observation\"),\r\n    /**\r\n     * A, possibly arbitrary, group of observations.\r\n     */\r\n    ObservationGroup: _NS$j(\"ObservationGroup\"),\r\n    /**\r\n     * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice\r\n     */\r\n    Slice: _NS$j(\"Slice\"),\r\n    /**\r\n     * Abstract super-property of all properties representing dimensions, attributes or measures\r\n     */\r\n    ComponentProperty: _NS$j(\"ComponentProperty\"),\r\n    /**\r\n     * The class of components which represent the dimensions of the cube\r\n     */\r\n    DimensionProperty: _NS$j(\"DimensionProperty\"),\r\n    /**\r\n     * Superclass of all coded ComponentProperties\r\n     */\r\n    CodedProperty: _NS$j(\"CodedProperty\"),\r\n    /**\r\n     * The class of components which represent the measured value of the phenomenon being observed\r\n     */\r\n    MeasureProperty: _NS$j(\"MeasureProperty\"),\r\n    /**\r\n     * The class of components which represent attributes of observations in the cube, e.g. unit of measurement\r\n     */\r\n    AttributeProperty: _NS$j(\"AttributeProperty\"),\r\n    /**\r\n     * Defines the structure of a DataSet or slice\r\n     */\r\n    DataStructureDefinition: _NS$j(\"DataStructureDefinition\"),\r\n    /**\r\n     * Abstract class of things which reference one or more ComponentProperties\r\n     */\r\n    ComponentSet: _NS$j(\"ComponentSet\"),\r\n    /**\r\n     * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.\r\n     */\r\n    ComponentSpecification: _NS$j(\"ComponentSpecification\"),\r\n    /**\r\n     * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices\r\n     */\r\n    SliceKey: _NS$j(\"SliceKey\"),\r\n    /**\r\n     * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.\r\n     */\r\n    HierarchicalCodeList: _NS$j(\"HierarchicalCodeList\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * indicates the data set of which this observation is a part\r\n     */\r\n    dataSet: _NS$j(\"dataSet\"),\r\n    /**\r\n     * indicates a observation contained within this slice of the data set\r\n     */\r\n    observation: _NS$j(\"observation\"),\r\n    /**\r\n     * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet\r\n     */\r\n    observationGroup: _NS$j(\"observationGroup\"),\r\n    /**\r\n     * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values\r\n     */\r\n    slice: _NS$j(\"slice\"),\r\n    /**\r\n     * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)\r\n     */\r\n    measureType: _NS$j(\"measureType\"),\r\n    /**\r\n     * indicates the structure to which this data set conforms\r\n     */\r\n    structure: _NS$j(\"structure\"),\r\n    /**\r\n     * indicates a component specification which is included in the structure of the dataset\r\n     */\r\n    component: _NS$j(\"component\"),\r\n    /**\r\n     * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey\r\n     */\r\n    componentProperty: _NS$j(\"componentProperty\"),\r\n    /**\r\n     * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last\r\n     */\r\n    order: _NS$j(\"order\"),\r\n    /**\r\n     * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable\r\n      to components correspond to an attribute. Defaults to false (optional).\r\n     */\r\n    componentRequired: _NS$j(\"componentRequired\"),\r\n    /**\r\n     * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.\r\n     */\r\n    componentAttachment: _NS$j(\"componentAttachment\"),\r\n    /**\r\n     * An alternative to qb:componentProperty which makes explicit that the component is a dimension\r\n     */\r\n    dimension: _NS$j(\"dimension\"),\r\n    /**\r\n     * An alternative to qb:componentProperty which makes explicit that the component is a measure\r\n     */\r\n    measure: _NS$j(\"measure\"),\r\n    /**\r\n     * An alternative to qb:componentProperty which makes explicit that the component is a attribute\r\n     */\r\n    attribute: _NS$j(\"attribute\"),\r\n    /**\r\n     * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension\r\n     */\r\n    measureDimension: _NS$j(\"measureDimension\"),\r\n    /**\r\n     * indicates the sub-key corresponding to this slice\r\n     */\r\n    sliceStructure: _NS$j(\"sliceStructure\"),\r\n    /**\r\n     * indicates a slice key which is used for slices in this dataset\r\n     */\r\n    sliceKey: _NS$j(\"sliceKey\"),\r\n    /**\r\n     * gives the concept which is being measured or indicated by a ComponentProperty\r\n     */\r\n    concept: _NS$j(\"concept\"),\r\n    /**\r\n     * gives the code list associated with a CodedProperty\r\n     */\r\n    codeList: _NS$j(\"codeList\"),\r\n    /**\r\n     * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.\r\n     */\r\n    hierarchyRoot: _NS$j(\"hierarchyRoot\"),\r\n    /**\r\n     * Specifies a property which relates a parent concept in the hierarchy to a child concept.\r\n     */\r\n    parentChildProperty: _NS$j(\"parentChildProperty\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$k = new rdfDataFactory.DataFactory();\r\nfunction _NS$k(localName) {\r\n    return rdfFactory$k.namedNode(\"http://purl.org/linked-data/sdmx/2009/dimension#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar SDMX_DIMENSION = {\r\n    PREFIX: \"sdmx-dimension\",\r\n    NAMESPACE: \"http://purl.org/linked-data/sdmx/2009/dimension#\",\r\n    PREFIX_AND_NAMESPACE: { \"sdmx-dimension\": \"http://purl.org/linked-data/sdmx/2009/dimension#\" },\r\n    NS: _NS$k,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The length of time that a person has lived or a thing has existed.\r\n     */\r\n    age: _NS$k(\"age\"),\r\n    /**\r\n     * Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.\r\n     */\r\n    civilStatus: _NS$k(\"civilStatus\"),\r\n    /**\r\n     * Monetary denomination of the object being measured.\r\n     */\r\n    currency: _NS$k(\"currency\"),\r\n    /**\r\n     * The highest level of an educational programme the person has successfully completed.\r\n     */\r\n    educationLev: _NS$k(\"educationLev\"),\r\n    /**\r\n     * The time interval at which observations occur over a given time period.\r\n     */\r\n    freq: _NS$k(\"freq\"),\r\n    /**\r\n     * Job or position held by an individual who performs a set of tasks and duties.\r\n     */\r\n    occupation: _NS$k(\"occupation\"),\r\n    /**\r\n     * The country or geographic area to which the measured statistical phenomenon relates.\r\n     */\r\n    refArea: _NS$k(\"refArea\"),\r\n    /**\r\n     * The period of time or point in time to which the measured observation is intended to refer.\r\n     */\r\n    refPeriod: _NS$k(\"refPeriod\"),\r\n    /**\r\n     * The state of being male or female.\r\n     */\r\n    sex: _NS$k(\"sex\"),\r\n    /**\r\n     * The period of time or point in time to which the measured observation refers.\r\n     */\r\n    timePeriod: _NS$k(\"timePeriod\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$l = new rdfDataFactory.DataFactory();\r\nfunction _NS$l(localName) {\r\n    return rdfFactory$l.namedNode(\"http://www.w3.org/ns/shex#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar SHEX = {\r\n    PREFIX: \"shex\",\r\n    NAMESPACE: \"http://www.w3.org/ns/shex#\",\r\n    PREFIX_AND_NAMESPACE: { \"shex\": \"http://www.w3.org/ns/shex#\" },\r\n    NS: _NS$l,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * Annotations provide a format-independent way to provide additional information about elements in a schema.\r\n     */\r\n    Annotation: _NS$l(\"Annotation\"),\r\n    /**\r\n     * A TripleExpression composed of one or more sub-expressions, all of which must match.\r\n     */\r\n    EachOf: _NS$l(\"EachOf\"),\r\n    /**\r\n     * The abstract class of Triple Expressions.\r\n     */\r\n    TripleExpression: _NS$l(\"TripleExpression\"),\r\n    /**\r\n     * An IRI prefix used for matching IRIs.\r\n     */\r\n    IriStem: _NS$l(\"IriStem\"),\r\n    /**\r\n     * Abstract class for Stems\r\n     */\r\n    Stem: _NS$l(\"Stem\"),\r\n    /**\r\n     * An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.\r\n     */\r\n    IriStemRange: _NS$l(\"IriStemRange\"),\r\n    /**\r\n     * Abstract Class for Stem Ranges\r\n     */\r\n    StemRange: _NS$l(\"StemRange\"),\r\n    /**\r\n     * An Language tag used for matching Literal Languages.\r\n     */\r\n    Language: _NS$l(\"Language\"),\r\n    /**\r\n     * An Language prefix used for matching Literal Languages.\r\n     */\r\n    LanguageStem: _NS$l(\"LanguageStem\"),\r\n    /**\r\n     * An Language prefix (or wildcard) along with a set of excluded values, used for node matching.\r\n     */\r\n    LanguageStemRange: _NS$l(\"LanguageStemRange\"),\r\n    /**\r\n     * An Literal prefix used for matching Literals.\r\n     */\r\n    LiteralStem: _NS$l(\"LiteralStem\"),\r\n    /**\r\n     * An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.\r\n     */\r\n    LiteralStemRange: _NS$l(\"LiteralStemRange\"),\r\n    /**\r\n     * A constraint on the type or value of an RDF Node.\r\n     */\r\n    NodeConstraint: _NS$l(\"NodeConstraint\"),\r\n    /**\r\n     * The abstract class of Shape Expressions.\r\n     */\r\n    ShapeExpression: _NS$l(\"ShapeExpression\"),\r\n    /**\r\n     * The set of kinds of RDF Nodes.\r\n     */\r\n    NodeKind: _NS$l(\"NodeKind\"),\r\n    /**\r\n     * A TripleExpression composed of one or more sub-expressions, one of which must match.\r\n     */\r\n    OneOf: _NS$l(\"OneOf\"),\r\n    /**\r\n     * A Schema contains the set of shapes, used for matching a focus node.\r\n     */\r\n    Schema: _NS$l(\"Schema\"),\r\n    /**\r\n     * A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.\r\n     */\r\n    SemAct: _NS$l(\"SemAct\"),\r\n    /**\r\n     * A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.\r\n     */\r\n    Shape: _NS$l(\"Shape\"),\r\n    /**\r\n     * A ShapeExpression composed of one or more sub-expressions, all of which must match.\r\n     */\r\n    ShapeAnd: _NS$l(\"ShapeAnd\"),\r\n    /**\r\n     * A reference to a shape defined in some external Schema.\r\n     */\r\n    ShapeExternal: _NS$l(\"ShapeExternal\"),\r\n    /**\r\n     * A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.\r\n     */\r\n    ShapeNot: _NS$l(\"ShapeNot\"),\r\n    /**\r\n     * A ShapeExpression composed of one or more sub-expressions, one of which must match.\r\n     */\r\n    ShapeOr: _NS$l(\"ShapeOr\"),\r\n    /**\r\n     * A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.\r\n     */\r\n    TripleConstraint: _NS$l(\"TripleConstraint\"),\r\n    /**\r\n     * Indicates that a stem is a Wildcard, rather than a URI prefix.\r\n     */\r\n    Wildcard: _NS$l(\"Wildcard\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Annotations on a TripleExpression.\r\n     */\r\n    annotation: _NS$l(\"annotation\"),\r\n    /**\r\n     * Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.\r\n     */\r\n    closed: _NS$l(\"closed\"),\r\n    /**\r\n     * Code executed by Semantic Action.\r\n     */\r\n    code: _NS$l(\"code\"),\r\n    /**\r\n     * A datatype constraint.\r\n     */\r\n    datatype: _NS$l(\"datatype\"),\r\n    /**\r\n     * Values that are excluded from value matching.\r\n     */\r\n    exclusion: _NS$l(\"exclusion\"),\r\n    /**\r\n     * Expression associated with the TripleExpression.\r\n     */\r\n    expression: _NS$l(\"expression\"),\r\n    /**\r\n     * List of 2 or more expressions associated with the TripleExpression.\r\n     */\r\n    expressions: _NS$l(\"expressions\"),\r\n    /**\r\n     * Properties which may have extra values beyond those matched through a constraint.\r\n     */\r\n    extra: _NS$l(\"extra\"),\r\n    /**\r\n     * Regular expression flags\r\n     */\r\n    flags: _NS$l(\"flags\"),\r\n    /**\r\n     * for \"fractiondigits\" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.\r\n     */\r\n    fractiondigits: _NS$l(\"fractiondigits\"),\r\n    /**\r\n     * Abstract property of numeric facets on a NodeConstraint.\r\n     */\r\n    numericFacet: _NS$l(\"numericFacet\"),\r\n    /**\r\n     * Constrains the subject of a triple, rather than the object.\r\n     */\r\n    inverse: _NS$l(\"inverse\"),\r\n    /**\r\n     * The value used to match the language tag of a language-tagged string.\r\n     */\r\n    languageTag: _NS$l(\"languageTag\"),\r\n    /**\r\n     * The exact length of the value of the cell.\r\n     */\r\n    length: _NS$l(\"length\"),\r\n    /**\r\n     * An abstract property of string facets on a NodeConstraint.\r\n     */\r\n    stringFacet: _NS$l(\"stringFacet\"),\r\n    /**\r\n     * Maximum number of times this TripleExpression may match; -1 for “*”\r\n     */\r\n    max: _NS$l(\"max\"),\r\n    /**\r\n     * An atomic property that contains a single number that is the maximum valid value (exclusive).\r\n     */\r\n    maxexclusive: _NS$l(\"maxexclusive\"),\r\n    /**\r\n     * An atomic property that contains a single number that is the maximum valid value (inclusive).\r\n     */\r\n    maxinclusive: _NS$l(\"maxinclusive\"),\r\n    /**\r\n     * A numeric atomic property that contains a single integer that is the maximum length of the value.\r\n     */\r\n    maxlength: _NS$l(\"maxlength\"),\r\n    /**\r\n     * Minimum number of times this TripleExpression may match.\r\n     */\r\n    min: _NS$l(\"min\"),\r\n    /**\r\n     * An atomic property that contains a single number that is the minimum valid value (exclusive).\r\n     */\r\n    minexclusive: _NS$l(\"minexclusive\"),\r\n    /**\r\n     * An atomic property that contains a single number that is the minimum valid value (inclusive).\r\n     */\r\n    mininclusive: _NS$l(\"mininclusive\"),\r\n    /**\r\n     * An atomic property that contains a single integer that is the minimum length of the value.\r\n     */\r\n    minlength: _NS$l(\"minlength\"),\r\n    /**\r\n     * Identifier of SemAct extension.\r\n     */\r\n    name: _NS$l(\"name\"),\r\n    /**\r\n     * Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.\r\n     */\r\n    nodeKind: _NS$l(\"nodeKind\"),\r\n    /**\r\n     * An abstract property of string and numeric facets on a NodeConstraint.\r\n     */\r\n    xsFacet: _NS$l(\"xsFacet\"),\r\n    /**\r\n     * The object of an Annotation.\r\n     */\r\n    object: _NS$l(\"object\"),\r\n    /**\r\n     * A regular expression used for matching a value.\r\n     */\r\n    pattern: _NS$l(\"pattern\"),\r\n    /**\r\n     * The predicate of a TripleConstraint or Annotation.\r\n     */\r\n    predicate: _NS$l(\"predicate\"),\r\n    /**\r\n     * Semantic Actions on this TripleExpression.\r\n     */\r\n    semActs: _NS$l(\"semActs\"),\r\n    /**\r\n     * Shape Expression referenced by this shape.\r\n     */\r\n    shapeExpr: _NS$l(\"shapeExpr\"),\r\n    /**\r\n     * A list of 2 or more Shape Expressions referenced by this shape.\r\n     */\r\n    shapeExprs: _NS$l(\"shapeExprs\"),\r\n    /**\r\n     * Shapes in this Schema.\r\n     */\r\n    shapes: _NS$l(\"shapes\"),\r\n    /**\r\n     * A ShapeExpression matched against the focus node prior to any other mapped expressions.\r\n     */\r\n    start: _NS$l(\"start\"),\r\n    /**\r\n     * Semantic Actions run on the Schema.\r\n     */\r\n    startActs: _NS$l(\"startActs\"),\r\n    /**\r\n     * A stem value used for matching or excluding values.\r\n     */\r\n    stem: _NS$l(\"stem\"),\r\n    /**\r\n     * for \"totaldigits\" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n\r\n     */\r\n    totaldigits: _NS$l(\"totaldigits\"),\r\n    /**\r\n     * A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.\r\n     */\r\n    valueExpr: _NS$l(\"valueExpr\"),\r\n    /**\r\n     * A value restriction on a NodeConstraint.\r\n     */\r\n    values: _NS$l(\"values\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$m = new rdfDataFactory.DataFactory();\r\nfunction _NS$m(localName) {\r\n    return rdfFactory$m.namedNode(\"http://www.w3.org/ns/auth/acl#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar ACL = {\r\n    PREFIX: \"acl\",\r\n    NAMESPACE: \"http://www.w3.org/ns/auth/acl#\",\r\n    PREFIX_AND_NAMESPACE: { \"acl\": \"http://www.w3.org/ns/auth/acl#\" },\r\n    NS: _NS$m,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * Any kind of access to a resource. Don't use this, use R W and RW\r\n     */\r\n    Access: _NS$m(\"Access\"),\r\n    /**\r\n     * Append accesses are specific write access which only add information, and do not remove information.\r\n      For text files, for example, append access allows bytes to be added onto the end of the file.\r\n      For RDF graphs, Append access allows adds triples to the graph but does not remove any.\r\n      Append access is useful for dropbox functionality.\r\n      Dropbox can be used for link notification, which the information added is a notification\r\n      that a some link has been made elsewhere relevant to the given resource.\r\n      \n     */\r\n    Append: _NS$m(\"Append\"),\r\n    /**\r\n     * write\r\n     */\r\n    Write: _NS$m(\"Write\"),\r\n    /**\r\n     * A class of agents who have been authenticated.\r\n  In other words, anyone can access this resource, but not anonymously.\r\n  The social expectation is that the authentication process will provide an\r\n  identify and a name, or pseudonym.\r\n  (A new ID should not be minted for every access: the intent is that the user\r\n  is able to continue to use the ID for continues interactions with peers,\r\n  and for example to develop a reputation)\r\n  \n     */\r\n    AuthenticatedAgent: _NS$m(\"AuthenticatedAgent\"),\r\n    /**\r\n     * An element of access control,\r\n      allowing agent to agents access of some kind to resources or classes of resources\r\n     */\r\n    Authorization: _NS$m(\"Authorization\"),\r\n    /**\r\n     * Allows read/write access to the ACL for the resource(s)\r\n     */\r\n    Control: _NS$m(\"Control\"),\r\n    /**\r\n     * An Origin is basically a web site\r\n          (Note WITHOUT the trailing slash after the domain name and port in its URI)\r\n          and is the basis for controlling access to data by web apps\r\n          in the Same Origin Model of web security.\r\n          All scripts from the same origin are given the same right.\r\n     */\r\n    Origin: _NS$m(\"Origin\"),\r\n    /**\r\n     * The class of read operations\r\n     */\r\n    Read: _NS$m(\"Read\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * The Access Control file for this information resource.\r\n          This may of course be a virtual resource implemented by the access control system.\r\n          Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.\r\n     */\r\n    accessControl: _NS$m(\"accessControl\"),\r\n    /**\r\n     * The information resource to which access is being granted.\r\n     */\r\n    accessTo: _NS$m(\"accessTo\"),\r\n    /**\r\n     * A class of information resources to which access is being granted.\r\n     */\r\n    accessToClass: _NS$m(\"accessToClass\"),\r\n    /**\r\n     * A person or social entity to being given the right\r\n     */\r\n    agent: _NS$m(\"agent\"),\r\n    /**\r\n     * A class of persons or social entities to being given the right\r\n     */\r\n    agentClass: _NS$m(\"agentClass\"),\r\n    /**\r\n     * A group of persons or social entities to being given the right.\r\n            The right is given to any entity which is a vcard:member of the group,\r\n            as defined by the document received when the Group is dereferenced.\r\n     */\r\n    agentGroup: _NS$m(\"agentGroup\"),\r\n    /**\r\n     * If a resource has no ACL file (it is 404),\r\n          then access to the resource if given by the ACL of the immediately\r\n          containing directory, or failing that (404) the ACL of the recursively next\r\n          containing directory which has an ACL file.\r\n          Within that ACL file,\r\n          any Authentication which has that directory as its acl:default applies to the\r\n          resource. (The highest directory must have an ACL file.)\r\n  \n     */\r\n    default: _NS$m(\"default\"),\r\n    /**\r\n     * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.\r\n          Was: A directory for which this authorization is used for new files in the directory.\r\n     */\r\n    defaultForNew: _NS$m(\"defaultForNew\"),\r\n    /**\r\n     * Delegates a person or another agent to act on behalf of the agent.\r\n      For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.\r\n     */\r\n    delegates: _NS$m(\"delegates\"),\r\n    /**\r\n     * A mode of access such as read or write.\r\n     */\r\n    mode: _NS$m(\"mode\"),\r\n    /**\r\n     * A web application, identified by its Origin, such as\r\n          <https://scripts.example.com>, being given the right.\r\n          When a user of the web application at a certain origin accesses the server,\r\n          then the browser sets the Origin: header to warn that a possibly untrusted webapp\r\n          is being used.\r\n          Then, BOTH the user AND the origin must have the required access.\r\n     */\r\n    origin: _NS$m(\"origin\"),\r\n    /**\r\n     * The person or other agent which owns this.\r\n      For example, the owner of a file in a filesystem.\r\n      There is a sense of right to control.   Typically defaults to the agent who craeted\r\n      something but can be changed.\r\n     */\r\n    owner: _NS$m(\"owner\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$n = new rdfDataFactory.DataFactory();\r\nfunction _NS$n(localName) {\r\n    return rdfFactory$n.namedNode(\"http://www.w3.org/ns/posix/stat#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar POSIX = {\r\n    PREFIX: \"posix\",\r\n    NAMESPACE: \"http://www.w3.org/ns/posix/stat#\",\r\n    PREFIX_AND_NAMESPACE: { \"posix\": \"http://www.w3.org/ns/posix/stat#\" },\r\n    NS: _NS$n,\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Time of last access\r\n     */\r\n    atime: _NS$n(\"atime\"),\r\n    /**\r\n     * Blocksize for file system I/O\r\n     */\r\n    blksize: _NS$n(\"blksize\"),\r\n    /**\r\n     * Number of 512B blocks allocated\r\n     */\r\n    blocks: _NS$n(\"blocks\"),\r\n    /**\r\n     * Time of last status change\r\n     */\r\n    ctime: _NS$n(\"ctime\"),\r\n    /**\r\n     * ID of device containing file\r\n     */\r\n    dev: _NS$n(\"dev\"),\r\n    /**\r\n     * Group ID of owner\r\n     */\r\n    gid: _NS$n(\"gid\"),\r\n    /**\r\n     * inode number\r\n     */\r\n    ino: _NS$n(\"ino\"),\r\n    /**\r\n     * Protection\r\n     */\r\n    mode: _NS$n(\"mode\"),\r\n    /**\r\n     * Time of last modification\r\n     */\r\n    mtime: _NS$n(\"mtime\"),\r\n    /**\r\n     * Number of hard links\r\n     */\r\n    nlink: _NS$n(\"nlink\"),\r\n    /**\r\n     * Device ID (if special file)\r\n     */\r\n    rdev: _NS$n(\"rdev\"),\r\n    /**\r\n     * Total size, in bytes\r\n     */\r\n    size: _NS$n(\"size\"),\r\n    /**\r\n     * User ID of owner\r\n     */\r\n    uid: _NS$n(\"uid\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$o = new rdfDataFactory.DataFactory();\r\nfunction _NS$o(localName) {\r\n    return rdfFactory$o.namedNode(\"https://www.w3.org/2002/12/cal/ical#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar ICAL = {\r\n    PREFIX: \"ical\",\r\n    NAMESPACE: \"https://www.w3.org/2002/12/cal/ical#\",\r\n    PREFIX_AND_NAMESPACE: { \"ical\": \"https://www.w3.org/2002/12/cal/ical#\" },\r\n    NS: _NS$o,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * Provide a grouping of component properties that define an alarm.\r\n     */\r\n    Valarm: _NS$o(\"Valarm\"),\r\n    /**\r\n     *\r\n     */\r\n    Value_CAL_ADDRESS: _NS$o(\"Value_CAL-ADDRESS\"),\r\n    /**\r\n     *\r\n     */\r\n    Value_DATE: _NS$o(\"Value_DATE\"),\r\n    /**\r\n     *\r\n     */\r\n    Value_DATE_TIME: _NS$o(\"Value_DATE-TIME\"),\r\n    /**\r\n     *\r\n     */\r\n    Value_DURATION: _NS$o(\"Value_DURATION\"),\r\n    /**\r\n     *\r\n     */\r\n    Value_PERIOD: _NS$o(\"Value_PERIOD\"),\r\n    /**\r\n     *\r\n     */\r\n    Value_RECUR: _NS$o(\"Value_RECUR\"),\r\n    /**\r\n     * Provide a grouping of component properties that describe an event.\r\n     */\r\n    Vevent: _NS$o(\"Vevent\"),\r\n    /**\r\n     * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.\r\n     */\r\n    Vfreebusy: _NS$o(\"Vfreebusy\"),\r\n    /**\r\n     * Provide a grouping of component properties that describe a journal entry.\r\n     */\r\n    Vjournal: _NS$o(\"Vjournal\"),\r\n    /**\r\n     * Provide a grouping of component properties that defines a time zone.\r\n     */\r\n    Vtimezone: _NS$o(\"Vtimezone\"),\r\n    /**\r\n     * Provide a grouping of calendar properties that describe a to-do.\r\n     */\r\n    Vtodo: _NS$o(\"Vtodo\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     *\r\n          default value type: URI\r\n     */\r\n    attach: _NS$o(\"attach\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    description: _NS$o(\"description\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    summary: _NS$o(\"summary\"),\r\n    /**\r\n     *\r\n          value type: DURATION\r\n     */\r\n    duration: _NS$o(\"duration\"),\r\n    /**\r\n     *\r\n          value type: CAL-ADDRESS\r\n     */\r\n    attendee: _NS$o(\"attendee\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    action: _NS$o(\"action\"),\r\n    /**\r\n     *\r\n          value type: INTEGER\r\n     */\r\n    repeat: _NS$o(\"repeat\"),\r\n    /**\r\n     *\r\n          default value type: DURATION\r\n     */\r\n    trigger: _NS$o(\"trigger\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    categories: _NS$o(\"categories\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    class: _NS$o(\"class\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    comment: _NS$o(\"comment\"),\r\n    /**\r\n     * This property specifies information related to the global position for the activity specified by a calendar component.\r\n     */\r\n    geo: _NS$o(\"geo\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    location: _NS$o(\"location\"),\r\n    /**\r\n     *\r\n          value type: INTEGER\r\n     */\r\n    priority: _NS$o(\"priority\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    resources: _NS$o(\"resources\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    status: _NS$o(\"status\"),\r\n    /**\r\n     *\r\n          default value type: DATE-TIME\r\n     */\r\n    dtend: _NS$o(\"dtend\"),\r\n    /**\r\n     *\r\n          default value type: DATE-TIME\r\n     */\r\n    dtstart: _NS$o(\"dtstart\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    transp: _NS$o(\"transp\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    contact: _NS$o(\"contact\"),\r\n    /**\r\n     *\r\n          value type: CAL-ADDRESS\r\n     */\r\n    organizer: _NS$o(\"organizer\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    relatedTo: _NS$o(\"relatedTo\"),\r\n    /**\r\n     *\r\n          value type: URI\r\n     */\r\n    url: _NS$o(\"url\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    uid: _NS$o(\"uid\"),\r\n    /**\r\n     *\r\n          value type: RECUR\r\n     */\r\n    exrule: _NS$o(\"exrule\"),\r\n    /**\r\n     *\r\n          default value type: DATE-TIME\r\n     */\r\n    rdate: _NS$o(\"rdate\"),\r\n    /**\r\n     *\r\n          value type: RECUR\r\n     */\r\n    rrule: _NS$o(\"rrule\"),\r\n    /**\r\n     *\r\n          value type: DATE-TIME\r\n     */\r\n    created: _NS$o(\"created\"),\r\n    /**\r\n     *\r\n          value type: DATE-TIME\r\n     */\r\n    dtstamp: _NS$o(\"dtstamp\"),\r\n    /**\r\n     *\r\n          value type: DATE-TIME\r\n     */\r\n    lastModified: _NS$o(\"lastModified\"),\r\n    /**\r\n     *\r\n          value type: integer\r\n     */\r\n    sequence: _NS$o(\"sequence\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    requestStatus: _NS$o(\"requestStatus\"),\r\n    /**\r\n     *\r\n          value type: PERIOD\r\n     */\r\n    freebusy: _NS$o(\"freebusy\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    tzid: _NS$o(\"tzid\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    tzname: _NS$o(\"tzname\"),\r\n    /**\r\n     *\r\n          value type: UTC-OFFSET\r\n     */\r\n    tzoffsetfrom: _NS$o(\"tzoffsetfrom\"),\r\n    /**\r\n     *\r\n          value type: UTC-OFFSET\r\n     */\r\n    tzoffsetto: _NS$o(\"tzoffsetto\"),\r\n    /**\r\n     *\r\n          value type: URI\r\n     */\r\n    tzurl: _NS$o(\"tzurl\"),\r\n    /**\r\n     *\r\n          value type: INTEGER\r\n     */\r\n    percentComplete: _NS$o(\"percentComplete\"),\r\n    /**\r\n     *\r\n          value type: DATE-TIME\r\n     */\r\n    completed: _NS$o(\"completed\"),\r\n    /**\r\n     *\r\n          default value type: DATE-TIME\r\n     */\r\n    due: _NS$o(\"due\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    X_: _NS$o(\"X-\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    calscale: _NS$o(\"calscale\"),\r\n    /**\r\n     *\r\n          default value type: DATE-TIME\r\n     */\r\n    exdate: _NS$o(\"exdate\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    method: _NS$o(\"method\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    prodid: _NS$o(\"prodid\"),\r\n    /**\r\n     *\r\n          default value type: DATE-TIME\r\n     */\r\n    recurrenceId: _NS$o(\"recurrenceId\"),\r\n    /**\r\n     *\r\n          value type: TEXT\r\n     */\r\n    version: _NS$o(\"version\"),\r\n};\n\n/**\r\n * MIT License\r\n *\r\n * Copyright 2020 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the &quot;Software&quot;), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nvar rdfFactory$p = new rdfDataFactory.DataFactory();\r\nfunction _NS$p(localName) {\r\n    return rdfFactory$p.namedNode(\"http://www.w3.org/ns/prov#\" + localName);\r\n}\r\n// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,\r\n// for example instances of Constant IRIs (TypeScript compiler will complain of\r\n// \"semantic error TS2742\" otherwise).\r\nvar PROV_O = {\r\n    PREFIX: \"prov-o\",\r\n    NAMESPACE: \"http://www.w3.org/ns/prov#\",\r\n    PREFIX_AND_NAMESPACE: { \"prov-o\": \"http://www.w3.org/ns/prov#\" },\r\n    NS: _NS$p,\r\n    // *****************\r\n    // All the Classes.\r\n    // *****************\r\n    /**\r\n     * Activity\r\n     */\r\n    Activity: _NS$p(\"Activity\"),\r\n    /**\r\n     * Entity\r\n     */\r\n    Entity: _NS$p(\"Entity\"),\r\n    /**\r\n     * ActivityInfluence provides additional descriptions of an Activity's binary influence upon any other kind of resource. Instances of ActivityInfluence use the prov:activity property to cite the influencing Activity.\r\n     */\r\n    ActivityInfluence: _NS$p(\"ActivityInfluence\"),\r\n    /**\r\n     * An instance of prov:Influence provides additional descriptions about the binary prov:wasInfluencedBy relation from some influenced Activity, Entity, or Agent to the influencing Activity, Entity, or Agent. For example, :stomach_ache prov:wasInfluencedBy :spoon; prov:qualifiedInfluence [ a prov:Influence; prov:entity :spoon; :foo :bar ] . Because prov:Influence is a broad relation, the more specific relations (Communication, Delegation, End, etc.) should be used when applicable.\r\n     */\r\n    Influence: _NS$p(\"Influence\"),\r\n    /**\r\n     * EntityInfluence provides additional descriptions of an Entity's binary influence upon any other kind of resource. Instances of EntityInfluence use the prov:entity property to cite the influencing Entity.\r\n     */\r\n    EntityInfluence: _NS$p(\"EntityInfluence\"),\r\n    /**\r\n     * Agent\r\n     */\r\n    Agent: _NS$p(\"Agent\"),\r\n    /**\r\n     * An instantaneous event, or event for short, happens in the world and marks a change in the world, in its activities and in its entities. The term 'event' is commonly used in process algebra with a similar meaning. Events represent communications or interactions; they are assumed to be atomic and instantaneous.\r\n     */\r\n    InstantaneousEvent: _NS$p(\"InstantaneousEvent\"),\r\n    /**\r\n     * AgentInfluence provides additional descriptions of an Agent's binary influence upon any other kind of resource. Instances of AgentInfluence use the prov:agent property to cite the influencing Agent.\r\n     */\r\n    AgentInfluence: _NS$p(\"AgentInfluence\"),\r\n    /**\r\n     * An instance of prov:Association provides additional descriptions about the binary prov:wasAssociatedWith relation from an prov:Activity to some prov:Agent that had some responsiblity for it. For example, :baking prov:wasAssociatedWith :baker; prov:qualifiedAssociation [ a prov:Association; prov:agent :baker; :foo :bar ].\r\n     */\r\n    Association: _NS$p(\"Association\"),\r\n    /**\r\n     * An instance of prov:Attribution provides additional descriptions about the binary prov:wasAttributedTo relation from an prov:Entity to some prov:Agent that had some responsible for it. For example, :cake prov:wasAttributedTo :baker; prov:qualifiedAttribution [ a prov:Attribution; prov:entity :baker; :foo :bar ].\r\n     */\r\n    Attribution: _NS$p(\"Attribution\"),\r\n    /**\r\n     * Note that there are kinds of bundles (e.g. handwritten letters, audio recordings, etc.) that are not expressed in PROV-O, but can be still be described by PROV-O.\r\n     */\r\n    Bundle: _NS$p(\"Bundle\"),\r\n    /**\r\n     * Collection\r\n     */\r\n    Collection: _NS$p(\"Collection\"),\r\n    /**\r\n     * An instance of prov:Communication provides additional descriptions about the binary prov:wasInformedBy relation from an informed prov:Activity to the prov:Activity that informed it. For example, :you_jumping_off_bridge prov:wasInformedBy :everyone_else_jumping_off_bridge; prov:qualifiedCommunication [ a prov:Communication; prov:activity :everyone_else_jumping_off_bridge; :foo :bar ].\r\n     */\r\n    Communication: _NS$p(\"Communication\"),\r\n    /**\r\n     * An instance of prov:Delegation provides additional descriptions about the binary prov:actedOnBehalfOf relation from a performing prov:Agent to some prov:Agent for whom it was performed. For example, :mixing prov:wasAssociatedWith :toddler . :toddler prov:actedOnBehalfOf :mother; prov:qualifiedDelegation [ a prov:Delegation; prov:entity :mother; :foo :bar ].\r\n     */\r\n    Delegation: _NS$p(\"Delegation\"),\r\n    /**\r\n     * An instance of prov:Derivation provides additional descriptions about the binary prov:wasDerivedFrom relation from some derived prov:Entity to another prov:Entity from which it was derived. For example, :chewed_bubble_gum prov:wasDerivedFrom :unwrapped_bubble_gum; prov:qualifiedDerivation [ a prov:Derivation; prov:entity :unwrapped_bubble_gum; :foo :bar ].\r\n     */\r\n    Derivation: _NS$p(\"Derivation\"),\r\n    /**\r\n     * EmptyCollection\r\n     */\r\n    EmptyCollection: _NS$p(\"EmptyCollection\"),\r\n    /**\r\n     * An instance of prov:End provides additional descriptions about the binary prov:wasEndedBy relation from some ended prov:Activity to an prov:Entity that ended it. For example, :ball_game prov:wasEndedBy :buzzer; prov:qualifiedEnd [ a prov:End; prov:entity :buzzer; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ].\r\n     */\r\n    End: _NS$p(\"End\"),\r\n    /**\r\n     * An instance of prov:Generation provides additional descriptions about the binary prov:wasGeneratedBy relation from a generated prov:Entity to the prov:Activity that generated it. For example, :cake prov:wasGeneratedBy :baking; prov:qualifiedGeneration [ a prov:Generation; prov:activity :baking; :foo :bar ].\r\n     */\r\n    Generation: _NS$p(\"Generation\"),\r\n    /**\r\n     * An instance of prov:Invalidation provides additional descriptions about the binary prov:wasInvalidatedBy relation from an invalidated prov:Entity to the prov:Activity that invalidated it. For example, :uncracked_egg prov:wasInvalidatedBy :baking; prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :baking; :foo :bar ].\r\n     */\r\n    Invalidation: _NS$p(\"Invalidation\"),\r\n    /**\r\n     * Location\r\n     */\r\n    Location: _NS$p(\"Location\"),\r\n    /**\r\n     * Organization\r\n     */\r\n    Organization: _NS$p(\"Organization\"),\r\n    /**\r\n     * Person\r\n     */\r\n    Person: _NS$p(\"Person\"),\r\n    /**\r\n     * There exist no prescriptive requirement on the nature of plans, their representation, the actions or steps they consist of, or their intended goals. Since plans may evolve over time, it may become necessary to track their provenance, so plans themselves are entities. Representing the plan explicitly in the provenance can be useful for various tasks: for example, to validate the execution as represented in the provenance record, to manage expectation failures, or to provide explanations.\r\n     */\r\n    Plan: _NS$p(\"Plan\"),\r\n    /**\r\n     * An instance of prov:PrimarySource provides additional descriptions about the binary prov:hadPrimarySource relation from some secondary prov:Entity to an earlier, primary prov:Entity. For example, :blog prov:hadPrimarySource :newsArticle; prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :newsArticle; :foo :bar ] .\r\n     */\r\n    PrimarySource: _NS$p(\"PrimarySource\"),\r\n    /**\r\n     * An instance of prov:Quotation provides additional descriptions about the binary prov:wasQuotedFrom relation from some taken prov:Entity from an earlier, larger prov:Entity. For example, :here_is_looking_at_you_kid prov:wasQuotedFrom :casablanca_script; prov:qualifiedQuotation [ a prov:Quotation; prov:entity :casablanca_script; :foo :bar ].\r\n     */\r\n    Quotation: _NS$p(\"Quotation\"),\r\n    /**\r\n     * An instance of prov:Revision provides additional descriptions about the binary prov:wasRevisionOf relation from some newer prov:Entity to an earlier prov:Entity. For example, :draft_2 prov:wasRevisionOf :draft_1; prov:qualifiedRevision [ a prov:Revision; prov:entity :draft_1; :foo :bar ].\r\n     */\r\n    Revision: _NS$p(\"Revision\"),\r\n    /**\r\n     * Role\r\n     */\r\n    Role: _NS$p(\"Role\"),\r\n    /**\r\n     * SoftwareAgent\r\n     */\r\n    SoftwareAgent: _NS$p(\"SoftwareAgent\"),\r\n    /**\r\n     * An instance of prov:Start provides additional descriptions about the binary prov:wasStartedBy relation from some started prov:Activity to an prov:Entity that started it. For example, :foot_race prov:wasStartedBy :bang; prov:qualifiedStart [ a prov:Start; prov:entity :bang; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ] .\r\n     */\r\n    Start: _NS$p(\"Start\"),\r\n    /**\r\n     * An instance of prov:Usage provides additional descriptions about the binary prov:used relation from some prov:Activity to an prov:Entity that it used. For example, :keynote prov:used :podium; prov:qualifiedUsage [ a prov:Usage; prov:entity :podium; :foo :bar ].\r\n     */\r\n    Usage: _NS$p(\"Usage\"),\r\n    // *******************\r\n    // All the Properties.\r\n    // *******************\r\n    /**\r\n     * Classify prov-o terms into three categories, including 'starting-point', 'qualifed', and 'extended'. This classification is used by the prov-o html document to gently introduce prov-o terms to its users.\r\n     */\r\n    category: _NS$p(\"category\"),\r\n    /**\r\n     * Classify prov-o terms into six components according to prov-dm, including 'agents-responsibility', 'alternate', 'annotations', 'collections', 'derivations', and 'entities-activities'. This classification is used so that readers of prov-o specification can find its correspondence with the prov-dm specification.\r\n     */\r\n    component: _NS$p(\"component\"),\r\n    /**\r\n     * A reference to the principal section of the PROV-CONSTRAINTS document that describes this concept.\r\n     */\r\n    constraints: _NS$p(\"constraints\"),\r\n    /**\r\n     * A definition quoted from PROV-DM or PROV-CONSTRAINTS that describes the concept expressed with this OWL term.\r\n     */\r\n    definition: _NS$p(\"definition\"),\r\n    /**\r\n     * A reference to the principal section of the PROV-DM document that describes this concept.\r\n     */\r\n    dm: _NS$p(\"dm\"),\r\n    /**\r\n     * A reference to the principal section of the PROV-DM document that describes this concept.\r\n     */\r\n    n: _NS$p(\"n\"),\r\n    /**\r\n     * activity\r\n     */\r\n    activity: _NS$p(\"activity\"),\r\n    /**\r\n     * The _optional_ Activity of an Influence, which used, generated, invalidated, or was the responsibility of some Entity. This property is _not_ used by ActivityInfluence (use prov:activity instead).\r\n     */\r\n    hadActivity: _NS$p(\"hadActivity\"),\r\n    /**\r\n     * When the prov-o term does not have a definition drawn from prov-dm, and the prov-o editor provides one.\r\n     */\r\n    editorsDefinition: _NS$p(\"editorsDefinition\"),\r\n    /**\r\n     * agent\r\n     */\r\n    agent: _NS$p(\"agent\"),\r\n    /**\r\n     * Classes and properties used to qualify relationships are annotated with prov:unqualifiedForm to indicate the property used to assert an unqualified provenance relation.\r\n     */\r\n    unqualifiedForm: _NS$p(\"unqualifiedForm\"),\r\n    /**\r\n     * An prov:Agent that had some (unspecified) responsibility for the occurrence of this prov:Activity.\r\n     */\r\n    wasAssociatedWith: _NS$p(\"wasAssociatedWith\"),\r\n    /**\r\n     * Attribution is the ascribing of an entity to an agent.\r\n     */\r\n    wasAttributedTo: _NS$p(\"wasAttributedTo\"),\r\n    /**\r\n     * An activity a2 is dependent on or informed by another activity a1, by way of some unspecified entity that is generated by a1 and used by a2.\r\n     */\r\n    wasInformedBy: _NS$p(\"wasInformedBy\"),\r\n    /**\r\n     * An object property to express the accountability of an agent towards another agent. The subordinate agent acted on behalf of the responsible agent in an actual activity.\r\n     */\r\n    actedOnBehalfOf: _NS$p(\"actedOnBehalfOf\"),\r\n    /**\r\n     * The more specific subproperties of prov:wasDerivedFrom (i.e., prov:wasQuotedFrom, prov:wasRevisionOf, prov:hadPrimarySource) should be used when applicable.\r\n     */\r\n    wasDerivedFrom: _NS$p(\"wasDerivedFrom\"),\r\n    /**\r\n     * End is when an activity is deemed to have ended. An end may refer to an entity, known as trigger, that terminated the activity.\r\n     */\r\n    wasEndedBy: _NS$p(\"wasEndedBy\"),\r\n    /**\r\n     * entity\r\n     */\r\n    entity: _NS$p(\"entity\"),\r\n    /**\r\n     * wasGeneratedBy\r\n     */\r\n    wasGeneratedBy: _NS$p(\"wasGeneratedBy\"),\r\n    /**\r\n     * Because prov:wasInfluencedBy is a broad relation, its more specific subproperties (e.g. prov:wasInformedBy, prov:actedOnBehalfOf, prov:wasEndedBy, etc.) should be used when applicable.\r\n     */\r\n    wasInfluencedBy: _NS$p(\"wasInfluencedBy\"),\r\n    /**\r\n     * wasInvalidatedBy\r\n     */\r\n    wasInvalidatedBy: _NS$p(\"wasInvalidatedBy\"),\r\n    /**\r\n     * The Location of any resource.\r\n     */\r\n    atLocation: _NS$p(\"atLocation\"),\r\n    /**\r\n     * hadPrimarySource\r\n     */\r\n    hadPrimarySource: _NS$p(\"hadPrimarySource\"),\r\n    /**\r\n     * An entity is derived from an original entity by copying, or 'quoting', some or all of it.\r\n     */\r\n    wasQuotedFrom: _NS$p(\"wasQuotedFrom\"),\r\n    /**\r\n     * A revision is a derivation that revises an entity into a revised version.\r\n     */\r\n    wasRevisionOf: _NS$p(\"wasRevisionOf\"),\r\n    /**\r\n     * The _optional_ Role that an Entity assumed in the context of an Activity. For example, :baking prov:used :spoon; prov:qualified [ a prov:Usage; prov:entity :spoon; prov:hadRole roles:mixing_implement ].\r\n     */\r\n    hadRole: _NS$p(\"hadRole\"),\r\n    /**\r\n     * Start is when an activity is deemed to have started. A start may refer to an entity, known as trigger, that initiated the activity.\r\n     */\r\n    wasStartedBy: _NS$p(\"wasStartedBy\"),\r\n    /**\r\n     * A prov:Entity that was used by this prov:Activity. For example, :baking prov:used :spoon, :egg, :oven .\r\n     */\r\n    used: _NS$p(\"used\"),\r\n    /**\r\n     * If this Agent prov:actedOnBehalfOf Agent :ag, then it can qualify how with prov:qualifiedResponsibility [ a prov:Responsibility;  prov:agent :ag; :foo :bar ].\r\n     */\r\n    qualifiedDelegation: _NS$p(\"qualifiedDelegation\"),\r\n    /**\r\n     * PROV-O does not define all property inverses. The directionalities defined in PROV-O should be given preference over those not defined. However, if users wish to name the inverse of a PROV-O property, the local name given by prov:inverse should be used.\r\n     */\r\n    inverse: _NS$p(\"inverse\"),\r\n    /**\r\n     * This annotation property links a subproperty of prov:wasInfluencedBy with the subclass of prov:Influence and the qualifying property that are used to qualify it.\r\n  \n  Example annotation:\r\n  \n      prov:wasGeneratedBy prov:qualifiedForm prov:qualifiedGeneration, prov:Generation .\r\n  \n  Then this unqualified assertion:\r\n  \n      :entity1 prov:wasGeneratedBy :activity1 .\r\n  \n  can be qualified by adding:\r\n  \n     :entity1 prov:qualifiedGeneration :entity1Gen .\r\n     :entity1Gen\r\n         a prov:Generation, prov:Influence;\r\n         prov:activity :activity1;\r\n         :customValue 1337 .\r\n  \n  Note how the value of the unqualified influence (prov:wasGeneratedBy :activity1) is mirrored as the value of the prov:activity (or prov:entity, or prov:agent) property on the influence class.\r\n     */\r\n    qualifiedForm: _NS$p(\"qualifiedForm\"),\r\n    /**\r\n     * Subproperties of prov:influencer are used to cite the object of an unqualified PROV-O triple whose predicate is a subproperty of prov:wasInfluencedBy (e.g. prov:used, prov:wasGeneratedBy). prov:influencer is used much like rdf:object is used.\r\n     */\r\n    influencer: _NS$p(\"influencer\"),\r\n    /**\r\n     * A note by the OWL development team about how this term expresses the PROV-DM concept, or how it should be used in context of semantic web or linked data.\r\n     */\r\n    editorialNote: _NS$p(\"editorialNote\"),\r\n    /**\r\n     * alternateOf\r\n     */\r\n    alternateOf: _NS$p(\"alternateOf\"),\r\n    /**\r\n     * specializationOf\r\n     */\r\n    specializationOf: _NS$p(\"specializationOf\"),\r\n    /**\r\n     *\r\n     */\r\n    aq: _NS$p(\"aq\"),\r\n    /**\r\n     *\r\n     */\r\n    sharesDefinitionWith: _NS$p(\"sharesDefinitionWith\"),\r\n    /**\r\n     * The time at which an InstantaneousEvent occurred, in the form of xsd:dateTime.\r\n     */\r\n    atTime: _NS$p(\"atTime\"),\r\n    /**\r\n     * The time at which an activity ended. See also prov:startedAtTime.\r\n     */\r\n    endedAtTime: _NS$p(\"endedAtTime\"),\r\n    /**\r\n     * The time at which an entity was completely created and is available for use.\r\n     */\r\n    generatedAtTime: _NS$p(\"generatedAtTime\"),\r\n    /**\r\n     * The time at which an entity was invalidated (i.e., no longer usable).\r\n     */\r\n    invalidatedAtTime: _NS$p(\"invalidatedAtTime\"),\r\n    /**\r\n     * The time at which an activity started. See also prov:endedAtTime.\r\n     */\r\n    startedAtTime: _NS$p(\"startedAtTime\"),\r\n    /**\r\n     * generated\r\n     */\r\n    generated: _NS$p(\"generated\"),\r\n    /**\r\n     * influenced\r\n     */\r\n    influenced: _NS$p(\"influenced\"),\r\n    /**\r\n     * The _optional_ Generation involved in an Entity's Derivation.\r\n     */\r\n    hadGeneration: _NS$p(\"hadGeneration\"),\r\n    /**\r\n     * hadMember\r\n     */\r\n    hadMember: _NS$p(\"hadMember\"),\r\n    /**\r\n     * The _optional_ Plan adopted by an Agent in Association with some Activity. Plan specifications are out of the scope of this specification.\r\n     */\r\n    hadPlan: _NS$p(\"hadPlan\"),\r\n    /**\r\n     * If this Entity prov:hadPrimarySource Entity :e, then it can qualify how using prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :e; :foo :bar ].\r\n     */\r\n    qualifiedPrimarySource: _NS$p(\"qualifiedPrimarySource\"),\r\n    /**\r\n     * The _optional_ Usage involved in an Entity's Derivation.\r\n     */\r\n    hadUsage: _NS$p(\"hadUsage\"),\r\n    /**\r\n     * invalidated\r\n     */\r\n    invalidated: _NS$p(\"invalidated\"),\r\n    /**\r\n     * The position that this OWL term should be listed within documentation. The scope of the documentation (e.g., among all terms, among terms within a prov:category, among properties applying to a particular class, etc.) is unspecified.\r\n     */\r\n    order: _NS$p(\"order\"),\r\n    /**\r\n     * If this Activity prov:wasAssociatedWith Agent :ag, then it can qualify the Association using prov:qualifiedAssociation [ a prov:Association;  prov:agent :ag; :foo :bar ].\r\n     */\r\n    qualifiedAssociation: _NS$p(\"qualifiedAssociation\"),\r\n    /**\r\n     * Because prov:qualifiedInfluence is a broad relation, the more specific relations (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be used when applicable.\r\n     */\r\n    qualifiedInfluence: _NS$p(\"qualifiedInfluence\"),\r\n    /**\r\n     * If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was influenced using prov:qualifiedAttribution [ a prov:Attribution;  prov:agent :ag; :foo :bar ].\r\n     */\r\n    qualifiedAttribution: _NS$p(\"qualifiedAttribution\"),\r\n    /**\r\n     * If this Activity prov:wasInformedBy Activity :a, then it can qualify how it was influenced using prov:qualifiedCommunication [ a prov:Communication;  prov:activity :a; :foo :bar ].\r\n     */\r\n    qualifiedCommunication: _NS$p(\"qualifiedCommunication\"),\r\n    /**\r\n     * If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was derived using prov:qualifiedDerivation [ a prov:Derivation;  prov:entity :e; :foo :bar ].\r\n     */\r\n    qualifiedDerivation: _NS$p(\"qualifiedDerivation\"),\r\n    /**\r\n     * If this Activity prov:wasEndedBy Entity :e1, then it can qualify how it was ended using prov:qualifiedEnd [ a prov:End;  prov:entity :e1; :foo :bar ].\r\n     */\r\n    qualifiedEnd: _NS$p(\"qualifiedEnd\"),\r\n    /**\r\n     * If this Activity prov:generated Entity :e, then it can qualify how it performed the Generation using prov:qualifiedGeneration [ a prov:Generation;  prov:entity :e; :foo :bar ].\r\n     */\r\n    qualifiedGeneration: _NS$p(\"qualifiedGeneration\"),\r\n    /**\r\n     * If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation;  prov:activity :a; :foo :bar ].\r\n     */\r\n    qualifiedInvalidation: _NS$p(\"qualifiedInvalidation\"),\r\n    /**\r\n     * If this Entity prov:wasQuotedFrom Entity :e, then it can qualify how using prov:qualifiedQuotation [ a prov:Quotation;  prov:entity :e; :foo :bar ].\r\n     */\r\n    qualifiedQuotation: _NS$p(\"qualifiedQuotation\"),\r\n    /**\r\n     * If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was revised using prov:qualifiedRevision [ a prov:Revision;  prov:entity :e; :foo :bar ].\r\n     */\r\n    qualifiedRevision: _NS$p(\"qualifiedRevision\"),\r\n    /**\r\n     * If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was started using prov:qualifiedStart [ a prov:Start;  prov:entity :e1; :foo :bar ].\r\n     */\r\n    qualifiedStart: _NS$p(\"qualifiedStart\"),\r\n    /**\r\n     * If this Activity prov:used Entity :e, then it can qualify how it used it using prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ].\r\n     */\r\n    qualifiedUsage: _NS$p(\"qualifiedUsage\"),\r\n    /**\r\n     *\r\n     */\r\n    todo: _NS$p(\"todo\"),\r\n    /**\r\n     * value\r\n     */\r\n    value: _NS$p(\"value\"),\r\n};\n\nexport { ACL, AS, DCTERMS, FOAF, HTTP, HTTPH, ICAL, LDP, OLO, OWL, POSIX, PROV_O, QB, RDF, RDFS, RDF_INRUPT_EXT, RLOG, SCHEMA_INRUPT_EXT, SDMX_DIMENSION, SHEX, SKOS, UI, VANN, VCARD, VCARD_INRUPT_EXT, XSD };\n","function DefaultGraph () {\n  this.value = ''\n}\n\nDefaultGraph.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\n\nmodule.exports = DefaultGraph\n","var DefaultGraph = require('./default-graph')\n\nfunction Quad (subject, predicate, object, graph) {\n  this.subject = subject\n  this.predicate = predicate\n  this.object = object\n\n  if (graph) {\n    this.graph = graph\n  } else {\n    this.graph = new DefaultGraph()\n  }\n}\n\nQuad.prototype.equals = function (other) {\n  // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n  return !!other && (other.termType === 'Quad' || !other.termType) &&\n    other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n    other.object.equals(this.object) && other.graph.equals(this.graph)\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","function isString (s) {\n  return typeof s === 'string' || s instanceof String\n}\n\nconst xsdString = 'http://www.w3.org/2001/XMLSchema#string'\n\nfunction termToId (term) {\n  if (typeof term === 'string') {\n    return term\n  }\n\n  if (!term) {\n    return ''\n  }\n\n  if (typeof term.id !== 'undefined' && term.termType !== 'Quad') {\n    return term.id\n  }\n\n  let subject, predicate, object, graph\n\n  // Term instantiated with another library\n  switch (term.termType) {\n    case 'NamedNode':\n      return term.value\n\n    case 'BlankNode':\n      return `_:${term.value}`\n\n    case 'Variable':\n      return `?${term.value}`\n\n    case 'DefaultGraph':\n      return ''\n\n    case 'Literal':\n      if (term.language) {\n        return `\"${term.value}\"@${term.language}`\n      }\n\n      return `\"${term.value}\"${term.datatype && term.datatype.value !== xsdString ? `^^${term.datatype.value}` : ''}`\n\n    case 'Quad':\n      // To identify RDF* quad components, we escape quotes by doubling them.\n      // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n      subject = escapeQuotes(termToId(term.subject))\n      predicate = escapeQuotes(termToId(term.predicate))\n      object = escapeQuotes(termToId(term.object))\n      graph = term.graph.termType === 'DefaultGraph' ? '' : ` ${termToId(term.graph)}`\n\n      return `<<${subject} ${predicate} ${object}${graph}>>`\n\n    default:\n      throw new Error(`Unexpected termType: ${term.termType}`)\n  }\n}\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/\n\nfunction escapeQuotes (id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`)\n}\n\nclass DatasetCore {\n  constructor (quads) {\n    // The number of quads is initially zero\n    this._size = 0\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null)\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0\n    this._ids = Object.create(null)\n    this._ids['><'] = 0 // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null) // inverse of `_ids`\n\n    this._quads = new Map()\n\n    // Add quads if passed\n    if (quads) {\n      for (const quad of quads) {\n        this.add(quad)\n      }\n    }\n  }\n\n  get size () {\n    // Return the quad count if if was cached\n    let size = this._size\n\n    if (size !== null) {\n      return size\n    }\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0\n    const graphs = this._graphs\n    let subjects, subject\n\n    for (const graphKey in graphs) {\n      for (const subjectKey in (subjects = graphs[graphKey].subjects)) {\n        for (const predicateKey in (subject = subjects[subjectKey])) {\n          size += Object.keys(subject[predicateKey]).length\n        }\n      }\n    }\n\n    this._size = size\n\n    return this._size\n  }\n\n  add (quad) {\n    // Convert terms to internal string representation\n    let subject = termToId(quad.subject)\n    let predicate = termToId(quad.predicate)\n    let object = termToId(quad.object)\n    const graph = termToId(quad.graph)\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph]\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} }\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem)\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids\n    const entities = this._entities\n    subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id)\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id)\n    object = ids[object] || (ids[entities[++this._id] = object] = this._id)\n\n    this._addToIndex(graphItem.subjects, subject, predicate, object)\n    this._addToIndex(graphItem.predicates, predicate, object, subject)\n    this._addToIndex(graphItem.objects, object, subject, predicate)\n\n    this._setQuad(subject, predicate, object, graph, quad)\n\n    // The cached quad count is now invalid\n    this._size = null\n\n    return this\n  }\n\n  delete (quad) {\n    // Convert terms to internal string representation\n    let subject = termToId(quad.subject)\n    let predicate = termToId(quad.predicate)\n    let object = termToId(quad.object)\n    const graph = termToId(quad.graph)\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids\n    const graphs = this._graphs\n    let graphItem, subjects, predicates\n\n    if (!(subject = ids[subject]) || !(predicate = ids[predicate]) ||\n      !(object = ids[object]) || !(graphItem = graphs[graph]) ||\n      !(subjects = graphItem.subjects[subject]) ||\n      !(predicates = subjects[predicate]) ||\n      !(object in predicates)\n    ) {\n      return this\n    }\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects, subject, predicate, object)\n    this._removeFromIndex(graphItem.predicates, predicate, object, subject)\n    this._removeFromIndex(graphItem.objects, object, subject, predicate)\n\n    if (this._size !== null) {\n      this._size--\n    }\n\n    this._deleteQuad(subject, predicate, object, graph)\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) { // eslint-disable-line no-unreachable-loop\n      return this\n    }\n\n    delete graphs[graph]\n\n    return this\n  }\n\n  has (quad) {\n    // Convert terms to internal string representation\n    const subject = termToId(quad.subject)\n    const predicate = termToId(quad.predicate)\n    const object = termToId(quad.object)\n    const graph = termToId(quad.graph)\n\n    const graphItem = this._graphs[graph]\n\n    if (!graphItem) {\n      return false\n    }\n\n    const ids = this._ids\n    let subjectId, predicateId, objectId\n\n    // Translate IRIs to internal index keys.\n    if (\n      (isString(subject) && !(subjectId = ids[subject])) ||\n      (isString(predicate) && !(predicateId = ids[predicate])) ||\n      (isString(object) && !(objectId = ids[object]))\n    ) {\n      return 0\n    }\n\n    return this._countInIndex(graphItem.objects, objectId, subjectId, predicateId) === 1\n  }\n\n  match (subject, predicate, object, graph) {\n    return this._createDataset(this._match(subject, predicate, object, graph))\n  }\n\n  [Symbol.iterator] () {\n    return this._match()[Symbol.iterator]()\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex (index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {})\n    const index2 = index1[key1] || (index1[key1] = {})\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2\n\n    if (!existed) {\n      index2[key2] = null\n    }\n\n    return !existed\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex (index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0]\n    const index2 = index1[key1]\n    delete index2[key2]\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) { // eslint-disable-line no-unreachable-loop\n      return\n    }\n\n    delete index1[key1]\n\n    for (const key in index1) { // eslint-disable-line no-unreachable-loop\n      return\n    }\n\n    delete index0[key0]\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex (index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) {\n      (tmp = index0, index0 = {})[key0] = tmp[key0]\n    }\n\n    for (const value0 in index0) {\n      index1 = index0[value0]\n\n      if (index1) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) {\n          (tmp = index1, index1 = {})[key1] = tmp[key1]\n        }\n\n        for (const value1 in index1) {\n          index2 = index1[value1]\n\n          if (index2) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2)\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = {\n                [name0]: value0,\n                [name1]: value1,\n                [name2]: values[l]\n              }\n\n              const quad = this._getQuad(parts.subject, parts.predicate, parts.object, graph)\n\n              if (array) {\n                array.push(quad)\n              } else if (callback(quad)) {\n                return true\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return array\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex (index0, key0, key1, key2) {\n    let count = 0\n    let tmp, index1, index2\n\n    // If a key is specified, count only that part of index 0\n    if (key0) {\n      (tmp = index0, index0 = {})[key0] = tmp[key0]\n    }\n\n    for (const value0 in index0) {\n      index1 = index0[value0]\n\n      if (index1) {\n        // If a key is specified, count only that part of index 1\n        if (key1) {\n          (tmp = index1, index1 = {})[key1] = tmp[key1]\n        }\n\n        for (const value1 in index1) {\n          index2 = index1[value1]\n\n          if (index2) {\n            if (key2) {\n              // If a key is specified, count the quad if it exists\n              (key2 in index2) && count++\n            } else {\n              // Otherwise, count all quads\n              count += Object.keys(index2).length\n            }\n          }\n        }\n      }\n    }\n\n    return count\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs (graph) {\n    if (!isString(graph)) {\n      return this._graphs\n    }\n\n    return {\n      [graph]: this._graphs[graph]\n    }\n  }\n\n  _match (subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject)\n    predicate = predicate && termToId(predicate)\n    object = object && termToId(object)\n    graph = graph && termToId(graph)\n\n    const quads = []\n    const graphs = this._getGraphs(graph)\n    const ids = this._ids\n    let content, subjectId, predicateId, objectId\n\n    // Translate IRIs to internal index keys.\n    if (\n      (isString(subject) && !(subjectId = ids[subject])) ||\n      (isString(predicate) && !(predicateId = ids[predicate])) ||\n      (isString(object) && !(objectId = ids[object]))\n    ) {\n      return quads\n    }\n\n    for (const graphId in graphs) {\n      content = graphs[graphId]\n\n      // Only if the specified graph contains triples, there can be results\n      if (content) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId, null, quads)\n          } else {\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId, null, quads)\n          }\n        } else if (predicateId) {\n          // if only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId, null, quads)\n        } else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId, null, quads)\n        } else {\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId, null, quads)\n        }\n      }\n    }\n\n    return quads\n  }\n\n  _getQuad (subjectId, predicateId, objectId, graphId) {\n    return this._quads.get(this._toId(subjectId, predicateId, objectId, graphId))\n  }\n\n  _setQuad (subjectId, predicateId, objectId, graphId, quad) {\n    this._quads.set(this._toId(subjectId, predicateId, objectId, graphId), quad)\n  }\n\n  _deleteQuad (subjectId, predicateId, objectId, graphId) {\n    this._quads.delete(this._toId(subjectId, predicateId, objectId, graphId))\n  }\n\n  _createDataset (quads) {\n    return new this.constructor(quads)\n  }\n\n  _toId (subjectId, predicateId, objectId, graphId) {\n    return `${subjectId}:${predicateId}:${objectId}:${graphId}`\n  }\n}\n\nmodule.exports = DatasetCore\n"],"sourceRoot":""}