{"version":3,"sources":["webpack:///./node_modules/core-js/modules/web.dom-collections.for-each.js","webpack:///./node_modules/core-js/internals/array-for-each.js","webpack:///./src/components/solid/AclCheck.vue?fb20","webpack:///src/components/solid/AclCheck.vue","webpack:///./src/components/solid/AclCheck.vue?2b63","webpack:///./src/components/solid/AclCheck.vue"],"names":["global","DOMIterables","forEach","createNonEnumerableProperty","COLLECTION_NAME","Collection","CollectionPrototype","prototype","error","$forEach","arrayMethodIsStrict","STRICT_METHOD","module","exports","callbackfn","this","arguments","length","undefined","render","_vm","_h","$createElement","_c","_self","_v","_s","path","acl","status","attrs","color","message","webId","aclObject","_l","aclAuth","i","key","Array","isArray","Object","entries","value","k","split","mode","Read","Append","Write","Control","access","accessTo","_e","default","on","setAcl","staticRenderFns","name","props","data","methods","watch","init","component"],"mappings":"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","file":"js/chunk-6855f128.13af52de.js","sourcesContent":["var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar forEach = require('../internals/array-for-each');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  // some Chrome versions have non-configurable methods on DOMTokenList\n  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {\n    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);\n  } catch (error) {\n    CollectionPrototype.forEach = forEach;\n  }\n}\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.foreach\nmodule.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n// eslint-disable-next-line es/no-array-prototype-foreach -- safe\n} : [].forEach;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h5',[_vm._v(\"Acl for \"+_vm._s(_vm.path)+\" : \")]),(_vm.acl.status != 'OK')?_c('div',[_c('h5',[_vm._v(\"ACL / Authorization verification : \")]),_c('b-badge',{attrs:{\"variant\":_vm.acl.color}},[_vm._v(_vm._s(_vm.acl.status))]),_c('b-badge',{attrs:{\"variant\":_vm.acl.color}},[_vm._v(_vm._s(_vm.acl.message))]),_c('p',[_vm._v(\" To allow other Authenticated Users to send you inbox message, you have to set correct Authorizations for \"),_c('b-badge',{attrs:{\"variant\":\"warning\"}},[_vm._v(_vm._s(_vm.path))]),_vm._v(\" as i'm not sure the are good : \"),_c('ul',[_c('li',[_c('b-badge',{attrs:{\"variant\":\"warning\"}},[_vm._v(_vm._s(_vm.webId))]),_vm._v(\" with \"),_c('b-badge',{attrs:{\"variant\":\"warning\"}},[_vm._v(\"CONTROL\")])],1),_c('li',[_vm._v(\" AuthenticatedAgent as \\\"Poster\\\" for the folder & \\\"Submitters\\\" for it's content \")])]),_c('br'),_vm._v(\" \"+_vm._s(_vm.acl.aclObject)+\" \")],1),_c('hr'),_c('p',[_vm._v(\" Acl for \"),_c('b-badge',{attrs:{\"variant\":\"warning\"}},[_vm._v(_vm._s(_vm.path))]),_c('b-list-group',_vm._l((_vm.acl.aclObject),function(aclAuth,i){return _c('b-list-group-item',{key:i},[(aclAuth)?_c('div',[_vm._v(\" aclAuth is ARRAY ? \"+_vm._s(Array.isArray(aclAuth))+\" \"),_vm._l((Object.entries(aclAuth)),function(value,k){return _c('div',{key:k},[(value[1].mode)?_c('div',[_c('h5',[_vm._v(_vm._s(value[0].split('&')[0])+\" : \"),_c('b-badge',{attrs:{\"variant\":\"warning\"}},[_vm._v(_vm._s(value[0].split('&')[1]))])],1),_c('b',[_vm._v(\"Can :\")]),_c('b-badge',{attrs:{\"variant\":value[1].mode.Read == 1? 'success': 'danger'}},[_vm._v(\"READ\")]),_c('b-badge',{attrs:{\"variant\":value[1].mode.Append == 1? 'success': 'danger'}},[_vm._v(\"APPEND\")]),_c('b-badge',{attrs:{\"variant\":value[1].mode.Write == 1? 'success': 'danger'}},[_vm._v(\"WRITE\")]),_c('b-badge',{attrs:{\"variant\":value[1].mode.Control == 1? 'success': 'danger'}},[_vm._v(\"CONTROL\")]),_c('br'),_c('b',[_vm._v(\"What ?\")]),(value[1].access.accessTo == 1)?_c('b-badge',[_vm._v(_vm._s(_vm.path))]):_vm._e(),(value[1].access.default == 1)?_c('div',[_vm._v(\"content of \"),_c('b-badge',[_vm._v(\" \"+_vm._s(_vm.path))])],1):_vm._e(),_c('br'),_c('br')],1):_c('div',[_vm._v(\" \"+_vm._s(value[1])+\" should have mode \")])])})],2):_vm._e()])}),1)],1),_vm._v(\" You can do it manually at \"),_c('a',{attrs:{\"href\":_vm.path,\"target\":\"_blank\"}},[_vm._v(_vm._s(_vm.path))]),_vm._v(\" or use this button. \"),_c('br'),(_vm.acl.status == 'KO')?_c('b-button',{on:{\"click\":_vm.setAcl}},[_vm._v(\"Set Authorization\")]):_vm._e()],1):_c('div',[_vm._v(\" ACL OK \"+_vm._s(_vm.acl)+\" \")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <h5>Acl for {{ path }} : </h5>\r\n    <div v-if=\"acl.status != 'OK'\">\r\n      <h5>ACL / Authorization verification : </h5>\r\n\r\n      <b-badge :variant=\"acl.color\">{{acl.status}}</b-badge>\r\n      <b-badge :variant=\"acl.color\">{{acl.message}}</b-badge>\r\n\r\n\r\n      <p>\r\n        To allow other Authenticated Users to send you inbox message, you have to set correct Authorizations for <b-badge variant=\"warning\">{{ path }}</b-badge> as i'm not sure the are good :\r\n        <ul>\r\n          <li>\r\n            <b-badge variant=\"warning\">{{webId}}</b-badge> with <b-badge variant=\"warning\">CONTROL</b-badge>\r\n          </li>\r\n          <li>\r\n            AuthenticatedAgent as \"Poster\" for the folder & \"Submitters\" for it's content\r\n          </li>\r\n        </ul>\r\n        <br>\r\n\r\n        {{ acl.aclObject}}\r\n        <hr>\r\n        <p>\r\n\r\n\r\n\r\n          Acl for <b-badge variant=\"warning\">{{path}}</b-badge>\r\n          <b-list-group>\r\n            <b-list-group-item v-for=\"(aclAuth,i) in acl.aclObject\" :key=\"i\">\r\n              <div v-if=\"aclAuth\">\r\n                aclAuth is ARRAY ?   {{ Array.isArray(aclAuth)}}\r\n                <div v-for=\"(value, k) in Object.entries(aclAuth)\" :key=\"k\">\r\n                  <div v-if=\"value[1].mode\">\r\n                    <h5>{{value[0].split('&')[0]}} : <b-badge variant=\"warning\">{{value[0].split('&')[1]}}</b-badge></h5>\r\n                    <b>Can :</b>\r\n                    <b-badge :variant=\"value[1].mode.Read == 1? 'success': 'danger'\">READ</b-badge>\r\n                    <b-badge :variant=\"value[1].mode.Append == 1? 'success': 'danger'\">APPEND</b-badge>\r\n                    <b-badge :variant=\"value[1].mode.Write == 1? 'success': 'danger'\">WRITE</b-badge>\r\n                    <b-badge :variant=\"value[1].mode.Control == 1? 'success': 'danger'\">CONTROL</b-badge>\r\n\r\n                    <!-- <b-badge variant=\"warning\">  APPEND : {{value[1].mode.Append}}</b-badge>\r\n                    <b-badge variant=\"warning\">  WRITE : {{value[1].mode.Write}}</b-badge>\r\n                    <b-badge variant=\"warning\">  CONTROL : {{value[1].mode.Control}}</b-badge> -->\r\n                    <!-- <div v-for=\"(mode, m) in Object.entries(value[1].mode)\" :key=\"m\">\r\n                    <b-badge variant=\"warning\">{{mode}}</b-badge>\r\n\r\n                  </div> -->\r\n\r\n                  <br>\r\n                  <b>What ?</b>\r\n                  <!-- {{value[1].access}} -->\r\n                  <b-badge v-if=\"value[1].access.accessTo == 1\">{{path}}</b-badge>\r\n                  <div  v-if=\"value[1].access.default == 1\">content of\r\n                    <b-badge> {{ path }}</b-badge>\r\n                  </div>\r\n\r\n                  <br>\r\n                  <!-- <b>And:</b> {{value[1].key}}<br> -->\r\n                  <br>\r\n                </div>\r\n                <div v-else>\r\n                  {{ value[1]}} should have mode\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </b-list-group-item>\r\n        </b-list-group>\r\n\r\n\r\n        <!-- <b-table striped hover responsive  :items=\"acl.aclObject\">\r\n        <template #cell()=\"data\">\r\n        <b>Agent:</b> {{data.item}} : {{data.item}}<br>\r\n        <b>Mode :</b> {{data.item.mode}}<br>\r\n        <b>Access:</b> {{data.item.access}}\r\n      </template>\r\n    </b-table> -->\r\n\r\n\r\n  </p>\r\n\r\n\r\n  <!-- <a href=\"https://github.com/jeff-zucker/solid-file-client/issues/189\" target=\"_blank\">\r\n  More info about why You must change authorization on this folder</a>\r\n</p> -->\r\nYou can do it manually at <a :href=\"path\" target=\"_blank\">{{ path }}</a> or use this button. <br>\r\n<b-button @click=\"setAcl\" v-if=\"acl.status == 'KO'\">Set Authorization</b-button>\r\n<!-- <small>\r\n{{ acl }}\r\n</small> -->\r\n</div>\r\n<div v-else>\r\n  ACL OK\r\n  {{ acl }}\r\n\r\n</div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport auth from 'solid-auth-client';\r\nimport FC from 'solid-file-client'\r\nconst fc = new FC( auth )\r\n\r\n// import {\r\n//   getPublicAccess,\r\n// } from \"@inrupt/solid-client/access/universal\";\r\n// import * as jsonld from 'jsonld';\r\n//import * as ttl2jsonld from '@frogcat/ttl2jsonld';\r\n\r\n\r\nexport default {\r\n  name: \"AclCheck\",\r\n  props: ['path', 'authorizations', 'webId'],\r\n  data() {\r\n    return {\r\n      acl: {status: \"init\", message: \"I will check authorizations\", color: \"danger\"}\r\n    }\r\n  },\r\n  async created(){\r\n    this.init()\r\n  },\r\n  methods: {\r\n    // async init(){\r\n    //   if (this.webId != null && this.path.length > 0){\r\n    //     getPublicAccess(this.path).then(access => {\r\n    //       // => access is an object like\r\n    //       //    {\r\n    //       //       read: true, append: false, write: false,\r\n    //       //       controlRead: false, controlWrite: false\r\n    //       //    }\r\n    //       //    or null if the ACL is not accessible to the current user.\r\n    //       if (access === null) {\r\n    //         console.log(\"Could not load access details for this Resource.\")\r\n    //       } else {\r\n    //         console.log(\r\n    //           \"Can everyone read this Resource:\",\r\n    //           access.read,\r\n    //         );\r\n    //         console.log(\r\n    //           \"Can everyone add data to this Resource:\",\r\n    //           access.append,\r\n    //         );\r\n    //         console.log(\r\n    //           \"Can everyone change data in this Resource:\",\r\n    //           access.write,\r\n    //         );\r\n    //         console.log(\r\n    //           \"Can everyone see and change who has what access to this Resource:\",\r\n    //           access.controlRead && access.controlWrite,\r\n    //         );\r\n    //       }\r\n    //     });\r\n    //   }\r\n    // },\r\n    // async init1(){\r\n    //   if (this.webId != null && this.path != undefined && this.path.length > 0){\r\n    //     let folder = await fc.readFolder( this.path, {links:\"include\"} )\r\n    //     console.log(folder)\r\n    //     if(folder.links.acl!= undefined){\r\n    //       this.acl.message = \"ACL FOUND\"\r\n    //     //  this.loadJsonld(folder.links.acl)\r\n    //     }else{\r\n    //       //console.log(\"NO ACL FOUND\")\r\n    //       this.acl.status = \"KO\"\r\n    //       this.acl.message = \"NO ACL FOUND\"\r\n    //     }\r\n    //\r\n    //   }\r\n    // },\r\n    // async loadJsonld(s){\r\n    //   console.log(s)\r\n    //   let documentLoaderType = 'xhr'\r\n    //   await jsonld.useDocumentLoader(documentLoaderType, {withCredentials : true});\r\n    //   let doc = await jsonld.documentLoader(s, function(err) {\r\n    //     if(err) {\r\n    //       alert(err)\r\n    //     }\r\n    //   })\r\n    //   doc.jsonld = JSON.parse(doc.document)\r\n    //   delete doc.document\r\n    //   console.log(doc)\r\n    //   //await this.ldpToGraph(doc)\r\n    // },\r\n    async init(){\r\n      if (this.webId != null && this.path.length > 0){\r\n        this.acl.status = \"imagining a annonce folder\"\r\n        console.log(this.webId, this.path)\r\n\r\n        if( !(await fc.itemExists(this.path)) ) {\r\n          this.acl.status = \"creating folder\"\r\n          await fc.createFolder(this.path) // only create if it doesn't already exist\r\n        }\r\n         await this.checkAcl(\"first run\")\r\n        // let folder = await fc.readFolder( this.path, {links:\"include\"} )\r\n        // console.log(folder)\r\n        // if(folder.links.acl!= undefined){\r\n        //   this.acl.message = \"ACL FOUND\"\r\n        //   let url = folder.links.acl\r\n        //   //    let url = \"https://spoggy-test9.solidcommunity.net/public/.acl\"\r\n        //   let aclContent = await fc.readFile(url)\r\n        //   const jsonld = ttl2jsonld.parse(aclContent);\r\n        //   console.log(jsonld)\r\n        //   console.log(JSON.stringify(jsonld,null,2));\r\n        //   console.log(jsonld['@graph'])\r\n        //   jsonld['@graph'].forEach(auth => {\r\n        //     console.log(auth)\r\n        //   });\r\n\r\n          //  this.loadJsonld(folder.links.acl)\r\n        }else{\r\n          //console.log(\"NO ACL FOUND\")\r\n          this.acl.status = \"KO\"\r\n          this.acl.message = \"NO ACL FOUND\"\r\n        }\r\n\r\n    //  }\r\n    },\r\n    async checkAcl(step){\r\n      // create inbox annonce folder if not exist\r\n      this.acl.status = \"checking if folder exist\"\r\n\r\n      // check aclObject\r\n      this.acl.status = \"cheching authorizations\"\r\n      this.acl.aclObject = await fc.aclUrlParser(this.path)\r\n      console.log(step,\"aclObject on \",this.path,JSON.stringify(this.acl.aclObject, undefined,2))\r\n      // create Content from aclObject\r\n      this.acl.aclContent = await fc.acl.createContent(this.path, this.acl.aclObject/*, options*/)\r\n      console.log(step,\"aclcontent on \",this.path, this.acl.aclContent)\r\n      console.log(step,\"aclon \",this.path, this.acl)\r\n      // say they are KO for the moment as i can't verify see issue : https://github.com/jeff-zucker/solid-file-client/issues/189#issuecomment-812887070\r\n      this.acl.status = \"KO\"\r\n      console.log(this.acl.aclObject)\r\n      this.acl.aclObject.forEach((aclAuth) => {\r\n        console.log(aclAuth)\r\n      });\r\n\r\n    },\r\n\r\n    async setAcl(){\r\n      // according to recent solid-file-client changes : https://github.com/jeff-zucker/solid-file-client/issues/189#issuecomment-808966875\r\n      try{\r\n        this.acl.status = \"setting authorizations\"\r\n        let   aclUsers1 = await fc.acl.addUserMode({}, [{ agent: this.webId }], ['Read', 'Write', 'Control'], ['accessTo', 'default'])\r\n        aclUsers1 = await fc.acl.addUserMode(aclUsers1, [{ agentClass: 'AuthenticatedAgent' }], ['Append'], ['default'])\r\n\r\n        const aclUsers2 = await fc.acl.addUserMode({}, [{ agentClass: 'AuthenticatedAgent' }], ['Append', 'Read'], ['accessTo'])\r\n\r\n        const aclUsers = [aclUsers1, aclUsers2]\r\n\r\n        const aclContentNew = await fc.acl.createContent(this.path, aclUsers)\r\n        console.log('build an aclContent ' + aclContentNew)\r\n\r\n        const { acl: aclUrl } = await fc.getItemLinks(this.path, { links: 'include_possible'})\r\n        //    const links = await fc.getItemLinks(inboxAnnonce, { links: 'include_possible'})\r\n\r\n        //  console.log(links)\r\n        let result = await fc.putFile(aclUrl, aclContentNew, 'text/turtle')\r\n        console.log(\"result\",result)\r\n        //this.acl.status = \"OK\"\r\n        await this.checkAcl(\"after update\")\r\n      }catch(e){\r\n        this.acl.status = \"ERROR : \"+e\r\n        alert(e)\r\n\r\n      }\r\n\r\n\r\n\r\n      // @prefix : <#>.\r\n      // @prefix acl: <http://www.w3.org/ns/auth/acl#>.\r\n      // @prefix foaf: <http://xmlns.com/foaf/0.1/>.\r\n      // @prefix target: <./>.\r\n      //\r\n      // :ReadAppend\r\n      //     a acl:Authorization;\r\n      //     acl:accessTo target:;\r\n      //     acl:agentClass acl:AuthenticatedAgent;\r\n      //     acl:mode acl:Read, acl:Append.\r\n      //\r\n      // :ReadWriteControl\r\n      //     a acl:Authorization;\r\n      //     acl:accessTo target:;\r\n      //     acl:default target:;\r\n      //     acl:agent </profile/card#me>;\r\n      //     acl:agent <https://bourgeoa.solidcommunity.net/profile/card#me>;\r\n      //     acl:mode acl:Read, acl:Write, acl:Control.\r\n\r\n      //       @prefix : <#>.\r\n      // @prefix acl: <http://www.w3.org/ns/auth/acl#>.\r\n      // @prefix foaf: <http://xmlns.com/foaf/0.1/>.\r\n      // @prefix target: <./>.\r\n      //\r\n      // :ReadAppend\r\n      //     a acl:Authorization;\r\n      //     acl:accessTo target:;\r\n      //     acl:agentClass acl:AuthenticatedAgent;\r\n      //     acl:mode acl:Read, acl:Append.\r\n      //\r\n      // :ReadWriteControl\r\n      //     a acl:Authorization;\r\n      //     acl:accessTo target:;\r\n      //     acl:agent </profile/card#me>;\r\n      //     acl:mode acl:Read, acl:Write, acl:Control.\r\n\r\n\r\n      // if (this.webId != null){\r\n      //   let inboxFolder = await ldflex.data.from(this.webId)[this.webId]['http://www.w3.org/ns/ldp#inbox']\r\n      //   let inboxAnnonce = `${inboxFolder}`+\"annonces/\"\r\n      //   if( !(await fc.itemExists(inboxAnnonce)) ) {\r\n      //     await fc.createFolder(inboxAnnonce) // only create if it doesn't already exist\r\n      //   }\r\n      //\r\n      //   let aclObject = await fc.aclUrlParser(inboxAnnonce)\r\n      //   console.log(\"inherit acl\",aclObject)\r\n      //   let aclContent = await fc.acl.createContent(inboxAnnonce, aclObject/*, options*/)\r\n      //   console.log(aclContent)\r\n      //\r\n      //   // add an other rule\r\n      //   let   aclUsers = await fc.acl.addUserMode({}, [{ agent: this.webId }], ['Read', 'Write', 'Control'], ['accessTo', 'default'])\r\n      //   aclUsers = await fc.acl.addUserMode(aclUsers, [{ agentClass: 'AuthenticatedAgent' }], ['Append'], ['default'])\r\n      //   aclUsers = await fc.acl.addUserMode(aclUsers, [{ agentClass: 'Agent' }], ['Append', 'Read'], ['accessTo'])\r\n      //\r\n      //   //      aclUsers = await fc.acl.addUserMode(aclUsers, [{ agent: 'https://bourgeoa.solidcommunity.net/profile/card#me' }], ['Read', 'Write', 'Control'], ['accessTo', 'default'])\r\n      //\r\n      //\r\n      //   //  let aclUsers = await fc.acl.addUserMode({}, [{ agentClass: 'AuthenticatedAgent'}], ['Read', 'Write'])\r\n      //   const aclContentNew = await fc.acl.createContent(inboxAnnonce, aclUsers)\r\n      //   console.log('build an aclContent ' + aclContentNew)\r\n      //\r\n      //   const { acl: aclUrl } = await fc.getItemLinks(inboxAnnonce, { links: 'include_possible'})\r\n      //   //    const links = await fc.getItemLinks(inboxAnnonce, { links: 'include_possible'})\r\n      //\r\n      //   //  console.log(links)\r\n      //   let result = await fc.putFile(aclUrl, aclContentNew, 'text/turtle')\r\n      //   console.log(\"result\",result)\r\n\r\n    },\r\n  },\r\n  watch:{\r\n    webId(){\r\n      this.init()\r\n    },\r\n    path(){\r\n      this.init()\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AclCheck.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AclCheck.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AclCheck.vue?vue&type=template&id=644b1e83&\"\nimport script from \"./AclCheck.vue?vue&type=script&lang=js&\"\nexport * from \"./AclCheck.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}