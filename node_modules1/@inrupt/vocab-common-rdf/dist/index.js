'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var BlankNode_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlankNode = void 0;
/**
 * A term that represents an RDF blank node with a label.
 */
class BlankNode {
    constructor(value) {
        this.termType = 'BlankNode';
        this.value = value;
    }
    equals(other) {
        return !!other && other.termType === 'BlankNode' && other.value === this.value;
    }
}
exports.BlankNode = BlankNode;

});

var DefaultGraph_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultGraph = void 0;
/**
 * A singleton term instance that represents the default graph.
 * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.
 */
class DefaultGraph {
    constructor() {
        this.termType = 'DefaultGraph';
        this.value = '';
        // Private constructor
    }
    equals(other) {
        return !!other && other.termType === 'DefaultGraph';
    }
}
exports.DefaultGraph = DefaultGraph;
DefaultGraph.INSTANCE = new DefaultGraph();

});

var NamedNode_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedNode = void 0;
/**
 * A term that contains an IRI.
 */
class NamedNode {
    constructor(value) {
        this.termType = 'NamedNode';
        this.value = value;
    }
    equals(other) {
        return !!other && other.termType === 'NamedNode' && other.value === this.value;
    }
}
exports.NamedNode = NamedNode;

});

var Literal_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.Literal = void 0;

/**
 * A term that represents an RDF literal, containing a string with an optional language tag or datatype.
 */
class Literal {
    constructor(value, languageOrDatatype) {
        this.termType = 'Literal';
        this.value = value;
        if (typeof languageOrDatatype === 'string') {
            this.language = languageOrDatatype;
            this.datatype = Literal.RDF_LANGUAGE_STRING;
        }
        else if (languageOrDatatype) {
            this.language = '';
            this.datatype = languageOrDatatype;
        }
        else {
            this.language = '';
            this.datatype = Literal.XSD_STRING;
        }
    }
    equals(other) {
        return !!other && other.termType === 'Literal' && other.value === this.value &&
            other.language === this.language && other.datatype.equals(this.datatype);
    }
}
exports.Literal = Literal;
Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');
Literal.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');

});

var Quad_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.Quad = void 0;
/**
 * An instance of DefaultGraph represents the default graph.
 * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.
 */
class Quad {
    constructor(subject, predicate, object, graph) {
        this.termType = 'Quad';
        this.value = '';
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph;
    }
    equals(other) {
        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
        return !!other && (other.termType === 'Quad' || !other.termType) &&
            this.subject.equals(other.subject) &&
            this.predicate.equals(other.predicate) &&
            this.object.equals(other.object) &&
            this.graph.equals(other.graph);
    }
}
exports.Quad = Quad;

});

var Variable_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.Variable = void 0;
/**
 * A term that represents a variable.
 */
class Variable {
    constructor(value) {
        this.termType = 'Variable';
        this.value = value;
    }
    equals(other) {
        return !!other && other.termType === 'Variable' && other.value === this.value;
    }
}
exports.Variable = Variable;

});

var DataFactory_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataFactory = void 0;






let dataFactoryCounter = 0;
/**
 * A factory for instantiating RDF terms and quads.
 */
class DataFactory {
    constructor(options) {
        this.blankNodeCounter = 0;
        options = options || {};
        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
    }
    /**
     * @param value The IRI for the named node.
     * @return A new instance of NamedNode.
     * @see NamedNode
     */
    namedNode(value) {
        return new NamedNode_1.NamedNode(value);
    }
    /**
     * @param value The optional blank node identifier.
     * @return A new instance of BlankNode.
     *         If the `value` parameter is undefined a new identifier
     *         for the blank node is generated for each call.
     * @see BlankNode
     */
    blankNode(value) {
        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
    }
    /**
     * @param value              The literal value.
     * @param languageOrDatatype The optional language or datatype.
     *                           If `languageOrDatatype` is a NamedNode,
     *                           then it is used for the value of `NamedNode.datatype`.
     *                           Otherwise `languageOrDatatype` is used for the value
     *                           of `NamedNode.language`.
     * @return A new instance of Literal.
     * @see Literal
     */
    literal(value, languageOrDatatype) {
        return new Literal_1.Literal(value, languageOrDatatype);
    }
    /**
     * This method is optional.
     * @param value The variable name
     * @return A new instance of Variable.
     * @see Variable
     */
    variable(value) {
        return new Variable_1.Variable(value);
    }
    /**
     * @return An instance of DefaultGraph.
     */
    defaultGraph() {
        return DefaultGraph_1.DefaultGraph.INSTANCE;
    }
    /**
     * @param subject   The quad subject term.
     * @param predicate The quad predicate term.
     * @param object    The quad object term.
     * @param graph     The quad graph term.
     * @return A new instance of Quad.
     * @see Quad
     */
    quad(subject, predicate, object, graph) {
        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
    }
    /**
     * Create a deep copy of the given term using this data factory.
     * @param original An RDF term.
     * @return A deep copy of the given term.
     */
    fromTerm(original) {
        // TODO: remove nasty any casts when this TS bug has been fixed:
        //  https://github.com/microsoft/TypeScript/issues/26933
        switch (original.termType) {
            case 'NamedNode':
                return this.namedNode(original.value);
            case 'BlankNode':
                return this.blankNode(original.value);
            case 'Literal':
                if (original.language) {
                    return this.literal(original.value, original.language);
                }
                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
                    return this.literal(original.value, this.fromTerm(original.datatype));
                }
                return this.literal(original.value);
            case 'Variable':
                return this.variable(original.value);
            case 'DefaultGraph':
                return this.defaultGraph();
            case 'Quad':
                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
        }
    }
    /**
     * Create a deep copy of the given quad using this data factory.
     * @param original An RDF quad.
     * @return A deep copy of the given quad.
     */
    fromQuad(original) {
        return this.fromTerm(original);
    }
    /**
     * Reset the internal blank node counter.
     */
    resetBlankNodeCounter() {
        this.blankNodeCounter = 0;
    }
}
exports.DataFactory = DataFactory;

});

var rdfDataFactory = createCommonjsModule(function (module, exports) {
var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(BlankNode_1, exports);
__exportStar(DataFactory_1, exports);
__exportStar(DefaultGraph_1, exports);
__exportStar(Literal_1, exports);
__exportStar(NamedNode_1, exports);
__exportStar(Quad_1, exports);
__exportStar(Variable_1, exports);

});

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory = new rdfDataFactory.DataFactory();
function _NS(localName) {
    return rdfFactory.namedNode("http://schema.org/" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var SCHEMA_INRUPT_EXT = {
    PREFIX: "schema-inrupt-ext",
    NAMESPACE: "http://schema.org/",
    PREFIX_AND_NAMESPACE: { "schema-inrupt-ext": "http://schema.org/" },
    NS: _NS,
    // *******************
    // All the Properties.
    // *******************
    /**
     * Family Name
     */
    familyName: _NS("familyName"),
    /**
     * Additional Name
     */
    additionalName: _NS("additionalName"),
    /**
     * License
     */
    license: _NS("license"),
    /**
     * Must have comment too!
     */
    newTerm: _NS("newTerm"),
    /**
     * Name
     */
    name: _NS("name"),
    /**
     * Text
     */
    text: _NS("text"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$1 = new rdfDataFactory.DataFactory();
function _NS$1(localName) {
    return rdfFactory$1.namedNode("http://www.w3.org/2006/vcard/ns#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var VCARD = {
    PREFIX: "vcard",
    NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
    PREFIX_AND_NAMESPACE: { "vcard": "http://www.w3.org/2006/vcard/ns#" },
    NS: _NS$1,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Acquaintance
     */
    Acquaintance: _NS$1("Acquaintance"),
    /**
     * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.
     */
    RelatedType: _NS$1("RelatedType"),
    /**
     * Agent
     */
    Agent: _NS$1("Agent"),
    /**
     * This class is deprecated
     */
    BBS: _NS$1("BBS"),
    /**
     * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.
     */
    TelephoneType: _NS$1("TelephoneType"),
    /**
     * This class is deprecated
     */
    Car: _NS$1("Car"),
    /**
     * Also called mobile telephone
     */
    Cell: _NS$1("Cell"),
    /**
     * Child
     */
    Child: _NS$1("Child"),
    /**
     * Colleague
     */
    Colleague: _NS$1("Colleague"),
    /**
     * Contact
     */
    Contact: _NS$1("Contact"),
    /**
     * Coresident
     */
    Coresident: _NS$1("Coresident"),
    /**
     * Coworker
     */
    Coworker: _NS$1("Coworker"),
    /**
     * Crush
     */
    Crush: _NS$1("Crush"),
    /**
     * Date
     */
    Date: _NS$1("Date"),
    /**
     * This class is deprecated
     */
    Dom: _NS$1("Dom"),
    /**
     * Used for type codes. The URI of the type code must be used as the value for Type.
     */
    Type: _NS$1("Type"),
    /**
     * Emergency
     */
    Emergency: _NS$1("Emergency"),
    /**
     * Fax
     */
    Fax: _NS$1("Fax"),
    /**
     * Female
     */
    Female: _NS$1("Female"),
    /**
     * Used for gender codes. The URI of the gender code must be used as the value for Gender.
     */
    Gender: _NS$1("Gender"),
    /**
     * Friend
     */
    Friend: _NS$1("Friend"),
    /**
     * This implies that the property is related to an individual's personal life
     */
    Home: _NS$1("Home"),
    /**
     * This class is deprecated
     */
    ISDN: _NS$1("ISDN"),
    /**
     * This class is deprecated
     */
    Internet: _NS$1("Internet"),
    /**
     * This class is deprecated
     */
    Intl: _NS$1("Intl"),
    /**
     * Kin
     */
    Kin: _NS$1("Kin"),
    /**
     * This class is deprecated
     */
    Label: _NS$1("Label"),
    /**
     * Male
     */
    Male: _NS$1("Male"),
    /**
     * Me
     */
    Me: _NS$1("Me"),
    /**
     * Met
     */
    Met: _NS$1("Met"),
    /**
     * This class is deprecated
     */
    Modem: _NS$1("Modem"),
    /**
     * This class is deprecated
     */
    Msg: _NS$1("Msg"),
    /**
     * Muse
     */
    Muse: _NS$1("Muse"),
    /**
     * Neighbor
     */
    Neighbor: _NS$1("Neighbor"),
    /**
     * None
     */
    None: _NS$1("None"),
    /**
     * Other
     */
    Other: _NS$1("Other"),
    /**
     * This class is deprecated
     */
    PCS: _NS$1("PCS"),
    /**
     * Pager
     */
    Pager: _NS$1("Pager"),
    /**
     * This class is deprecated
     */
    Parcel: _NS$1("Parcel"),
    /**
     * Parent
     */
    Parent: _NS$1("Parent"),
    /**
     * This class is deprecated
     */
    Postal: _NS$1("Postal"),
    /**
     * This class is deprecated
     */
    Pref: _NS$1("Pref"),
    /**
     * Sibling
     */
    Sibling: _NS$1("Sibling"),
    /**
     * Spouse
     */
    Spouse: _NS$1("Spouse"),
    /**
     * Sweetheart
     */
    Sweetheart: _NS$1("Sweetheart"),
    /**
     * This class is deprecated. Use the hasTelephone object property.
     */
    Tel: _NS$1("Tel"),
    /**
     * Also called sms telephone
     */
    Text: _NS$1("Text"),
    /**
     * Text phone
     */
    TextPhone: _NS$1("TextPhone"),
    /**
     * Unknown
     */
    Unknown: _NS$1("Unknown"),
    /**
     * Video
     */
    Video: _NS$1("Video"),
    /**
     * Voice
     */
    Voice: _NS$1("Voice"),
    /**
     * This implies that the property is related to an individual's work place
     */
    Work: _NS$1("Work"),
    /**
     * This class is deprecated
     */
    X400: _NS$1("X400"),
    /**
     * To specify the components of the delivery address for the  object
     */
    Address: _NS$1("Address"),
    /**
     * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.
     */
    Email: _NS$1("Email"),
    /**
     * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.
     */
    Group: _NS$1("Group"),
    /**
     * The parent class for all objects
     */
    Kind: _NS$1("Kind"),
    /**
     * An object representing a single person or entity
     */
    Individual: _NS$1("Individual"),
    /**
     * An object representing a named geographical place
     */
    Location: _NS$1("Location"),
    /**
     * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.
  
     */
    Organization: _NS$1("Organization"),
    /**
     * To specify the components of the name of the object
     */
    Name: _NS$1("Name"),
    /**
     * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)
     */
    VCard: _NS$1("VCard"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * This object property has been mapped
     */
    adr: _NS$1("adr"),
    /**
     * To specify the components of the delivery address for the object
     */
    hasAddress: _NS$1("hasAddress"),
    /**
     * This object property has been deprecated
     */
    agent: _NS$1("agent"),
    /**
     * The date of marriage, or equivalent, of the object
     */
    anniversary: _NS$1("anniversary"),
    /**
     * To specify the birth date of the object
     */
    bday: _NS$1("bday"),
    /**
     * The category information about the object, also known as tags
     */
    category: _NS$1("category"),
    /**
     * This data property has been deprecated
     */
    class: _NS$1("class"),
    /**
     * This object property has been mapped
     */
    email: _NS$1("email"),
    /**
     * To specify the electronic mail address for communication with the object
     */
    hasEmail: _NS$1("hasEmail"),
    /**
     * This data property has been deprecated
     */
    extended_address: _NS$1("extended-address"),
    /**
     * This object property has been mapped
     */
    geo: _NS$1("geo"),
    /**
     * To specify information related to the global positioning of the object. May also be used as a property parameter.
     */
    hasGeo: _NS$1("hasGeo"),
    /**
     * Used to support property parameters for the additional name data property
     */
    hasAdditionalName: _NS$1("hasAdditionalName"),
    /**
     * To specify the busy time associated with the object. (Was called FBURL in RFC6350)
     */
    hasCalendarBusy: _NS$1("hasCalendarBusy"),
    /**
     * To specify the calendar associated with the object. (Was called CALURI in RFC6350)
     */
    hasCalendarLink: _NS$1("hasCalendarLink"),
    /**
     * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)
     */
    hasCalendarRequest: _NS$1("hasCalendarRequest"),
    /**
     * Used to support property parameters for the category data property
     */
    hasCategory: _NS$1("hasCategory"),
    /**
     * Used to support property parameters for the country name data property
     */
    hasCountryName: _NS$1("hasCountryName"),
    /**
     * Used to support property parameters for the formatted name data property
     */
    hasFN: _NS$1("hasFN"),
    /**
     * Used to support property parameters for the family name data property
     */
    hasFamilyName: _NS$1("hasFamilyName"),
    /**
     * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.
     */
    hasGender: _NS$1("hasGender"),
    /**
     * Used to support property parameters for the given name data property
     */
    hasGivenName: _NS$1("hasGivenName"),
    /**
     * Used to support property parameters for the honorific prefix data property
     */
    hasHonorificPrefix: _NS$1("hasHonorificPrefix"),
    /**
     * Used to support property parameters for the honorific suffix data property
     */
    hasHonorificSuffix: _NS$1("hasHonorificSuffix"),
    /**
     * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)
     */
    hasInstantMessage: _NS$1("hasInstantMessage"),
    /**
     * Used to support property parameters for the language data property
     */
    hasLanguage: _NS$1("hasLanguage"),
    /**
     * Used to support property parameters for the locality data property
     */
    hasLocality: _NS$1("hasLocality"),
    /**
     * Used to support property parameters for the nickname data property
     */
    hasNickname: _NS$1("hasNickname"),
    /**
     * The nick name associated with the object
     */
    nickname: _NS$1("nickname"),
    /**
     * Used to support property parameters for the note data property
     */
    hasNote: _NS$1("hasNote"),
    /**
     * Used to support property parameters for the organization name data property
     */
    hasOrganizationName: _NS$1("hasOrganizationName"),
    /**
     * Used to support property parameters for the organization unit name data property
     */
    hasOrganizationUnit: _NS$1("hasOrganizationUnit"),
    /**
     * Used to support property parameters for the postal code data property
     */
    hasPostalCode: _NS$1("hasPostalCode"),
    /**
     * Used to support property parameters for the region data property
     */
    hasRegion: _NS$1("hasRegion"),
    /**
     * To specify a relationship between another entity and the entity represented by this object
     */
    hasRelated: _NS$1("hasRelated"),
    /**
     * Used to support property parameters for the role data property
     */
    hasRole: _NS$1("hasRole"),
    /**
     * To identify the source of directory information of the object
     */
    hasSource: _NS$1("hasSource"),
    /**
     * Used to support property parameters for the street address data property
     */
    hasStreetAddress: _NS$1("hasStreetAddress"),
    /**
     * Used to support property parameters for the title data property
     */
    hasTitle: _NS$1("hasTitle"),
    /**
     * To specify a value that represents a globally unique identifier corresponding to the object
     */
    hasUID: _NS$1("hasUID"),
    /**
     * Used to indicate the resource value of an object property that requires property parameters
     */
    hasValue: _NS$1("hasValue"),
    /**
     * This data property has been deprecated
     */
    label: _NS$1("label"),
    /**
     * To specify the language that may be used for contacting the object. May also be used as a property parameter.
     */
    language: _NS$1("language"),
    /**
     * This data property has been deprecated. See hasGeo
     */
    latitude: _NS$1("latitude"),
    /**
     * This data property has been deprecated. See hasGeo
     */
    longitude: _NS$1("longitude"),
    /**
     * This data property has been deprecated
     */
    mailer: _NS$1("mailer"),
    /**
     * A note associated with the object
     */
    note: _NS$1("note"),
    /**
     * This object property has been mapped. Use the organization-name data property.
     */
    org: _NS$1("org"),
    /**
     * To specify the organizational name associated with the object
     */
    organization_name: _NS$1("organization-name"),
    /**
     * To specify the organizational unit name associated with the object
     */
    organization_unit: _NS$1("organization-unit"),
    /**
     * This data property has been deprecated
     */
    post_office_box: _NS$1("post-office-box"),
    /**
     * To specify the identifier for the product that created the object
     */
    prodid: _NS$1("prodid"),
    /**
     * To specify revision information about the object
     */
    rev: _NS$1("rev"),
    /**
     * To specify the function or part played in a particular situation by the object
     */
    role: _NS$1("role"),
    /**
     * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.
     */
    sort_string: _NS$1("sort-string"),
    /**
     * To specify the position or job of the object
     */
    title: _NS$1("title"),
    /**
     * To indicate time zone information that is specific to the object. May also be used as a property parameter.
     */
    tz: _NS$1("tz"),
    /**
     * Used to indicate the literal value of a data property that requires property parameters
     */
    value: _NS$1("value"),
    /**
     * The country name associated with the address of the object
     */
    country_name: _NS$1("country-name"),
    /**
     * The locality (e.g. city or town) associated with the address of the object
     */
    locality: _NS$1("locality"),
    /**
     * The postal code associated with the address of the object
     */
    postal_code: _NS$1("postal-code"),
    /**
     * The region (e.g. state or province) associated with the address of the object
     */
    region: _NS$1("region"),
    /**
     * The street address associated with the address of the object
     */
    street_address: _NS$1("street-address"),
    /**
     * To include a member in the group this object represents. (This property can only be used by Group individuals)
     */
    hasMember: _NS$1("hasMember"),
    /**
     * The additional name associated with the object
     */
    additional_name: _NS$1("additional-name"),
    /**
     * The family name associated with the object
     */
    family_name: _NS$1("family-name"),
    /**
     * The given name associated with the object
     */
    given_name: _NS$1("given-name"),
    /**
     * The honorific prefix of the name associated with the object
     */
    honorific_prefix: _NS$1("honorific-prefix"),
    /**
     * The honorific suffix of the name associated with the object
     */
    honorific_suffix: _NS$1("honorific-suffix"),
    /**
     * The formatted text corresponding to the name of the object
     */
    fn: _NS$1("fn"),
    /**
     * To specify a public key or authentication certificate associated with the object
     */
    hasKey: _NS$1("hasKey"),
    /**
     * This object property has been mapped
     */
    key: _NS$1("key"),
    /**
     * To specify a graphic image of a logo associated with the object
     */
    hasLogo: _NS$1("hasLogo"),
    /**
     * This object property has been mapped
     */
    logo: _NS$1("logo"),
    /**
     * To specify the components of the name of the object
     */
    hasName: _NS$1("hasName"),
    /**
     * This object property has been mapped
     */
    n: _NS$1("n"),
    /**
     * To specify an image or photograph information that annotates some aspect of the object
     */
    hasPhoto: _NS$1("hasPhoto"),
    /**
     * This object property has been mapped
     */
    photo: _NS$1("photo"),
    /**
     * To specify a digital sound content information that annotates some aspect of the object
     */
    hasSound: _NS$1("hasSound"),
    /**
     * This object property has been mapped
     */
    sound: _NS$1("sound"),
    /**
     * To specify the telephone number for telephony communication with the object
     */
    hasTelephone: _NS$1("hasTelephone"),
    /**
     * This object property has been mapped
     */
    tel: _NS$1("tel"),
    /**
     * To specify a uniform resource locator associated with the object
     */
    hasURL: _NS$1("hasURL"),
    /**
     * This object property has been mapped
     */
    url: _NS$1("url"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$2 = new rdfDataFactory.DataFactory();
function _NS$2(localName) {
    return rdfFactory$2.namedNode("http://www.w3.org/2006/vcard/ns#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var VCARD_INRUPT_EXT = {
    PREFIX: "vcard-inrupt-ext",
    NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
    PREFIX_AND_NAMESPACE: { "vcard-inrupt-ext": "http://www.w3.org/2006/vcard/ns#" },
    NS: _NS$2,
    // *******************
    // All the Properties.
    // *******************
    /**
     * To specify the components of the delivery address for the object
     */
    hasAddress: _NS$2("hasAddress"),
    /**
     * To specify the electronic mail address for communication with the object
     */
    hasEmail: _NS$2("hasEmail"),
    /**
     * To specify the telephone number for telephony communication with the object
     */
    hasTelephone: _NS$2("hasTelephone"),
    /**
     * The formatted text corresponding to the name of the object
     */
    fn: _NS$2("fn"),
    /**
     * To specify the function or part played in a particular situation by the object
     */
    role: _NS$2("role"),
    /**
     * To specify the organizational name associated with the object
     */
    organization_name: _NS$2("organization-name"),
    /**
     * The street address associated with the address of the object
     */
    street_address: _NS$2("street-address"),
    /**
     * The locality (e.g. city or town) associated with the address of the object
     */
    locality: _NS$2("locality"),
    /**
     * The postal code associated with the address of the object
     */
    postal_code: _NS$2("postal-code"),
    /**
     * The region (e.g. state or province) associated with the address of the object
     */
    region: _NS$2("region"),
    /**
     * The country name associated with the address of the object
     */
    country_name: _NS$2("country-name"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$3 = new rdfDataFactory.DataFactory();
function _NS$3(localName) {
    return rdfFactory$3.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var RDF = {
    PREFIX: "rdf",
    NAMESPACE: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    PREFIX_AND_NAMESPACE: { "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#" },
    NS: _NS$3,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The datatype of RDF literals storing fragments of HTML content
     */
    HTML: _NS$3("HTML"),
    /**
     * The datatype of language-tagged string values
     */
    langString: _NS$3("langString"),
    /**
     * The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2
     */
    PlainLiteral: _NS$3("PlainLiteral"),
    /**
     * The class of RDF properties.
     */
    Property: _NS$3("Property"),
    /**
     * The class of RDF statements.
     */
    Statement: _NS$3("Statement"),
    /**
     * The class of unordered containers.
     */
    Bag: _NS$3("Bag"),
    /**
     * The class of ordered containers.
     */
    Seq: _NS$3("Seq"),
    /**
     * The class of containers of alternatives.
     */
    Alt: _NS$3("Alt"),
    /**
     * The class of RDF Lists.
     */
    List: _NS$3("List"),
    /**
     * The datatype of XML literal values.
     */
    XMLLiteral: _NS$3("XMLLiteral"),
    /**
     * The datatype of RDF literals storing JSON content.
     */
    JSON: _NS$3("JSON"),
    /**
     * A class representing a compound literal.
     */
    CompoundLiteral: _NS$3("CompoundLiteral"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The subject is an instance of a class.
     */
    type: _NS$3("type"),
    /**
     * The subject of the subject RDF statement.
     */
    subject: _NS$3("subject"),
    /**
     * The predicate of the subject RDF statement.
     */
    predicate: _NS$3("predicate"),
    /**
     * The object of the subject RDF statement.
     */
    object: _NS$3("object"),
    /**
     * Idiomatic property used for structured values.
     */
    value: _NS$3("value"),
    /**
     * The empty list, with no items in it. If the rest of a list is nil then the list has no more items in it.
     */
    nil: _NS$3("nil"),
    /**
     * The first item in the subject RDF list.
     */
    first: _NS$3("first"),
    /**
     * The rest of the subject RDF list after the first item.
     */
    rest: _NS$3("rest"),
    /**
     * The language component of a CompoundLiteral.
     */
    language: _NS$3("language"),
    /**
     * The base direction component of a CompoundLiteral.
     */
    direction: _NS$3("direction"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$4 = new rdfDataFactory.DataFactory();
function _NS$4(localName) {
    return rdfFactory$4.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var RDF_INRUPT_EXT = {
    PREFIX: "rdf-inrupt-ext",
    NAMESPACE: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    PREFIX_AND_NAMESPACE: { "rdf-inrupt-ext": "http://www.w3.org/1999/02/22-rdf-syntax-ns#" },
    NS: _NS$4,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The subject is an instance of a class.
     */
    type: _NS$4("type"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$5 = new rdfDataFactory.DataFactory();
function _NS$5(localName) {
    return rdfFactory$5.namedNode("http://www.w3.org/2000/01/rdf-schema#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var RDFS = {
    PREFIX: "rdfs",
    NAMESPACE: "http://www.w3.org/2000/01/rdf-schema#",
    PREFIX_AND_NAMESPACE: { "rdfs": "http://www.w3.org/2000/01/rdf-schema#" },
    NS: _NS$5,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class resource, everything.
     */
    Resource: _NS$5("Resource"),
    /**
     * The class of classes.
     */
    Class: _NS$5("Class"),
    /**
     * The class of literal values, eg. textual strings and integers.
     */
    Literal: _NS$5("Literal"),
    /**
     * The class of RDF containers.
     */
    Container: _NS$5("Container"),
    /**
     * The class of container membership properties, rdf:_1, rdf:_2, ...,
                      all of which are sub-properties of 'member'.
     */
    ContainerMembershipProperty: _NS$5("ContainerMembershipProperty"),
    /**
     * The class of RDF datatypes.
     */
    Datatype: _NS$5("Datatype"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The defininition of the subject resource.
     */
    isDefinedBy: _NS$5("isDefinedBy"),
    /**
     * A human-readable name for the subject.
     */
    label: _NS$5("label"),
    /**
     * A description of the subject resource.
     */
    comment: _NS$5("comment"),
    /**
     * The subject is a subclass of a class.
     */
    subClassOf: _NS$5("subClassOf"),
    /**
     * A range of the subject property.
     */
    range: _NS$5("range"),
    /**
     * A domain of the subject property.
     */
    domain: _NS$5("domain"),
    /**
     * The subject is a subproperty of a property.
     */
    subPropertyOf: _NS$5("subPropertyOf"),
    /**
     * Further information about the subject resource.
     */
    seeAlso: _NS$5("seeAlso"),
    /**
     * A member of the subject resource.
     */
    member: _NS$5("member"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$6 = new rdfDataFactory.DataFactory();
function _NS$6(localName) {
    return rdfFactory$6.namedNode("http://www.w3.org/2001/XMLSchema#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var XSD = {
    PREFIX: "xsd",
    NAMESPACE: "http://www.w3.org/2001/XMLSchema#",
    PREFIX_AND_NAMESPACE: { "xsd": "http://www.w3.org/2001/XMLSchema#" },
    NS: _NS$6,
    // *******************
    // All the Properties.
    // *******************
    /**
     * .
     */
    changes: _NS$6("changes"),
    /**
     * .
     */
    string: _NS$6("string"),
    /**
     * .
     */
    boolean: _NS$6("boolean"),
    /**
     * .
     */
    float: _NS$6("float"),
    /**
     * .
     */
    double: _NS$6("double"),
    /**
     * .
     */
    decimal: _NS$6("decimal"),
    /**
     * .
     */
    dateTime: _NS$6("dateTime"),
    /**
     * .
     */
    duration: _NS$6("duration"),
    /**
     * .
     */
    hexBinary: _NS$6("hexBinary"),
    /**
     * .
     */
    base64Binary: _NS$6("base64Binary"),
    /**
     * .
     */
    anyURI: _NS$6("anyURI"),
    /**
     * .
     */
    ID: _NS$6("ID"),
    /**
     * .
     */
    IDREF: _NS$6("IDREF"),
    /**
     * .
     */
    ENTITY: _NS$6("ENTITY"),
    /**
     * .
     */
    NOTATION: _NS$6("NOTATION"),
    /**
     * .
     */
    normalizedString: _NS$6("normalizedString"),
    /**
     * .
     */
    token: _NS$6("token"),
    /**
     * .
     */
    language: _NS$6("language"),
    /**
     * .
     */
    IDREFS: _NS$6("IDREFS"),
    /**
     * .
     */
    ENTITIES: _NS$6("ENTITIES"),
    /**
     * .
     */
    NMTOKEN: _NS$6("NMTOKEN"),
    /**
     * .
     */
    NMTOKENS: _NS$6("NMTOKENS"),
    /**
     * .
     */
    Name: _NS$6("Name"),
    /**
     * .
     */
    QName: _NS$6("QName"),
    /**
     * .
     */
    NCName: _NS$6("NCName"),
    /**
     * .
     */
    integer: _NS$6("integer"),
    /**
     * .
     */
    nonNegativeInteger: _NS$6("nonNegativeInteger"),
    /**
     * .
     */
    positiveInteger: _NS$6("positiveInteger"),
    /**
     * .
     */
    nonPositiveInteger: _NS$6("nonPositiveInteger"),
    /**
     * .
     */
    negativeInteger: _NS$6("negativeInteger"),
    /**
     * .
     */
    byte: _NS$6("byte"),
    /**
     * .
     */
    int: _NS$6("int"),
    /**
     * .
     */
    long: _NS$6("long"),
    /**
     * .
     */
    short: _NS$6("short"),
    /**
     * .
     */
    unsignedByte: _NS$6("unsignedByte"),
    /**
     * .
     */
    unsignedInt: _NS$6("unsignedInt"),
    /**
     * .
     */
    unsignedLong: _NS$6("unsignedLong"),
    /**
     * .
     */
    unsignedShort: _NS$6("unsignedShort"),
    /**
     * .
     */
    date: _NS$6("date"),
    /**
     * .
     */
    time: _NS$6("time"),
    /**
     * .
     */
    gYearMonth: _NS$6("gYearMonth"),
    /**
     * .
     */
    gYear: _NS$6("gYear"),
    /**
     * .
     */
    gMonthDay: _NS$6("gMonthDay"),
    /**
     * .
     */
    gDay: _NS$6("gDay"),
    /**
     * .
     */
    gMonth: _NS$6("gMonth"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$7 = new rdfDataFactory.DataFactory();
function _NS$7(localName) {
    return rdfFactory$7.namedNode("http://www.w3.org/2002/07/owl#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var OWL = {
    PREFIX: "owl",
    NAMESPACE: "http://www.w3.org/2002/07/owl#",
    PREFIX_AND_NAMESPACE: { "owl": "http://www.w3.org/2002/07/owl#" },
    NS: _NS$7,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class of ontologies.
     */
    Ontology: _NS$7("Ontology"),
    /**
     * The class of collections of pairwise different individuals.
     */
    AllDifferent: _NS$7("AllDifferent"),
    /**
     * The class of collections of pairwise disjoint classes.
     */
    AllDisjointClasses: _NS$7("AllDisjointClasses"),
    /**
     * The class of collections of pairwise disjoint properties.
     */
    AllDisjointProperties: _NS$7("AllDisjointProperties"),
    /**
     * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
     */
    Annotation: _NS$7("Annotation"),
    /**
     * The class of annotation properties.
     */
    AnnotationProperty: _NS$7("AnnotationProperty"),
    /**
     * The class of asymmetric properties.
     */
    AsymmetricProperty: _NS$7("AsymmetricProperty"),
    /**
     * The class of object properties.
     */
    ObjectProperty: _NS$7("ObjectProperty"),
    /**
     * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
     */
    Axiom: _NS$7("Axiom"),
    /**
     * The class of OWL classes.
     */
    Class: _NS$7("Class"),
    /**
     * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
     */
    DataRange: _NS$7("DataRange"),
    /**
     * The class of data properties.
     */
    DatatypeProperty: _NS$7("DatatypeProperty"),
    /**
     * The class of deprecated classes.
     */
    DeprecatedClass: _NS$7("DeprecatedClass"),
    /**
     * The class of deprecated properties.
     */
    DeprecatedProperty: _NS$7("DeprecatedProperty"),
    /**
     * The class of functional properties.
     */
    FunctionalProperty: _NS$7("FunctionalProperty"),
    /**
     * The class of inverse-functional properties.
     */
    InverseFunctionalProperty: _NS$7("InverseFunctionalProperty"),
    /**
     * The class of irreflexive properties.
     */
    IrreflexiveProperty: _NS$7("IrreflexiveProperty"),
    /**
     * The class of named individuals.
     */
    NamedIndividual: _NS$7("NamedIndividual"),
    /**
     * The class of OWL individuals.
     */
    Thing: _NS$7("Thing"),
    /**
     * The class of negative property assertions.
     */
    NegativePropertyAssertion: _NS$7("NegativePropertyAssertion"),
    /**
     * This is the empty class.
     */
    Nothing: _NS$7("Nothing"),
    /**
     * The class of ontology properties.
     */
    OntologyProperty: _NS$7("OntologyProperty"),
    /**
     * The class of reflexive properties.
     */
    ReflexiveProperty: _NS$7("ReflexiveProperty"),
    /**
     * The class of property restrictions.
     */
    Restriction: _NS$7("Restriction"),
    /**
     * The class of symmetric properties.
     */
    SymmetricProperty: _NS$7("SymmetricProperty"),
    /**
     * The class of transitive properties.
     */
    TransitiveProperty: _NS$7("TransitiveProperty"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The annotation property that provides version information for an ontology or another OWL construct.
     */
    versionInfo: _NS$7("versionInfo"),
    /**
     * The property that determines the class that a universal property restriction refers to.
     */
    allValuesFrom: _NS$7("allValuesFrom"),
    /**
     * The property that determines the predicate of an annotated axiom or annotated annotation.
     */
    annotatedProperty: _NS$7("annotatedProperty"),
    /**
     * The property that determines the subject of an annotated axiom or annotated annotation.
     */
    annotatedSource: _NS$7("annotatedSource"),
    /**
     * The property that determines the object of an annotated axiom or annotated annotation.
     */
    annotatedTarget: _NS$7("annotatedTarget"),
    /**
     * The property that determines the predicate of a negative property assertion.
     */
    assertionProperty: _NS$7("assertionProperty"),
    /**
     * The annotation property that indicates that a given ontology is backward compatible with another ontology.
     */
    backwardCompatibleWith: _NS$7("backwardCompatibleWith"),
    /**
     * The data property that does not relate any individual to any data value.
     */
    bottomDataProperty: _NS$7("bottomDataProperty"),
    /**
     * The object property that does not relate any two individuals.
     */
    bottomObjectProperty: _NS$7("bottomObjectProperty"),
    /**
     * The property that determines the cardinality of an exact cardinality restriction.
     */
    cardinality: _NS$7("cardinality"),
    /**
     * The property that determines that a given class is the complement of another class.
     */
    complementOf: _NS$7("complementOf"),
    /**
     * The property that determines that a given data range is the complement of another data range with respect to the data domain.
     */
    datatypeComplementOf: _NS$7("datatypeComplementOf"),
    /**
     * The annotation property that indicates that a given entity has been deprecated.
     */
    deprecated: _NS$7("deprecated"),
    /**
     * The property that determines that two given individuals are different.
     */
    differentFrom: _NS$7("differentFrom"),
    /**
     * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
     */
    disjointUnionOf: _NS$7("disjointUnionOf"),
    /**
     * The property that determines that two given classes are disjoint.
     */
    disjointWith: _NS$7("disjointWith"),
    /**
     * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
     */
    distinctMembers: _NS$7("distinctMembers"),
    /**
     * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
     */
    equivalentClass: _NS$7("equivalentClass"),
    /**
     * The property that determines that two given properties are equivalent.
     */
    equivalentProperty: _NS$7("equivalentProperty"),
    /**
     * The property that determines the collection of properties that jointly build a key.
     */
    hasKey: _NS$7("hasKey"),
    /**
     * The property that determines the property that a self restriction refers to.
     */
    hasSelf: _NS$7("hasSelf"),
    /**
     * The property that determines the individual that a has-value restriction refers to.
     */
    hasValue: _NS$7("hasValue"),
    /**
     * The annotation property that indicates that a given ontology is incompatible with another ontology.
     */
    incompatibleWith: _NS$7("incompatibleWith"),
    /**
     * The property that determines the collection of classes or data ranges that build an intersection.
     */
    intersectionOf: _NS$7("intersectionOf"),
    /**
     * The property that determines that two given properties are inverse.
     */
    inverseOf: _NS$7("inverseOf"),
    /**
     * The property that determines the cardinality of a maximum cardinality restriction.
     */
    maxCardinality: _NS$7("maxCardinality"),
    /**
     * The property that determines the cardinality of a maximum qualified cardinality restriction.
     */
    maxQualifiedCardinality: _NS$7("maxQualifiedCardinality"),
    /**
     * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
     */
    members: _NS$7("members"),
    /**
     * The property that determines the cardinality of a minimum cardinality restriction.
     */
    minCardinality: _NS$7("minCardinality"),
    /**
     * The property that determines the cardinality of a minimum qualified cardinality restriction.
     */
    minQualifiedCardinality: _NS$7("minQualifiedCardinality"),
    /**
     * The property that determines the class that a qualified object cardinality restriction refers to.
     */
    onClass: _NS$7("onClass"),
    /**
     * The property that determines the data range that a qualified data cardinality restriction refers to.
     */
    onDataRange: _NS$7("onDataRange"),
    /**
     * The property that determines the datatype that a datatype restriction refers to.
     */
    onDatatype: _NS$7("onDatatype"),
    /**
     * The property that determines the collection of individuals or data values that build an enumeration.
     */
    oneOf: _NS$7("oneOf"),
    /**
     * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
     */
    onProperties: _NS$7("onProperties"),
    /**
     * The property that determines the property that a property restriction refers to.
     */
    onProperty: _NS$7("onProperty"),
    /**
     * The annotation property that indicates the predecessor ontology of a given ontology.
     */
    priorVersion: _NS$7("priorVersion"),
    /**
     * The property that determines the n-tuple of properties that build a sub property chain of a given property.
     */
    propertyChainAxiom: _NS$7("propertyChainAxiom"),
    /**
     * The property that determines that two given properties are disjoint.
     */
    propertyDisjointWith: _NS$7("propertyDisjointWith"),
    /**
     * The property that determines the cardinality of an exact qualified cardinality restriction.
     */
    qualifiedCardinality: _NS$7("qualifiedCardinality"),
    /**
     * The property that determines that two given individuals are equal.
     */
    sameAs: _NS$7("sameAs"),
    /**
     * The property that determines the class that an existential property restriction refers to.
     */
    someValuesFrom: _NS$7("someValuesFrom"),
    /**
     * The property that determines the subject of a negative property assertion.
     */
    sourceIndividual: _NS$7("sourceIndividual"),
    /**
     * The property that determines the object of a negative object property assertion.
     */
    targetIndividual: _NS$7("targetIndividual"),
    /**
     * The property that determines the value of a negative data property assertion.
     */
    targetValue: _NS$7("targetValue"),
    /**
     * The data property that relates every individual to every data value.
     */
    topDataProperty: _NS$7("topDataProperty"),
    /**
     * The object property that relates every two individuals.
     */
    topObjectProperty: _NS$7("topObjectProperty"),
    /**
     * The property that determines the collection of classes or data ranges that build a union.
     */
    unionOf: _NS$7("unionOf"),
    /**
     * The property that determines the collection of facet-value pairs that define a datatype restriction.
     */
    withRestrictions: _NS$7("withRestrictions"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$8 = new rdfDataFactory.DataFactory();
function _NS$8(localName) {
    return rdfFactory$8.namedNode("http://www.w3.org/ns/ldp#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var LDP = {
    PREFIX: "ldp",
    NAMESPACE: "http://www.w3.org/ns/ldp#",
    PREFIX_AND_NAMESPACE: { "ldp": "http://www.w3.org/ns/ldp#" },
    NS: _NS$8,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
     */
    Resource: _NS$8("Resource"),
    /**
     * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
     */
    RDFSource: _NS$8("RDFSource"),
    /**
     * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
     */
    NonRDFSource: _NS$8("NonRDFSource"),
    /**
     * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
     */
    Container: _NS$8("Container"),
    /**
     * An LDPC that uses a predefined predicate to simply link to its contained resources.
     */
    BasicContainer: _NS$8("BasicContainer"),
    /**
     * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
     */
    DirectContainer: _NS$8("DirectContainer"),
    /**
     * An LDPC that has the flexibility of choosing what form the membership triples take.
     */
    IndirectContainer: _NS$8("IndirectContainer"),
    /**
     * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
     */
    Page: _NS$8("Page"),
    /**
     * Element in the list of sorting criteria used by the server to assign container members to pages.
     */
    PageSortCriterion: _NS$8("PageSortCriterion"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
     */
    hasMemberRelation: _NS$8("hasMemberRelation"),
    /**
     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
     */
    isMemberOfRelation: _NS$8("isMemberOfRelation"),
    /**
     * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
     */
    membershipResource: _NS$8("membershipResource"),
    /**
     * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
     */
    insertedContentRelation: _NS$8("insertedContentRelation"),
    /**
     * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
     */
    member: _NS$8("member"),
    /**
     * Links a container with resources created through the container.
     */
    contains: _NS$8("contains"),
    /**
     * Links a resource with constraints that the server requires requests like creation and update to conform to.
     */
    constrainedBy: _NS$8("constrainedBy"),
    /**
     * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
     */
    pageSortCriteria: _NS$8("pageSortCriteria"),
    /**
     * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
     */
    pageSortPredicate: _NS$8("pageSortPredicate"),
    /**
     * The ascending/descending/etc order used to order the members across pages in a page sequence.
     */
    pageSortOrder: _NS$8("pageSortOrder"),
    /**
     * The collation used to order the members across pages in a page sequence when comparing strings.
     */
    pageSortCollation: _NS$8("pageSortCollation"),
    /**
     * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
     */
    pageSequence: _NS$8("pageSequence"),
    /**
     * Links a resource to a container where notifications for the resource can be created and discovered.
     */
    inbox: _NS$8("inbox"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$9 = new rdfDataFactory.DataFactory();
function _NS$9(localName) {
    return rdfFactory$9.namedNode("http://www.w3.org/2011/http#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var HTTP = {
    PREFIX: "http",
    NAMESPACE: "http://www.w3.org/2011/http#",
    PREFIX_AND_NAMESPACE: { "http": "http://www.w3.org/2011/http#" },
    NS: _NS$9,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A connection used for HTTP transfer.
     */
    Connection: _NS$9("Connection"),
    /**
     * An entity header in an HTTP message.
     */
    EntityHeader: _NS$9("EntityHeader"),
    /**
     * A header in an HTTP message.
     */
    MessageHeader: _NS$9("MessageHeader"),
    /**
     * A general header in an HTTP message.
     */
    GeneralHeader: _NS$9("GeneralHeader"),
    /**
     * A part of a deconstructed header value.
     */
    HeaderElement: _NS$9("HeaderElement"),
    /**
     * A header name.
     */
    HeaderName: _NS$9("HeaderName"),
    /**
     * An HTTP message.
     */
    Message: _NS$9("Message"),
    /**
     * The HTTP method used for the request.
     */
    Method: _NS$9("Method"),
    /**
     * A parameter for a part of a header value.
     */
    Parameter: _NS$9("Parameter"),
    /**
     * An HTTP request.
     */
    Request: _NS$9("Request"),
    /**
     * A header in an HTTP request message.
     */
    RequestHeader: _NS$9("RequestHeader"),
    /**
     * An HTTP response.
     */
    Response: _NS$9("Response"),
    /**
     * A header in an HTTP response message.
     */
    ResponseHeader: _NS$9("ResponseHeader"),
    /**
     * The status code of an HTTP response.
     */
    StatusCode: _NS$9("StatusCode"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The absolute request URI.
     */
    absoluteURI: _NS$9("absoluteURI"),
    /**
     * The request URI of an HTTP request.
     */
    requestURI: _NS$9("requestURI"),
    /**
     * The absolute path sort of request URI.
     */
    absolutePath: _NS$9("absolutePath"),
    /**
     * The authority sort of request URI.
     */
    authority: _NS$9("authority"),
    /**
     * The entity body of an HTTP message.
     */
    body: _NS$9("body"),
    /**
     * The authority of a connection used for the HTTP transfer.
     */
    connectionAuthority: _NS$9("connectionAuthority"),
    /**
     * The name of a header element.
     */
    elementName: _NS$9("elementName"),
    /**
     * The value of a header element.
     */
    elementValue: _NS$9("elementValue"),
    /**
     * The name of an HTTP header field.
     */
    fieldName: _NS$9("fieldName"),
    /**
     * The value of an HTTP header field.
     */
    fieldValue: _NS$9("fieldValue"),
    /**
     * The deconstructed parts of an HTTP header value.
     */
    headerElements: _NS$9("headerElements"),
    /**
     * The name of an HTTP header.
     */
    hdrName: _NS$9("hdrName"),
    /**
     * The headers in an HTTP message.
     */
    headers: _NS$9("headers"),
    /**
     * The HTTP version of an HTTP message.
     */
    httpVersion: _NS$9("httpVersion"),
    /**
     * The HTTP method used for the HTTP request.
     */
    mthd: _NS$9("mthd"),
    /**
     * The HTTP method name used for the HTTP request.
     */
    methodName: _NS$9("methodName"),
    /**
     * The name of a parameter in a part of a deconstructed HTTP header value.
     */
    paramName: _NS$9("paramName"),
    /**
     * The parameters in a part of a deconstructed HTTP header value.
     */
    params: _NS$9("params"),
    /**
     * The value of a parameter in a part of a deconstructed HTTP header value.
     */
    paramValue: _NS$9("paramValue"),
    /**
     * The reason phrase (status text) of an HTTP response.
     */
    reasonPhrase: _NS$9("reasonPhrase"),
    /**
     * The HTTP requests made via a connection.
     */
    requests: _NS$9("requests"),
    /**
     * The HTTP response sent in answer to an HTTP request.
     */
    resp: _NS$9("resp"),
    /**
     * The status code of an HTTP response.
     */
    sc: _NS$9("sc"),
    /**
     * The status code number.
     */
    statusCodeNumber: _NS$9("statusCodeNumber"),
    /**
     * The status code value of an HTTP response.
     */
    statusCodeValue: _NS$9("statusCodeValue"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$a = new rdfDataFactory.DataFactory();
function _NS$a(localName) {
    return rdfFactory$a.namedNode("http://www.w3.org/2007/ont/httph#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var HTTPH = {
    PREFIX: "httph",
    NAMESPACE: "http://www.w3.org/2007/ont/httph#",
    PREFIX_AND_NAMESPACE: { "httph": "http://www.w3.org/2007/ont/httph#" },
    NS: _NS$a,
    // *******************
    // All the Properties.
    // *******************
    /**
     * See the HTTP specification
     */
    content_type: _NS$a("content-type"),
    /**
     * See the HTTP specification
     */
    accept: _NS$a("accept"),
    /**
     * See the HTTP specification
     */
    accept_language: _NS$a("accept-language"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$b = new rdfDataFactory.DataFactory();
function _NS$b(localName) {
    return rdfFactory$b.namedNode("http://purl.org/ontology/olo/core#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var OLO = {
    PREFIX: "olo",
    NAMESPACE: "http://purl.org/ontology/olo/core#",
    PREFIX_AND_NAMESPACE: { "olo": "http://purl.org/ontology/olo/core#" },
    NS: _NS$b,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An ordered list with a given length an indexed items.
     */
    OrderedList: _NS$b("OrderedList"),
    /**
     * A slot in an ordered list with a fixed index.
     */
    Slot: _NS$b("Slot"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The length of an ordered list.
     */
    length: _NS$b("length"),
    /**
     * Associates the next slot in an ordered list.
     */
    next: _NS$b("next"),
    /**
     * An index of a slot in an ordered list.
     */
    index: _NS$b("index"),
    /**
     * An ordered list of an slot.
     */
    ordered_list: _NS$b("ordered_list"),
    /**
     * Associates the previous slot in an ordered list
     */
    previous: _NS$b("previous"),
    /**
     * An item of a slot in an ordered list.
     */
    item: _NS$b("item"),
    /**
     * A slot in an ordered list.
     */
    slot: _NS$b("slot"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$c = new rdfDataFactory.DataFactory();
function _NS$c(localName) {
    return rdfFactory$c.namedNode("http://www.w3.org/2004/02/skos/core#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var SKOS = {
    PREFIX: "skos",
    NAMESPACE: "http://www.w3.org/2004/02/skos/core#",
    PREFIX_AND_NAMESPACE: { "skos": "http://www.w3.org/2004/02/skos/core#" },
    NS: _NS$c,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An idea or notion; a unit of thought.
     */
    Concept: _NS$c("Concept"),
    /**
     * A set of concepts, optionally including statements about semantic relationships between those concepts.
     */
    ConceptScheme: _NS$c("ConceptScheme"),
    /**
     * A meaningful collection of concepts.
     */
    Collection: _NS$c("Collection"),
    /**
     * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
     */
    OrderedCollection: _NS$c("OrderedCollection"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A statement or formal explanation of the meaning of a concept.
     */
    definition: _NS$c("definition"),
    /**
     * A note that helps to clarify the meaning and/or the use of a concept.
     */
    scopeNote: _NS$c("scopeNote"),
    /**
     * An example of the use of a concept.
     */
    example: _NS$c("example"),
    /**
     * Relates a resource (for example a concept) to a concept scheme in which it is included.
     */
    inScheme: _NS$c("inScheme"),
    /**
     * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
     */
    hasTopConcept: _NS$c("hasTopConcept"),
    /**
     * Relates a concept to the concept scheme that it is a top level concept of.
     */
    topConceptOf: _NS$c("topConceptOf"),
    /**
     * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
     */
    prefLabel: _NS$c("prefLabel"),
    /**
     * The range of skos:altLabel is the class of RDF plain literals.
     */
    altLabel: _NS$c("altLabel"),
    /**
     * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
     */
    hiddenLabel: _NS$c("hiddenLabel"),
    /**
     * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
     */
    notation: _NS$c("notation"),
    /**
     * A general note, for any purpose.
     */
    note: _NS$c("note"),
    /**
     * A note about a modification to a concept.
     */
    changeNote: _NS$c("changeNote"),
    /**
     * A note for an editor, translator or maintainer of the vocabulary.
     */
    editorialNote: _NS$c("editorialNote"),
    /**
     * A note about the past state/use/meaning of a concept.
     */
    historyNote: _NS$c("historyNote"),
    /**
     * Links a concept to a concept related by meaning.
     */
    semanticRelation: _NS$c("semanticRelation"),
    /**
     * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
     */
    broader: _NS$c("broader"),
    /**
     * skos:broaderTransitive is a transitive superproperty of skos:broader.
     */
    broaderTransitive: _NS$c("broaderTransitive"),
    /**
     * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
     */
    narrower: _NS$c("narrower"),
    /**
     * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
     */
    narrowerTransitive: _NS$c("narrowerTransitive"),
    /**
     * skos:related is disjoint with skos:broaderTransitive
     */
    related: _NS$c("related"),
    /**
     * Relates a collection to one of its members.
     */
    member: _NS$c("member"),
    /**
     * For any resource, every item in the list given as the value of the
        skos:memberList property is also a value of the skos:member property.
     */
    memberList: _NS$c("memberList"),
    /**
     * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
     */
    mappingRelation: _NS$c("mappingRelation"),
    /**
     * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     */
    broadMatch: _NS$c("broadMatch"),
    /**
     * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     */
    narrowMatch: _NS$c("narrowMatch"),
    /**
     * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
     */
    relatedMatch: _NS$c("relatedMatch"),
    /**
     * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
     */
    exactMatch: _NS$c("exactMatch"),
    /**
     * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
     */
    closeMatch: _NS$c("closeMatch"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$d = new rdfDataFactory.DataFactory();
function _NS$d(localName) {
    return rdfFactory$d.namedNode("http://www.w3.org/ns/ui#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var UI = {
    PREFIX: "ui",
    NAMESPACE: "http://www.w3.org/ns/ui#",
    PREFIX_AND_NAMESPACE: { "ui": "http://www.w3.org/ns/ui#" },
    NS: _NS$d,
    // *****************
    // All the Classes.
    // *****************
    /**
     *
     */
    BooleanField: _NS$d("BooleanField"),
    /**
     *
     */
    NumericField: _NS$d("NumericField"),
    /**
     *
     */
    ValueField: _NS$d("ValueField"),
    /**
     *
     */
    Group: _NS$d("Group"),
    /**
     * A form can be any type of single field, or typically a Group of several fields,
      including interspersed headings and comments.
     */
    Form: _NS$d("Form"),
    /**
     *
     */
    Single: _NS$d("Single"),
    /**
     *
     */
    Choice: _NS$d("Choice"),
    /**
     * A classifier allows the user to select the type of an object.
      The possible types must be subclasses of some overall class, the "category".
      (Ideally, the superclass is also set up as the disjoint union of the subclasses,
      if they are disjoint.)
  
      The form normally stores the resulting classes using an rdf:type triple,
      but a different predicate can be used if required, so the classifier field
      needs is 'property' defined too.
  
      If the subclass selected itself is has subclasses defined, the user can
      recursively select from them in turn, as many levels as needed.
     */
    Classifier: _NS$d("Classifier"),
    /**
     *
     */
    ColorField: _NS$d("ColorField"),
    /**
     * Comment
     */
    Comment: _NS$d("Comment"),
    /**
     *
     */
    DateField: _NS$d("DateField"),
    /**
     *
     */
    DateTimeField: _NS$d("DateTimeField"),
    /**
     *
     */
    DecimalField: _NS$d("DecimalField"),
    /**
     *
     */
    EmailField: _NS$d("EmailField"),
    /**
     *
     */
    Heading: _NS$d("Heading"),
    /**
     *
     */
    SingleLineTextField: _NS$d("SingleLineTextField"),
    /**
     *
     */
    TextField: _NS$d("TextField"),
    /**
     *
     */
    Options: _NS$d("Options"),
    /**
     *
     */
    IntegerField: _NS$d("IntegerField"),
    /**
     *
     */
    FloatField: _NS$d("FloatField"),
    /**
     *
     */
    PhoneField: _NS$d("PhoneField"),
    /**
     *
     */
    Multiple: _NS$d("Multiple"),
    /**
     *
     */
    MultiLineTextField: _NS$d("MultiLineTextField"),
    /**
     *
     */
    TriStateField: _NS$d("TriStateField"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * parts
     */
    parts: _NS$d("parts"),
    /**
     * from
     */
    from: _NS$d("from"),
    /**
     * Label
     */
    label: _NS$d("label"),
    /**
     * Many fields prompt for information about a given property of the subject.
      When field is filled in, this gives which property is written into the data.
     */
    property: _NS$d("property"),
    /**
     * The value for which this case is selected.
     */
    for: _NS$d("for"),
    /**
     * A string for the UI to use if the user needs a longer
          prompts than just a field name, the rdfs:label.
     */
    prompt: _NS$d("prompt"),
    /**
     *
     */
    use: _NS$d("use"),
    /**
     * A form which may be used to collect information about a
      hitherto locally undocumented instance instance of this class.
     */
    creationForm: _NS$d("creationForm"),
    /**
     * Contents
     */
    contents: _NS$d("contents"),
    /**
     * size of field
     */
    size: _NS$d("size"),
    /**
     * Must be a valid CSS style string such as one could put in
          an HTML style attribute.  Depending on the user interface system, this can
          by given to individuals, classes or properties. It is up to a user interface
          which wants to draw on them to pick how it uses styles from which parts
          of the data it has.  For example, the style of a class may be picked
          to distinguish information about things in that class.
     */
    style: _NS$d("style"),
    /**
     * The superclass subclasses of which will be selected.
     */
    category: _NS$d("category"),
    /**
     * Many fields prompt for information about a given property of the subject
     */
    dependingOn: _NS$d("dependingOn"),
    /**
     * Max length
     */
    maxLength: _NS$d("maxLength"),
    /**
     * part
     */
    part: _NS$d("part"),
    /**
     * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
  
     */
    annotationForm: _NS$d("annotationForm"),
    /**
     * Must be a valid CSS color string such as one could put in
          an HTML style attribute.  This should be in the #xxxxxx form,
          (with 6 digits of hex)  so that it
          can work with Graphviz.
     */
    backgroundColor: _NS$d("backgroundColor"),
    /**
     * URI or base64 representation of an image
     */
    backgroundImage: _NS$d("backgroundImage"),
    /**
     * Must be a valid CSS color string such as one could put in
          an HTML style attribute.  This should be in the #xxxxxx form,
          (with 6 digits of hex)  so that it
          can work with Graphviz.
     */
    color: _NS$d("color"),
    /**
     * A really simple way of enabling user interfaces to
              create new information about a class of things is to make a define of properties
              to be specified when a information about a new item
              ("New item" here means an item which the system
              does not have prvious information about yet,
              not an items which has just been created,
              like new friend as opposed to new baby)
     */
    initialProperties: _NS$d("initialProperties"),
    /**
     * max
     */
    maxValue: _NS$d("maxValue"),
    /**
     * min
     */
    minValue: _NS$d("minValue"),
    /**
     * The sequence in which this item is arranged with repect to other parts.
     */
    seqeunce: _NS$d("seqeunce"),
    /**
     * A property which typically is used to sort
          members of a given class.
     */
    sortBy: _NS$d("sortBy"),
    /**
     * When individuals or classes must be sorted, then
          if they are given different values of sortPriority a user agent can
          use this as a hint to how to present information.
     */
    sortPriority: _NS$d("sortPriority"),
    /**
     * This  is a crude way of specifying a table-based
              view for objects of this class.
     */
    tableProperties: _NS$d("tableProperties"),
    /**
     * Pattern
     */
    pattern: _NS$d("pattern"),
    /**
     * Value
     */
    value: _NS$d("value"),
    /**
     * Values
     */
    values: _NS$d("values"),
    /**
     * Minimum date offset
     */
    minDateOffset: _NS$d("minDateOffset"),
    /**
     * Maximum date offset
     */
    maxDateOffset: _NS$d("maxDateOffset"),
    /**
     * Minimum datetime offset
     */
    minDatetimeOffset: _NS$d("minDatetimeOffset"),
    /**
     * Maximum datetime offset
     */
    maxDatetimeOffset: _NS$d("maxDatetimeOffset"),
    /**
     * Name
     */
    name: _NS$d("name"),
    /**
     * Time field
     */
    TimeField: _NS$d("TimeField"),
    /**
     * Old value
     */
    oldValue: _NS$d("oldValue"),
    /**
     * Base
     */
    base: _NS$d("base"),
    /**
     * Parent property
     */
    parentProperty: _NS$d("parentProperty"),
    /**
     * Reference
     */
    reference: _NS$d("reference"),
    /**
     * Valid
     */
    valid: _NS$d("valid"),
    /**
     * Default error
     */
    defaultError: _NS$d("defaultError"),
    /**
     * Parts clone
     */
    partsClone: _NS$d("partsClone"),
    /**
     * Min length
     */
    minLength: _NS$d("minLength"),
    /**
     * Validation error
     */
    validationError: _NS$d("validationError"),
    /**
     * Required
     */
    required: _NS$d("required"),
    /**
     * Required error
     */
    requiredError: _NS$d("requiredError"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$e = new rdfDataFactory.DataFactory();
function _NS$e(localName) {
    return rdfFactory$e.namedNode("http://purl.org/vocab/vann/" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var VANN = {
    PREFIX: "vann",
    NAMESPACE: "http://purl.org/vocab/vann/",
    PREFIX_AND_NAMESPACE: { "vann": "http://purl.org/vocab/vann/" },
    NS: _NS$e,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.
     */
    preferredNamespacePrefix: _NS$e("preferredNamespacePrefix"),
    /**
     * The preferred namespace URI to use when using terms from this vocabulary in an XML document.
     */
    preferredNamespaceUri: _NS$e("preferredNamespaceUri"),
    /**
     * A reference to a resource that describes changes between this version of a vocabulary and the previous.
     */
    changes: _NS$e("changes"),
    /**
     * A reference to a resource that provides an example of how this resource can be used.
     */
    example: _NS$e("example"),
    /**
     * A group of related terms in a vocabulary.
     */
    termGroup: _NS$e("termGroup"),
    /**
     * A reference to a resource that provides information on how this resource is to be used.
     */
    usageNote: _NS$e("usageNote"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$f = new rdfDataFactory.DataFactory();
function _NS$f(localName) {
    return rdfFactory$f.namedNode("http://purl.org/dc/terms/" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var DCTERMS = {
    PREFIX: "dcterms",
    NAMESPACE: "http://purl.org/dc/terms/",
    PREFIX_AND_NAMESPACE: { "dcterms": "http://purl.org/dc/terms/" },
    NS: _NS$f,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A resource that acts or has the power to act.
     */
    Agent: _NS$f("Agent"),
    /**
     * A group of agents.
     */
    AgentClass: _NS$f("AgentClass"),
    /**
     * A book, article, or other documentary resource.
     */
    BibliographicResource: _NS$f("BibliographicResource"),
    /**
     * A digital resource format.
     */
    FileFormat: _NS$f("FileFormat"),
    /**
     * A file format or physical medium.
     */
    MediaType: _NS$f("MediaType"),
    /**
     * A rate at which something recurs.
     */
    Frequency: _NS$f("Frequency"),
    /**
     * The extent or range of judicial, law enforcement, or other authority.
     */
    Jurisdiction: _NS$f("Jurisdiction"),
    /**
     * A location, period of time, or jurisdiction.
     */
    LocationPeriodOrJurisdiction: _NS$f("LocationPeriodOrJurisdiction"),
    /**
     * A legal document giving official permission to do something with a Resource.
     */
    LicenseDocument: _NS$f("LicenseDocument"),
    /**
     * A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something with a resource, or a statement about access rights.
     */
    RightsStatement: _NS$f("RightsStatement"),
    /**
     * A system of signs, symbols, sounds, gestures, or rules used in communication.
     */
    LinguisticSystem: _NS$f("LinguisticSystem"),
    /**
     * A spatial region or named place.
     */
    Location: _NS$f("Location"),
    /**
     * A media type or extent.
     */
    MediaTypeOrExtent: _NS$f("MediaTypeOrExtent"),
    /**
     * A method by which resources are added to a collection.
     */
    MethodOfAccrual: _NS$f("MethodOfAccrual"),
    /**
     * A process that is used to engender knowledge, attitudes, and skills.
     */
    MethodOfInstruction: _NS$f("MethodOfInstruction"),
    /**
     * An interval of time that is named or defined by its start and end dates.
     */
    PeriodOfTime: _NS$f("PeriodOfTime"),
    /**
     * A physical material or carrier.
     */
    PhysicalMedium: _NS$f("PhysicalMedium"),
    /**
     * A material thing.
     */
    PhysicalResource: _NS$f("PhysicalResource"),
    /**
     * A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
     */
    Policy: _NS$f("Policy"),
    /**
     * A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
     */
    ProvenanceStatement: _NS$f("ProvenanceStatement"),
    /**
     * A dimension or extent, or a time taken to play or execute.
     */
    SizeOrDuration: _NS$f("SizeOrDuration"),
    /**
     * A basis for comparison; a reference point against which other things can be evaluated.
     */
    Standard: _NS$f("Standard"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Date on which the resource was changed.
     */
    modified: _NS$f("modified"),
    /**
     * An entity responsible for making the resource available.
     */
    publisher: _NS$f("publisher"),
    /**
     * A name given to the resource.
     */
    title: _NS$f("title"),
    /**
     * An account of the resource.
     */
    description: _NS$f("description"),
    /**
     * A related resource that is a version, edition, or adaptation of the described resource.
     */
    hasVersion: _NS$f("hasVersion"),
    /**
     * Date of formal issuance (e.g., publication) of the resource.
     */
    issued: _NS$f("issued"),
    /**
     * The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.
     */
    Box: _NS$f("Box"),
    /**
     * The set of codes listed in ISO 3166-1 for the representation of names of countries.
     */
    ISO3166: _NS$f("ISO3166"),
    /**
     * The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.
     */
    ISO639_2: _NS$f("ISO639-2"),
    /**
     * The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.
     */
    ISO639_3: _NS$f("ISO639-3"),
    /**
     * The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.
     */
    Period: _NS$f("Period"),
    /**
     * The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.
     */
    Point: _NS$f("Point"),
    /**
     * The set of tags, constructed according to RFC 1766, for the identification of languages.
     */
    RFC1766: _NS$f("RFC1766"),
    /**
     * The set of tags constructed according to RFC 3066 for the identification of languages.
     */
    RFC3066: _NS$f("RFC3066"),
    /**
     * The set of tags constructed according to RFC 4646 for the identification of languages.
     */
    RFC4646: _NS$f("RFC4646"),
    /**
     * The set of tags constructed according to RFC 5646 for the identification of languages.
     */
    RFC5646: _NS$f("RFC5646"),
    /**
     * The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.
     */
    URI: _NS$f("URI"),
    /**
     * The set of dates and times constructed according to the W3C Date and Time Formats Specification.
     */
    W3CDTF: _NS$f("W3CDTF"),
    /**
     * A summary of the resource.
     */
    abstract: _NS$f("abstract"),
    /**
     * Information about who can access the resource or an indication of its security status.
     */
    accessRights: _NS$f("accessRights"),
    /**
     * Information about rights held in and over the resource.
     */
    rights: _NS$f("rights"),
    /**
     * The method by which items are added to a collection.
     */
    accrualMethod: _NS$f("accrualMethod"),
    /**
     * The frequency with which items are added to a collection.
     */
    accrualPeriodicity: _NS$f("accrualPeriodicity"),
    /**
     * The policy governing the addition of items to a collection.
     */
    accrualPolicy: _NS$f("accrualPolicy"),
    /**
     * An alternative name for the resource.
     */
    alternative: _NS$f("alternative"),
    /**
     * A class of entity for whom the resource is intended or useful.
     */
    audience: _NS$f("audience"),
    /**
     * Date (often a range) that the resource became or will become available.
     */
    available: _NS$f("available"),
    /**
     * A point or period of time associated with an event in the lifecycle of the resource.
     */
    date: _NS$f("date"),
    /**
     * A bibliographic reference for the resource.
     */
    bibliographicCitation: _NS$f("bibliographicCitation"),
    /**
     * An unambiguous reference to the resource within a given context.
     */
    identifier: _NS$f("identifier"),
    /**
     * An established standard to which the described resource conforms.
     */
    conformsTo: _NS$f("conformsTo"),
    /**
     * A related resource.
     */
    relation: _NS$f("relation"),
    /**
     * An entity responsible for making contributions to the resource.
     */
    contributor: _NS$f("contributor"),
    /**
     * The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
     */
    coverage: _NS$f("coverage"),
    /**
     * Date of creation of the resource.
     */
    created: _NS$f("created"),
    /**
     * An entity primarily responsible for making the resource.
     */
    creator: _NS$f("creator"),
    /**
     * Date of acceptance of the resource.
     */
    dateAccepted: _NS$f("dateAccepted"),
    /**
     * Date of copyright.
     */
    dateCopyrighted: _NS$f("dateCopyrighted"),
    /**
     * Date of submission of the resource.
     */
    dateSubmitted: _NS$f("dateSubmitted"),
    /**
     * A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.
     */
    educationLevel: _NS$f("educationLevel"),
    /**
     * The size or duration of the resource.
     */
    extent: _NS$f("extent"),
    /**
     * The file format, physical medium, or dimensions of the resource.
     */
    format: _NS$f("format"),
    /**
     * A related resource that is substantially the same as the pre-existing described resource, but in another format.
     */
    hasFormat: _NS$f("hasFormat"),
    /**
     * A related resource that is included either physically or logically in the described resource.
     */
    hasPart: _NS$f("hasPart"),
    /**
     * A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
     */
    instructionalMethod: _NS$f("instructionalMethod"),
    /**
     * A related resource that is substantially the same as the described resource, but in another format.
     */
    isFormatOf: _NS$f("isFormatOf"),
    /**
     * A related resource in which the described resource is physically or logically included.
     */
    isPartOf: _NS$f("isPartOf"),
    /**
     * A related resource that references, cites, or otherwise points to the described resource.
     */
    isReferencedBy: _NS$f("isReferencedBy"),
    /**
     * A related resource that supplants, displaces, or supersedes the described resource.
     */
    isReplacedBy: _NS$f("isReplacedBy"),
    /**
     * A related resource that requires the described resource to support its function, delivery, or coherence.
     */
    isRequiredBy: _NS$f("isRequiredBy"),
    /**
     * A related resource of which the described resource is a version, edition, or adaptation.
     */
    isVersionOf: _NS$f("isVersionOf"),
    /**
     * A language of the resource.
     */
    language: _NS$f("language"),
    /**
     * A legal document giving official permission to do something with the resource.
     */
    license: _NS$f("license"),
    /**
     * An entity that mediates access to the resource and for whom the resource is intended or useful.
     */
    mediator: _NS$f("mediator"),
    /**
     * The material or physical carrier of the resource.
     */
    medium: _NS$f("medium"),
    /**
     * A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.
     */
    provenance: _NS$f("provenance"),
    /**
     * A related resource that is referenced, cited, or otherwise pointed to by the described resource.
     */
    references: _NS$f("references"),
    /**
     * A related resource that is supplanted, displaced, or superseded by the described resource.
     */
    replaces: _NS$f("replaces"),
    /**
     * A related resource that is required by the described resource to support its function, delivery, or coherence.
     */
    requires: _NS$f("requires"),
    /**
     * A person or organization owning or managing rights over the resource.
     */
    rightsHolder: _NS$f("rightsHolder"),
    /**
     * A related resource from which the described resource is derived.
     */
    source: _NS$f("source"),
    /**
     * Spatial characteristics of the resource.
     */
    spatial: _NS$f("spatial"),
    /**
     * The topic of the resource.
     */
    subject: _NS$f("subject"),
    /**
     * A list of subunits of the resource.
     */
    tableOfContents: _NS$f("tableOfContents"),
    /**
     * Temporal characteristics of the resource.
     */
    temporal: _NS$f("temporal"),
    /**
     * The nature or genre of the resource.
     */
    type: _NS$f("type"),
    /**
     * Date (often a range) of validity of a resource.
     */
    valid: _NS$f("valid"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$g = new rdfDataFactory.DataFactory();
function _NS$g(localName) {
    return rdfFactory$g.namedNode("https://www.w3.org/ns/activitystreams#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var AS = {
    PREFIX: "as",
    NAMESPACE: "https://www.w3.org/ns/activitystreams#",
    PREFIX_AND_NAMESPACE: { "as": "https://www.w3.org/ns/activitystreams#" },
    NS: _NS$g,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An Object representing some form of Action that has been taken
     */
    Activity: _NS$g("Activity"),
    /**
     * Object
     */
    Object: _NS$g("Object"),
    /**
     * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model
     */
    Link: _NS$g("Link"),
    /**
     * An ordered or unordered collection of Objects or Links
     */
    Collection: _NS$g("Collection"),
    /**
     * A subset of items from a Collection
     */
    CollectionPage: _NS$g("CollectionPage"),
    /**
     * An Image file
     */
    Image: _NS$g("Image"),
    /**
     * A rdf:List variant for Objects and Links
     */
    OrderedItems: _NS$g("OrderedItems"),
    /**
     * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)
     */
    Relationship: _NS$g("Relationship"),
    /**
     * A question of any sort.
     */
    Question: _NS$g("Question"),
    /**
     * A Profile Document
     */
    Profile: _NS$g("Profile"),
    /**
     * A placeholder for a deleted object
     */
    Tombstone: _NS$g("Tombstone"),
    /**
     * A physical or logical location
     */
    Place: _NS$g("Place"),
    /**
     * An ordered subset of items from an OrderedCollection
     */
    OrderedCollectionPage: _NS$g("OrderedCollectionPage"),
    /**
     * Actor accepts the Object
     */
    Accept: _NS$g("Accept"),
    /**
     * Block
     */
    Block: _NS$g("Block"),
    /**
     * Actor is ignoring the Object
     */
    Ignore: _NS$g("Ignore"),
    /**
     * An Activity that has no direct object
     */
    IntransitiveActivity: _NS$g("IntransitiveActivity"),
    /**
     * To Add an Object or Link to Something
     */
    Add: _NS$g("Add"),
    /**
     * Actor announces the object to the target
     */
    Announce: _NS$g("Announce"),
    /**
     * Represents a software application of any sort
     */
    Application: _NS$g("Application"),
    /**
     * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a "check-in")
     */
    Arrive: _NS$g("Arrive"),
    /**
     * A written work. Typically several paragraphs long. For example, a blog post or a news article.
     */
    Article: _NS$g("Article"),
    /**
     * An audio file
     */
    Audio: _NS$g("Audio"),
    /**
     * Represents a digital document/file of any sort
     */
    Document: _NS$g("Document"),
    /**
     * A variation of Collection in which items are strictly ordered
     */
    OrderedCollection: _NS$g("OrderedCollection"),
    /**
     * To Create Something
     */
    Create: _NS$g("Create"),
    /**
     * To Delete Something
     */
    Delete: _NS$g("Delete"),
    /**
     * The actor dislikes the object
     */
    Dislike: _NS$g("Dislike"),
    /**
     * An Event of any kind
     */
    Event: _NS$g("Event"),
    /**
     * To flag something (e.g. flag as inappropriate, flag as spam, etc)
     */
    Flag: _NS$g("Flag"),
    /**
     * To Express Interest in Something
     */
    Follow: _NS$g("Follow"),
    /**
     * A Group of any kind.
     */
    Group: _NS$g("Group"),
    /**
     * To invite someone or something to something
     */
    Invite: _NS$g("Invite"),
    /**
     * To Offer something to someone or something
     */
    Offer: _NS$g("Offer"),
    /**
     * To Join Something
     */
    Join: _NS$g("Join"),
    /**
     * To Leave Something
     */
    Leave: _NS$g("Leave"),
    /**
     * To Like Something
     */
    Like: _NS$g("Like"),
    /**
     * The actor viewed the object
     */
    View: _NS$g("View"),
    /**
     * The actor listened to the object
     */
    Listen: _NS$g("Listen"),
    /**
     * The actor read the object
     */
    Read: _NS$g("Read"),
    /**
     * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.
     */
    Move: _NS$g("Move"),
    /**
     * The actor is traveling to the target. The origin specifies where the actor is traveling from.
     */
    Travel: _NS$g("Travel"),
    /**
     * A specialized Link that represents an @mention
     */
    Mention: _NS$g("Mention"),
    /**
     * A Short note, typically less than a single paragraph. A "tweet" is an example, or a "status update"
     */
    Note: _NS$g("Note"),
    /**
     * A Web Page
     */
    Page: _NS$g("Page"),
    /**
     * A Person
     */
    Person: _NS$g("Person"),
    /**
     * An Organization
     */
    Organization: _NS$g("Organization"),
    /**
     * Actor rejects the Object
     */
    Reject: _NS$g("Reject"),
    /**
     * To Remove Something
     */
    Remove: _NS$g("Remove"),
    /**
     * A service provided by some entity
     */
    Service: _NS$g("Service"),
    /**
     * Actor tentatively accepts the Object
     */
    TentativeAccept: _NS$g("TentativeAccept"),
    /**
     * Actor tentatively rejects the object
     */
    TentativeReject: _NS$g("TentativeReject"),
    /**
     * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.
     */
    Undo: _NS$g("Undo"),
    /**
     * To Update/Modify Something
     */
    Update: _NS$g("Update"),
    /**
     * A Video document of any kind.
     */
    Video: _NS$g("Video"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Subproperty of as:attributedTo that identifies the primary actor
     */
    actor: _NS$g("actor"),
    /**
     * Identifies an entity to which an object is attributed
     */
    attributedTo: _NS$g("attributedTo"),
    /**
     * attachment
     */
    attachment: _NS$g("attachment"),
    /**
     * attachments
     */
    attachments: _NS$g("attachments"),
    /**
     * Identifies the author of an object. Deprecated. Use as:attributedTo instead
     */
    author: _NS$g("author"),
    /**
     * bcc
     */
    bcc: _NS$g("bcc"),
    /**
     * bto
     */
    bto: _NS$g("bto"),
    /**
     * cc
     */
    cc: _NS$g("cc"),
    /**
     * Specifies the context within which an object exists or an activity was performed
     */
    context: _NS$g("context"),
    /**
     * current
     */
    current: _NS$g("current"),
    /**
     * first
     */
    first: _NS$g("first"),
    /**
     * generator
     */
    generator: _NS$g("generator"),
    /**
     * icon
     */
    icon: _NS$g("icon"),
    /**
     * image
     */
    image: _NS$g("image"),
    /**
     * inReplyTo
     */
    inReplyTo: _NS$g("inReplyTo"),
    /**
     * items
     */
    items: _NS$g("items"),
    /**
     * last
     */
    last: _NS$g("last"),
    /**
     * location
     */
    location: _NS$g("location"),
    /**
     * next
     */
    next: _NS$g("next"),
    /**
     * object
     */
    object: _NS$g("object"),
    /**
     * Describes a possible exclusive answer or option for a question.
     */
    oneOf: _NS$g("oneOf"),
    /**
     * Describes a possible inclusive answer or option for a question.
     */
    anyOf: _NS$g("anyOf"),
    /**
     * prev
     */
    prev: _NS$g("prev"),
    /**
     * preview
     */
    preview: _NS$g("preview"),
    /**
     * provider
     */
    provider: _NS$g("provider"),
    /**
     * replies
     */
    replies: _NS$g("replies"),
    /**
     * result
     */
    result: _NS$g("result"),
    /**
     * audience
     */
    audience: _NS$g("audience"),
    /**
     * partOf
     */
    partOf: _NS$g("partOf"),
    /**
     * tag
     */
    tag: _NS$g("tag"),
    /**
     * tags
     */
    tags: _NS$g("tags"),
    /**
     * target
     */
    target: _NS$g("target"),
    /**
     * For certain activities, specifies the entity from which the action is directed.
     */
    origin: _NS$g("origin"),
    /**
     * Indentifies an object used (or to be used) to complete an activity
     */
    instrument: _NS$g("instrument"),
    /**
     * to
     */
    to: _NS$g("to"),
    /**
     * Specifies a link to a specific representation of the Object
     */
    url: _NS$g("url"),
    /**
     * On a Relationship object, identifies the subject. e.g. when saying "John is connected to Sally", 'subject' refers to 'John'
     */
    subject: _NS$g("subject"),
    /**
     * On a Relationship object, describes the type of relationship
     */
    relationship: _NS$g("relationship"),
    /**
     * On a Profile object, describes the object described by the profile
     */
    describes: _NS$g("describes"),
    /**
     * On a Tombstone object, describes the former type of the deleted object
     */
    formerType: _NS$g("formerType"),
    /**
     * Specifies the accuracy around the point established by the longitude and latitude
     */
    accuracy: _NS$g("accuracy"),
    /**
     * The altitude of a place
     */
    altitude: _NS$g("altitude"),
    /**
     * The content of the object.
     */
    content: _NS$g("content"),
    /**
     * name
     */
    name: _NS$g("name"),
    /**
     * downstreamDuplicates
     */
    downstreamDuplicates: _NS$g("downstreamDuplicates"),
    /**
     * The duration of the object
     */
    duration: _NS$g("duration"),
    /**
     * The ending time of the object
     */
    endTime: _NS$g("endTime"),
    /**
     * The display height expressed as device independent pixels
     */
    height: _NS$g("height"),
    /**
     * The target URI of the Link
     */
    href: _NS$g("href"),
    /**
     * A hint about the language of the referenced resource
     */
    hreflang: _NS$g("hreflang"),
    /**
     * id
     */
    id: _NS$g("id"),
    /**
     * The latitude
     */
    latitude: _NS$g("latitude"),
    /**
     * The longitude
     */
    longitude: _NS$g("longitude"),
    /**
     * The MIME Media Type
     */
    mediaType: _NS$g("mediaType"),
    /**
     * objectType
     */
    objectType: _NS$g("objectType"),
    /**
     * Specifies the date and time the object was published
     */
    published: _NS$g("published"),
    /**
     * Specifies a radius around the point established by the longitude and latitude
     */
    radius: _NS$g("radius"),
    /**
     * A numeric rating (>= 0.0, <= 5.0) for the object
     */
    rating: _NS$g("rating"),
    /**
     * The RFC 5988 or HTML5 Link Relation associated with the Link
     */
    rel: _NS$g("rel"),
    /**
     * In a strictly ordered logical collection, specifies the index position of the first item in the items list
     */
    startIndex: _NS$g("startIndex"),
    /**
     * The starting time of the object
     */
    startTime: _NS$g("startTime"),
    /**
     * A short summary of the object
     */
    summary: _NS$g("summary"),
    /**
     * The total number of items in a logical collection
     */
    totalItems: _NS$g("totalItems"),
    /**
     * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.
     */
    units: _NS$g("units"),
    /**
     * Specifies when the object was last updated
     */
    updated: _NS$g("updated"),
    /**
     * upstreamDuplicates
     */
    upstreamDuplicates: _NS$g("upstreamDuplicates"),
    /**
     * verb
     */
    verb: _NS$g("verb"),
    /**
     * Specifies the preferred display width of the content, expressed in terms of device independent pixels.
     */
    width: _NS$g("width"),
    /**
     * Specifies the date and time the object was deleted
     */
    deleted: _NS$g("deleted"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$h = new rdfDataFactory.DataFactory();
function _NS$h(localName) {
    return rdfFactory$h.namedNode("http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var RLOG = {
    PREFIX: "rlog",
    NAMESPACE: "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#",
    PREFIX_AND_NAMESPACE: { "rlog": "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#" },
    NS: _NS$h,
    // *****************
    // All the Classes.
    // *****************
    /**
     * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html
     */
    Level: _NS$h("Level"),
    /**
     * An entry in a log.
     */
    Entry: _NS$h("Entry"),
    /**
     * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.
     */
    StatusCode: _NS$h("StatusCode"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The ALL has the lowest possible rank and is intended to turn on all logging.
     */
    ALL: _NS$h("ALL"),
    /**
     * Attention: the ids here can change, they are just used to define an order over the levels!
     */
    priority: _NS$h("priority"),
    /**
     * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
     */
    DEBUG: _NS$h("DEBUG"),
    /**
     * The ERROR level designates error events that might still allow the application to continue running.
     */
    ERROR: _NS$h("ERROR"),
    /**
     * The FATAL level designates very severe error events that will presumably lead the application to abort.
     */
    FATAL: _NS$h("FATAL"),
    /**
     * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
     */
    INFO: _NS$h("INFO"),
    /**
     * The OFF has the highest possible rank and is intended to turn off logging.
     */
    OFF: _NS$h("OFF"),
    /**
     * The TRACE Level designates finer-grained informational events than the DEBUG.
     */
    TRACE: _NS$h("TRACE"),
    /**
     * The WARN level designates potentially harmful situations.
     */
    WARN: _NS$h("WARN"),
    /**
     * Outputs the fully qualified class name of the caller issuing the logging request.
     */
    className: _NS$h("className"),
    /**
     * The numerical value of the code, e.g. 200, 404 or 42.
     */
    codeId: _NS$h("codeId"),
    /**
     * Logging datetime (or just date)
     */
    date: _NS$h("date"),
    /**
     * Links a log message to a status code.
     */
    hasCode: _NS$h("hasCode"),
    /**
     * logLevel
     */
    level: _NS$h("level"),
    /**
     * Logging message
     */
    message: _NS$h("message"),
    /**
     * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to.
     */
    resource: _NS$h("resource"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$i = new rdfDataFactory.DataFactory();
function _NS$i(localName) {
    return rdfFactory$i.namedNode("http://xmlns.com/foaf/0.1/" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var FOAF = {
    PREFIX: "foaf",
    NAMESPACE: "http://xmlns.com/foaf/0.1/",
    PREFIX_AND_NAMESPACE: { "foaf": "http://xmlns.com/foaf/0.1/" },
    NS: _NS$i,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An agent (eg. person, group, software or physical artifact).
     */
    Agent: _NS$i("Agent"),
    /**
     * A document.
     */
    Document: _NS$i("Document"),
    /**
     * An organization.
     */
    Organization: _NS$i("Organization"),
    /**
     * A project (a collective endeavour of some kind).
     */
    Project: _NS$i("Project"),
    /**
     * A class of Agents.
     */
    Group: _NS$i("Group"),
    /**
     * An image.
     */
    Image: _NS$i("Image"),
    /**
     * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
     */
    LabelProperty: _NS$i("LabelProperty"),
    /**
     * An online account.
     */
    OnlineAccount: _NS$i("OnlineAccount"),
    /**
     * An online chat account.
     */
    OnlineChatAccount: _NS$i("OnlineChatAccount"),
    /**
     * An online e-commerce account.
     */
    OnlineEcommerceAccount: _NS$i("OnlineEcommerceAccount"),
    /**
     * An online gaming account.
     */
    OnlineGamingAccount: _NS$i("OnlineGamingAccount"),
    /**
     * A person.
     */
    Person: _NS$i("Person"),
    /**
     * A personal profile RDF document.
     */
    PersonalProfileDocument: _NS$i("PersonalProfileDocument"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates an account held by this agent.
     */
    account: _NS$i("account"),
    /**
     * Indicates the name (identifier) associated with this online account.
     */
    accountName: _NS$i("accountName"),
    /**
     * Indicates a homepage of the service provide for this online account.
     */
    accountServiceHomepage: _NS$i("accountServiceHomepage"),
    /**
     * The age in years of some agent.
     */
    age: _NS$i("age"),
    /**
     * An AIM chat ID
     */
    aimChatID: _NS$i("aimChatID"),
    /**
     * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
     */
    nick: _NS$i("nick"),
    /**
     * A location that something is based near, for some broadly human notion of near.
     */
    based_near: _NS$i("based_near"),
    /**
     * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
     */
    birthday: _NS$i("birthday"),
    /**
     * A current project this person works on.
     */
    currentProject: _NS$i("currentProject"),
    /**
     * A depiction of some thing.
     */
    depiction: _NS$i("depiction"),
    /**
     * A thing depicted in this representation.
     */
    depicts: _NS$i("depicts"),
    /**
     * A checksum for the DNA of some thing. Joke.
     */
    dnaChecksum: _NS$i("dnaChecksum"),
    /**
     * The family name of some person.
     */
    familyName: _NS$i("familyName"),
    /**
     * The family name of some person.
     */
    family_name: _NS$i("family_name"),
    /**
     * The first name of a person.
     */
    firstName: _NS$i("firstName"),
    /**
     * The underlying or 'focal' entity associated with some SKOS-described concept.
     */
    focus: _NS$i("focus"),
    /**
     * An organization funding a project or person.
     */
    fundedBy: _NS$i("fundedBy"),
    /**
     * A textual geekcode for this person, see http://www.geekcode.com/geek.html
     */
    geekcode: _NS$i("geekcode"),
    /**
     * The gender of this Agent (typically but not necessarily 'male' or 'female').
     */
    gender: _NS$i("gender"),
    /**
     * The given name of some person.
     */
    givenName: _NS$i("givenName"),
    /**
     * The given name of some person.
     */
    givenname: _NS$i("givenname"),
    /**
     * Indicates an account held by this agent.
     */
    holdsAccount: _NS$i("holdsAccount"),
    /**
     * A homepage for some thing.
     */
    homepage: _NS$i("homepage"),
    /**
     * A page or document about this thing.
     */
    page: _NS$i("page"),
    /**
     * A document that this thing is the primary topic of.
     */
    isPrimaryTopicOf: _NS$i("isPrimaryTopicOf"),
    /**
     * An ICQ chat ID
     */
    icqChatID: _NS$i("icqChatID"),
    /**
     * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
     */
    img: _NS$i("img"),
    /**
     * A page about a topic of interest to this person.
     */
    interest: _NS$i("interest"),
    /**
     * The primary topic of some page or document.
     */
    primaryTopic: _NS$i("primaryTopic"),
    /**
     * A jabber ID for something.
     */
    jabberID: _NS$i("jabberID"),
    /**
     * A person known by this person (indicating some level of reciprocated interaction between the parties).
     */
    knows: _NS$i("knows"),
    /**
     * The last name of a person.
     */
    lastName: _NS$i("lastName"),
    /**
     * A logo representing some thing.
     */
    logo: _NS$i("logo"),
    /**
     * Something that was made by this agent.
     */
    made: _NS$i("made"),
    /**
     * An agent that made this thing.
     */
    maker: _NS$i("maker"),
    /**
     * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
     */
    mbox: _NS$i("mbox"),
    /**
     * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
     */
    mbox_sha1sum: _NS$i("mbox_sha1sum"),
    /**
     * Indicates a member of a Group
     */
    member: _NS$i("member"),
    /**
     * Indicates the class of individuals that are a member of a Group
     */
    membershipClass: _NS$i("membershipClass"),
    /**
     * An MSN chat ID
     */
    msnChatID: _NS$i("msnChatID"),
    /**
     * A Myers Briggs (MBTI) personality classification.
     */
    myersBriggs: _NS$i("myersBriggs"),
    /**
     * A name for some thing.
     */
    name: _NS$i("name"),
    /**
     * An OpenID for an Agent.
     */
    openid: _NS$i("openid"),
    /**
     * A topic of some page or document.
     */
    topic: _NS$i("topic"),
    /**
     * A project this person has previously worked on.
     */
    pastProject: _NS$i("pastProject"),
    /**
     * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
     */
    phone: _NS$i("phone"),
    /**
     * A .plan comment, in the tradition of finger and '.plan' files.
     */
    plan: _NS$i("plan"),
    /**
     * A link to the publications of this person.
     */
    publications: _NS$i("publications"),
    /**
     * A homepage of a school attended by the person.
     */
    schoolHomepage: _NS$i("schoolHomepage"),
    /**
     * A sha1sum hash, in hex.
     */
    sha1: _NS$i("sha1"),
    /**
     * A Skype ID
     */
    skypeID: _NS$i("skypeID"),
    /**
     * A string expressing what the user is happy for the general public (normally) to know about their current activity.
     */
    status: _NS$i("status"),
    /**
     * The surname of some person.
     */
    surname: _NS$i("surname"),
    /**
     * A theme.
     */
    theme: _NS$i("theme"),
    /**
     * A derived thumbnail image.
     */
    thumbnail: _NS$i("thumbnail"),
    /**
     * A tipjar document for this agent, describing means for payment and reward.
     */
    tipjar: _NS$i("tipjar"),
    /**
     * Title (Mr, Mrs, Ms, Dr. etc)
     */
    title: _NS$i("title"),
    /**
     * A thing of interest to this person.
     */
    topic_interest: _NS$i("topic_interest"),
    /**
     * A weblog of some thing (whether person, group, company etc.).
     */
    weblog: _NS$i("weblog"),
    /**
     * A work info homepage of some person; a page about their work for some organization.
     */
    workInfoHomepage: _NS$i("workInfoHomepage"),
    /**
     * A workplace homepage of some person; the homepage of an organization they work for.
     */
    workplaceHomepage: _NS$i("workplaceHomepage"),
    /**
     * A Yahoo chat ID
     */
    yahooChatID: _NS$i("yahooChatID"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$j = new rdfDataFactory.DataFactory();
function _NS$j(localName) {
    return rdfFactory$j.namedNode("http://purl.org/linked-data/cube#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var QB = {
    PREFIX: "qb",
    NAMESPACE: "http://purl.org/linked-data/cube#",
    PREFIX_AND_NAMESPACE: { "qb": "http://purl.org/linked-data/cube#" },
    NS: _NS$j,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
     */
    DataSet: _NS$j("DataSet"),
    /**
     * Abstract superclass for everything that can have attributes and dimensions
     */
    Attachable: _NS$j("Attachable"),
    /**
     * A single observation in the cube, may have one or more associated measured values
     */
    Observation: _NS$j("Observation"),
    /**
     * A, possibly arbitrary, group of observations.
     */
    ObservationGroup: _NS$j("ObservationGroup"),
    /**
     * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
     */
    Slice: _NS$j("Slice"),
    /**
     * Abstract super-property of all properties representing dimensions, attributes or measures
     */
    ComponentProperty: _NS$j("ComponentProperty"),
    /**
     * The class of components which represent the dimensions of the cube
     */
    DimensionProperty: _NS$j("DimensionProperty"),
    /**
     * Superclass of all coded ComponentProperties
     */
    CodedProperty: _NS$j("CodedProperty"),
    /**
     * The class of components which represent the measured value of the phenomenon being observed
     */
    MeasureProperty: _NS$j("MeasureProperty"),
    /**
     * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
     */
    AttributeProperty: _NS$j("AttributeProperty"),
    /**
     * Defines the structure of a DataSet or slice
     */
    DataStructureDefinition: _NS$j("DataStructureDefinition"),
    /**
     * Abstract class of things which reference one or more ComponentProperties
     */
    ComponentSet: _NS$j("ComponentSet"),
    /**
     * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
     */
    ComponentSpecification: _NS$j("ComponentSpecification"),
    /**
     * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
     */
    SliceKey: _NS$j("SliceKey"),
    /**
     * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
     */
    HierarchicalCodeList: _NS$j("HierarchicalCodeList"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * indicates the data set of which this observation is a part
     */
    dataSet: _NS$j("dataSet"),
    /**
     * indicates a observation contained within this slice of the data set
     */
    observation: _NS$j("observation"),
    /**
     * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
     */
    observationGroup: _NS$j("observationGroup"),
    /**
     * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
     */
    slice: _NS$j("slice"),
    /**
     * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
     */
    measureType: _NS$j("measureType"),
    /**
     * indicates the structure to which this data set conforms
     */
    structure: _NS$j("structure"),
    /**
     * indicates a component specification which is included in the structure of the dataset
     */
    component: _NS$j("component"),
    /**
     * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
     */
    componentProperty: _NS$j("componentProperty"),
    /**
     * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
     */
    order: _NS$j("order"),
    /**
     * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
      to components correspond to an attribute. Defaults to false (optional).
     */
    componentRequired: _NS$j("componentRequired"),
    /**
     * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
     */
    componentAttachment: _NS$j("componentAttachment"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a dimension
     */
    dimension: _NS$j("dimension"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure
     */
    measure: _NS$j("measure"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a attribute
     */
    attribute: _NS$j("attribute"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
     */
    measureDimension: _NS$j("measureDimension"),
    /**
     * indicates the sub-key corresponding to this slice
     */
    sliceStructure: _NS$j("sliceStructure"),
    /**
     * indicates a slice key which is used for slices in this dataset
     */
    sliceKey: _NS$j("sliceKey"),
    /**
     * gives the concept which is being measured or indicated by a ComponentProperty
     */
    concept: _NS$j("concept"),
    /**
     * gives the code list associated with a CodedProperty
     */
    codeList: _NS$j("codeList"),
    /**
     * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
     */
    hierarchyRoot: _NS$j("hierarchyRoot"),
    /**
     * Specifies a property which relates a parent concept in the hierarchy to a child concept.
     */
    parentChildProperty: _NS$j("parentChildProperty"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$k = new rdfDataFactory.DataFactory();
function _NS$k(localName) {
    return rdfFactory$k.namedNode("http://purl.org/linked-data/sdmx/2009/dimension#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var SDMX_DIMENSION = {
    PREFIX: "sdmx-dimension",
    NAMESPACE: "http://purl.org/linked-data/sdmx/2009/dimension#",
    PREFIX_AND_NAMESPACE: { "sdmx-dimension": "http://purl.org/linked-data/sdmx/2009/dimension#" },
    NS: _NS$k,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The length of time that a person has lived or a thing has existed.
     */
    age: _NS$k("age"),
    /**
     * Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.
     */
    civilStatus: _NS$k("civilStatus"),
    /**
     * Monetary denomination of the object being measured.
     */
    currency: _NS$k("currency"),
    /**
     * The highest level of an educational programme the person has successfully completed.
     */
    educationLev: _NS$k("educationLev"),
    /**
     * The time interval at which observations occur over a given time period.
     */
    freq: _NS$k("freq"),
    /**
     * Job or position held by an individual who performs a set of tasks and duties.
     */
    occupation: _NS$k("occupation"),
    /**
     * The country or geographic area to which the measured statistical phenomenon relates.
     */
    refArea: _NS$k("refArea"),
    /**
     * The period of time or point in time to which the measured observation is intended to refer.
     */
    refPeriod: _NS$k("refPeriod"),
    /**
     * The state of being male or female.
     */
    sex: _NS$k("sex"),
    /**
     * The period of time or point in time to which the measured observation refers.
     */
    timePeriod: _NS$k("timePeriod"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$l = new rdfDataFactory.DataFactory();
function _NS$l(localName) {
    return rdfFactory$l.namedNode("http://www.w3.org/ns/shex#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var SHEX = {
    PREFIX: "shex",
    NAMESPACE: "http://www.w3.org/ns/shex#",
    PREFIX_AND_NAMESPACE: { "shex": "http://www.w3.org/ns/shex#" },
    NS: _NS$l,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Annotations provide a format-independent way to provide additional information about elements in a schema.
     */
    Annotation: _NS$l("Annotation"),
    /**
     * A TripleExpression composed of one or more sub-expressions, all of which must match.
     */
    EachOf: _NS$l("EachOf"),
    /**
     * The abstract class of Triple Expressions.
     */
    TripleExpression: _NS$l("TripleExpression"),
    /**
     * An IRI prefix used for matching IRIs.
     */
    IriStem: _NS$l("IriStem"),
    /**
     * Abstract class for Stems
     */
    Stem: _NS$l("Stem"),
    /**
     * An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.
     */
    IriStemRange: _NS$l("IriStemRange"),
    /**
     * Abstract Class for Stem Ranges
     */
    StemRange: _NS$l("StemRange"),
    /**
     * An Language tag used for matching Literal Languages.
     */
    Language: _NS$l("Language"),
    /**
     * An Language prefix used for matching Literal Languages.
     */
    LanguageStem: _NS$l("LanguageStem"),
    /**
     * An Language prefix (or wildcard) along with a set of excluded values, used for node matching.
     */
    LanguageStemRange: _NS$l("LanguageStemRange"),
    /**
     * An Literal prefix used for matching Literals.
     */
    LiteralStem: _NS$l("LiteralStem"),
    /**
     * An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.
     */
    LiteralStemRange: _NS$l("LiteralStemRange"),
    /**
     * A constraint on the type or value of an RDF Node.
     */
    NodeConstraint: _NS$l("NodeConstraint"),
    /**
     * The abstract class of Shape Expressions.
     */
    ShapeExpression: _NS$l("ShapeExpression"),
    /**
     * The set of kinds of RDF Nodes.
     */
    NodeKind: _NS$l("NodeKind"),
    /**
     * A TripleExpression composed of one or more sub-expressions, one of which must match.
     */
    OneOf: _NS$l("OneOf"),
    /**
     * A Schema contains the set of shapes, used for matching a focus node.
     */
    Schema: _NS$l("Schema"),
    /**
     * A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.
     */
    SemAct: _NS$l("SemAct"),
    /**
     * A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.
     */
    Shape: _NS$l("Shape"),
    /**
     * A ShapeExpression composed of one or more sub-expressions, all of which must match.
     */
    ShapeAnd: _NS$l("ShapeAnd"),
    /**
     * A reference to a shape defined in some external Schema.
     */
    ShapeExternal: _NS$l("ShapeExternal"),
    /**
     * A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.
     */
    ShapeNot: _NS$l("ShapeNot"),
    /**
     * A ShapeExpression composed of one or more sub-expressions, one of which must match.
     */
    ShapeOr: _NS$l("ShapeOr"),
    /**
     * A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.
     */
    TripleConstraint: _NS$l("TripleConstraint"),
    /**
     * Indicates that a stem is a Wildcard, rather than a URI prefix.
     */
    Wildcard: _NS$l("Wildcard"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Annotations on a TripleExpression.
     */
    annotation: _NS$l("annotation"),
    /**
     * Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.
     */
    closed: _NS$l("closed"),
    /**
     * Code executed by Semantic Action.
     */
    code: _NS$l("code"),
    /**
     * A datatype constraint.
     */
    datatype: _NS$l("datatype"),
    /**
     * Values that are excluded from value matching.
     */
    exclusion: _NS$l("exclusion"),
    /**
     * Expression associated with the TripleExpression.
     */
    expression: _NS$l("expression"),
    /**
     * List of 2 or more expressions associated with the TripleExpression.
     */
    expressions: _NS$l("expressions"),
    /**
     * Properties which may have extra values beyond those matched through a constraint.
     */
    extra: _NS$l("extra"),
    /**
     * Regular expression flags
     */
    flags: _NS$l("flags"),
    /**
     * for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.
     */
    fractiondigits: _NS$l("fractiondigits"),
    /**
     * Abstract property of numeric facets on a NodeConstraint.
     */
    numericFacet: _NS$l("numericFacet"),
    /**
     * Constrains the subject of a triple, rather than the object.
     */
    inverse: _NS$l("inverse"),
    /**
     * The value used to match the language tag of a language-tagged string.
     */
    languageTag: _NS$l("languageTag"),
    /**
     * The exact length of the value of the cell.
     */
    length: _NS$l("length"),
    /**
     * An abstract property of string facets on a NodeConstraint.
     */
    stringFacet: _NS$l("stringFacet"),
    /**
     * Maximum number of times this TripleExpression may match; -1 for “*”
     */
    max: _NS$l("max"),
    /**
     * An atomic property that contains a single number that is the maximum valid value (exclusive).
     */
    maxexclusive: _NS$l("maxexclusive"),
    /**
     * An atomic property that contains a single number that is the maximum valid value (inclusive).
     */
    maxinclusive: _NS$l("maxinclusive"),
    /**
     * A numeric atomic property that contains a single integer that is the maximum length of the value.
     */
    maxlength: _NS$l("maxlength"),
    /**
     * Minimum number of times this TripleExpression may match.
     */
    min: _NS$l("min"),
    /**
     * An atomic property that contains a single number that is the minimum valid value (exclusive).
     */
    minexclusive: _NS$l("minexclusive"),
    /**
     * An atomic property that contains a single number that is the minimum valid value (inclusive).
     */
    mininclusive: _NS$l("mininclusive"),
    /**
     * An atomic property that contains a single integer that is the minimum length of the value.
     */
    minlength: _NS$l("minlength"),
    /**
     * Identifier of SemAct extension.
     */
    name: _NS$l("name"),
    /**
     * Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.
     */
    nodeKind: _NS$l("nodeKind"),
    /**
     * An abstract property of string and numeric facets on a NodeConstraint.
     */
    xsFacet: _NS$l("xsFacet"),
    /**
     * The object of an Annotation.
     */
    object: _NS$l("object"),
    /**
     * A regular expression used for matching a value.
     */
    pattern: _NS$l("pattern"),
    /**
     * The predicate of a TripleConstraint or Annotation.
     */
    predicate: _NS$l("predicate"),
    /**
     * Semantic Actions on this TripleExpression.
     */
    semActs: _NS$l("semActs"),
    /**
     * Shape Expression referenced by this shape.
     */
    shapeExpr: _NS$l("shapeExpr"),
    /**
     * A list of 2 or more Shape Expressions referenced by this shape.
     */
    shapeExprs: _NS$l("shapeExprs"),
    /**
     * Shapes in this Schema.
     */
    shapes: _NS$l("shapes"),
    /**
     * A ShapeExpression matched against the focus node prior to any other mapped expressions.
     */
    start: _NS$l("start"),
    /**
     * Semantic Actions run on the Schema.
     */
    startActs: _NS$l("startActs"),
    /**
     * A stem value used for matching or excluding values.
     */
    stem: _NS$l("stem"),
    /**
     * for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n
     */
    totaldigits: _NS$l("totaldigits"),
    /**
     * A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.
     */
    valueExpr: _NS$l("valueExpr"),
    /**
     * A value restriction on a NodeConstraint.
     */
    values: _NS$l("values"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$m = new rdfDataFactory.DataFactory();
function _NS$m(localName) {
    return rdfFactory$m.namedNode("http://www.w3.org/ns/auth/acl#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var ACL = {
    PREFIX: "acl",
    NAMESPACE: "http://www.w3.org/ns/auth/acl#",
    PREFIX_AND_NAMESPACE: { "acl": "http://www.w3.org/ns/auth/acl#" },
    NS: _NS$m,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Any kind of access to a resource. Don't use this, use R W and RW
     */
    Access: _NS$m("Access"),
    /**
     * Append accesses are specific write access which only add information, and do not remove information.
      For text files, for example, append access allows bytes to be added onto the end of the file.
      For RDF graphs, Append access allows adds triples to the graph but does not remove any.
      Append access is useful for dropbox functionality.
      Dropbox can be used for link notification, which the information added is a notification
      that a some link has been made elsewhere relevant to the given resource.
      
     */
    Append: _NS$m("Append"),
    /**
     * write
     */
    Write: _NS$m("Write"),
    /**
     * A class of agents who have been authenticated.
  In other words, anyone can access this resource, but not anonymously.
  The social expectation is that the authentication process will provide an
  identify and a name, or pseudonym.
  (A new ID should not be minted for every access: the intent is that the user
  is able to continue to use the ID for continues interactions with peers,
  and for example to develop a reputation)
  
     */
    AuthenticatedAgent: _NS$m("AuthenticatedAgent"),
    /**
     * An element of access control,
      allowing agent to agents access of some kind to resources or classes of resources
     */
    Authorization: _NS$m("Authorization"),
    /**
     * Allows read/write access to the ACL for the resource(s)
     */
    Control: _NS$m("Control"),
    /**
     * An Origin is basically a web site
          (Note WITHOUT the trailing slash after the domain name and port in its URI)
          and is the basis for controlling access to data by web apps
          in the Same Origin Model of web security.
          All scripts from the same origin are given the same right.
     */
    Origin: _NS$m("Origin"),
    /**
     * The class of read operations
     */
    Read: _NS$m("Read"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The Access Control file for this information resource.
          This may of course be a virtual resource implemented by the access control system.
          Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.
     */
    accessControl: _NS$m("accessControl"),
    /**
     * The information resource to which access is being granted.
     */
    accessTo: _NS$m("accessTo"),
    /**
     * A class of information resources to which access is being granted.
     */
    accessToClass: _NS$m("accessToClass"),
    /**
     * A person or social entity to being given the right
     */
    agent: _NS$m("agent"),
    /**
     * A class of persons or social entities to being given the right
     */
    agentClass: _NS$m("agentClass"),
    /**
     * A group of persons or social entities to being given the right.
            The right is given to any entity which is a vcard:member of the group,
            as defined by the document received when the Group is dereferenced.
     */
    agentGroup: _NS$m("agentGroup"),
    /**
     * If a resource has no ACL file (it is 404),
          then access to the resource if given by the ACL of the immediately
          containing directory, or failing that (404) the ACL of the recursively next
          containing directory which has an ACL file.
          Within that ACL file,
          any Authentication which has that directory as its acl:default applies to the
          resource. (The highest directory must have an ACL file.)
  
     */
    default: _NS$m("default"),
    /**
     * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
          Was: A directory for which this authorization is used for new files in the directory.
     */
    defaultForNew: _NS$m("defaultForNew"),
    /**
     * Delegates a person or another agent to act on behalf of the agent.
      For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
     */
    delegates: _NS$m("delegates"),
    /**
     * A mode of access such as read or write.
     */
    mode: _NS$m("mode"),
    /**
     * A web application, identified by its Origin, such as
          <https://scripts.example.com>, being given the right.
          When a user of the web application at a certain origin accesses the server,
          then the browser sets the Origin: header to warn that a possibly untrusted webapp
          is being used.
          Then, BOTH the user AND the origin must have the required access.
     */
    origin: _NS$m("origin"),
    /**
     * The person or other agent which owns this.
      For example, the owner of a file in a filesystem.
      There is a sense of right to control.   Typically defaults to the agent who craeted
      something but can be changed.
     */
    owner: _NS$m("owner"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$n = new rdfDataFactory.DataFactory();
function _NS$n(localName) {
    return rdfFactory$n.namedNode("http://www.w3.org/ns/posix/stat#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var POSIX = {
    PREFIX: "posix",
    NAMESPACE: "http://www.w3.org/ns/posix/stat#",
    PREFIX_AND_NAMESPACE: { "posix": "http://www.w3.org/ns/posix/stat#" },
    NS: _NS$n,
    // *******************
    // All the Properties.
    // *******************
    /**
     * Time of last access
     */
    atime: _NS$n("atime"),
    /**
     * Blocksize for file system I/O
     */
    blksize: _NS$n("blksize"),
    /**
     * Number of 512B blocks allocated
     */
    blocks: _NS$n("blocks"),
    /**
     * Time of last status change
     */
    ctime: _NS$n("ctime"),
    /**
     * ID of device containing file
     */
    dev: _NS$n("dev"),
    /**
     * Group ID of owner
     */
    gid: _NS$n("gid"),
    /**
     * inode number
     */
    ino: _NS$n("ino"),
    /**
     * Protection
     */
    mode: _NS$n("mode"),
    /**
     * Time of last modification
     */
    mtime: _NS$n("mtime"),
    /**
     * Number of hard links
     */
    nlink: _NS$n("nlink"),
    /**
     * Device ID (if special file)
     */
    rdev: _NS$n("rdev"),
    /**
     * Total size, in bytes
     */
    size: _NS$n("size"),
    /**
     * User ID of owner
     */
    uid: _NS$n("uid"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$o = new rdfDataFactory.DataFactory();
function _NS$o(localName) {
    return rdfFactory$o.namedNode("https://www.w3.org/2002/12/cal/ical#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var ICAL = {
    PREFIX: "ical",
    NAMESPACE: "https://www.w3.org/2002/12/cal/ical#",
    PREFIX_AND_NAMESPACE: { "ical": "https://www.w3.org/2002/12/cal/ical#" },
    NS: _NS$o,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Provide a grouping of component properties that define an alarm.
     */
    Valarm: _NS$o("Valarm"),
    /**
     *
     */
    Value_CAL_ADDRESS: _NS$o("Value_CAL-ADDRESS"),
    /**
     *
     */
    Value_DATE: _NS$o("Value_DATE"),
    /**
     *
     */
    Value_DATE_TIME: _NS$o("Value_DATE-TIME"),
    /**
     *
     */
    Value_DURATION: _NS$o("Value_DURATION"),
    /**
     *
     */
    Value_PERIOD: _NS$o("Value_PERIOD"),
    /**
     *
     */
    Value_RECUR: _NS$o("Value_RECUR"),
    /**
     * Provide a grouping of component properties that describe an event.
     */
    Vevent: _NS$o("Vevent"),
    /**
     * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.
     */
    Vfreebusy: _NS$o("Vfreebusy"),
    /**
     * Provide a grouping of component properties that describe a journal entry.
     */
    Vjournal: _NS$o("Vjournal"),
    /**
     * Provide a grouping of component properties that defines a time zone.
     */
    Vtimezone: _NS$o("Vtimezone"),
    /**
     * Provide a grouping of calendar properties that describe a to-do.
     */
    Vtodo: _NS$o("Vtodo"),
    // *******************
    // All the Properties.
    // *******************
    /**
     *
          default value type: URI
     */
    attach: _NS$o("attach"),
    /**
     *
          value type: TEXT
     */
    description: _NS$o("description"),
    /**
     *
          value type: TEXT
     */
    summary: _NS$o("summary"),
    /**
     *
          value type: DURATION
     */
    duration: _NS$o("duration"),
    /**
     *
          value type: CAL-ADDRESS
     */
    attendee: _NS$o("attendee"),
    /**
     *
          value type: TEXT
     */
    action: _NS$o("action"),
    /**
     *
          value type: INTEGER
     */
    repeat: _NS$o("repeat"),
    /**
     *
          default value type: DURATION
     */
    trigger: _NS$o("trigger"),
    /**
     *
          value type: TEXT
     */
    categories: _NS$o("categories"),
    /**
     *
          value type: TEXT
     */
    class: _NS$o("class"),
    /**
     *
          value type: TEXT
     */
    comment: _NS$o("comment"),
    /**
     * This property specifies information related to the global position for the activity specified by a calendar component.
     */
    geo: _NS$o("geo"),
    /**
     *
          value type: TEXT
     */
    location: _NS$o("location"),
    /**
     *
          value type: INTEGER
     */
    priority: _NS$o("priority"),
    /**
     *
          value type: TEXT
     */
    resources: _NS$o("resources"),
    /**
     *
          value type: TEXT
     */
    status: _NS$o("status"),
    /**
     *
          default value type: DATE-TIME
     */
    dtend: _NS$o("dtend"),
    /**
     *
          default value type: DATE-TIME
     */
    dtstart: _NS$o("dtstart"),
    /**
     *
          value type: TEXT
     */
    transp: _NS$o("transp"),
    /**
     *
          value type: TEXT
     */
    contact: _NS$o("contact"),
    /**
     *
          value type: CAL-ADDRESS
     */
    organizer: _NS$o("organizer"),
    /**
     *
          value type: TEXT
     */
    relatedTo: _NS$o("relatedTo"),
    /**
     *
          value type: URI
     */
    url: _NS$o("url"),
    /**
     *
          value type: TEXT
     */
    uid: _NS$o("uid"),
    /**
     *
          value type: RECUR
     */
    exrule: _NS$o("exrule"),
    /**
     *
          default value type: DATE-TIME
     */
    rdate: _NS$o("rdate"),
    /**
     *
          value type: RECUR
     */
    rrule: _NS$o("rrule"),
    /**
     *
          value type: DATE-TIME
     */
    created: _NS$o("created"),
    /**
     *
          value type: DATE-TIME
     */
    dtstamp: _NS$o("dtstamp"),
    /**
     *
          value type: DATE-TIME
     */
    lastModified: _NS$o("lastModified"),
    /**
     *
          value type: integer
     */
    sequence: _NS$o("sequence"),
    /**
     *
          value type: TEXT
     */
    requestStatus: _NS$o("requestStatus"),
    /**
     *
          value type: PERIOD
     */
    freebusy: _NS$o("freebusy"),
    /**
     *
          value type: TEXT
     */
    tzid: _NS$o("tzid"),
    /**
     *
          value type: TEXT
     */
    tzname: _NS$o("tzname"),
    /**
     *
          value type: UTC-OFFSET
     */
    tzoffsetfrom: _NS$o("tzoffsetfrom"),
    /**
     *
          value type: UTC-OFFSET
     */
    tzoffsetto: _NS$o("tzoffsetto"),
    /**
     *
          value type: URI
     */
    tzurl: _NS$o("tzurl"),
    /**
     *
          value type: INTEGER
     */
    percentComplete: _NS$o("percentComplete"),
    /**
     *
          value type: DATE-TIME
     */
    completed: _NS$o("completed"),
    /**
     *
          default value type: DATE-TIME
     */
    due: _NS$o("due"),
    /**
     *
          value type: TEXT
     */
    X_: _NS$o("X-"),
    /**
     *
          value type: TEXT
     */
    calscale: _NS$o("calscale"),
    /**
     *
          default value type: DATE-TIME
     */
    exdate: _NS$o("exdate"),
    /**
     *
          value type: TEXT
     */
    method: _NS$o("method"),
    /**
     *
          value type: TEXT
     */
    prodid: _NS$o("prodid"),
    /**
     *
          default value type: DATE-TIME
     */
    recurrenceId: _NS$o("recurrenceId"),
    /**
     *
          value type: TEXT
     */
    version: _NS$o("version"),
};

/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var rdfFactory$p = new rdfDataFactory.DataFactory();
function _NS$p(localName) {
    return rdfFactory$p.namedNode("http://www.w3.org/ns/prov#" + localName);
}
// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
var PROV_O = {
    PREFIX: "prov-o",
    NAMESPACE: "http://www.w3.org/ns/prov#",
    PREFIX_AND_NAMESPACE: { "prov-o": "http://www.w3.org/ns/prov#" },
    NS: _NS$p,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Activity
     */
    Activity: _NS$p("Activity"),
    /**
     * Entity
     */
    Entity: _NS$p("Entity"),
    /**
     * ActivityInfluence provides additional descriptions of an Activity's binary influence upon any other kind of resource. Instances of ActivityInfluence use the prov:activity property to cite the influencing Activity.
     */
    ActivityInfluence: _NS$p("ActivityInfluence"),
    /**
     * An instance of prov:Influence provides additional descriptions about the binary prov:wasInfluencedBy relation from some influenced Activity, Entity, or Agent to the influencing Activity, Entity, or Agent. For example, :stomach_ache prov:wasInfluencedBy :spoon; prov:qualifiedInfluence [ a prov:Influence; prov:entity :spoon; :foo :bar ] . Because prov:Influence is a broad relation, the more specific relations (Communication, Delegation, End, etc.) should be used when applicable.
     */
    Influence: _NS$p("Influence"),
    /**
     * EntityInfluence provides additional descriptions of an Entity's binary influence upon any other kind of resource. Instances of EntityInfluence use the prov:entity property to cite the influencing Entity.
     */
    EntityInfluence: _NS$p("EntityInfluence"),
    /**
     * Agent
     */
    Agent: _NS$p("Agent"),
    /**
     * An instantaneous event, or event for short, happens in the world and marks a change in the world, in its activities and in its entities. The term 'event' is commonly used in process algebra with a similar meaning. Events represent communications or interactions; they are assumed to be atomic and instantaneous.
     */
    InstantaneousEvent: _NS$p("InstantaneousEvent"),
    /**
     * AgentInfluence provides additional descriptions of an Agent's binary influence upon any other kind of resource. Instances of AgentInfluence use the prov:agent property to cite the influencing Agent.
     */
    AgentInfluence: _NS$p("AgentInfluence"),
    /**
     * An instance of prov:Association provides additional descriptions about the binary prov:wasAssociatedWith relation from an prov:Activity to some prov:Agent that had some responsiblity for it. For example, :baking prov:wasAssociatedWith :baker; prov:qualifiedAssociation [ a prov:Association; prov:agent :baker; :foo :bar ].
     */
    Association: _NS$p("Association"),
    /**
     * An instance of prov:Attribution provides additional descriptions about the binary prov:wasAttributedTo relation from an prov:Entity to some prov:Agent that had some responsible for it. For example, :cake prov:wasAttributedTo :baker; prov:qualifiedAttribution [ a prov:Attribution; prov:entity :baker; :foo :bar ].
     */
    Attribution: _NS$p("Attribution"),
    /**
     * Note that there are kinds of bundles (e.g. handwritten letters, audio recordings, etc.) that are not expressed in PROV-O, but can be still be described by PROV-O.
     */
    Bundle: _NS$p("Bundle"),
    /**
     * Collection
     */
    Collection: _NS$p("Collection"),
    /**
     * An instance of prov:Communication provides additional descriptions about the binary prov:wasInformedBy relation from an informed prov:Activity to the prov:Activity that informed it. For example, :you_jumping_off_bridge prov:wasInformedBy :everyone_else_jumping_off_bridge; prov:qualifiedCommunication [ a prov:Communication; prov:activity :everyone_else_jumping_off_bridge; :foo :bar ].
     */
    Communication: _NS$p("Communication"),
    /**
     * An instance of prov:Delegation provides additional descriptions about the binary prov:actedOnBehalfOf relation from a performing prov:Agent to some prov:Agent for whom it was performed. For example, :mixing prov:wasAssociatedWith :toddler . :toddler prov:actedOnBehalfOf :mother; prov:qualifiedDelegation [ a prov:Delegation; prov:entity :mother; :foo :bar ].
     */
    Delegation: _NS$p("Delegation"),
    /**
     * An instance of prov:Derivation provides additional descriptions about the binary prov:wasDerivedFrom relation from some derived prov:Entity to another prov:Entity from which it was derived. For example, :chewed_bubble_gum prov:wasDerivedFrom :unwrapped_bubble_gum; prov:qualifiedDerivation [ a prov:Derivation; prov:entity :unwrapped_bubble_gum; :foo :bar ].
     */
    Derivation: _NS$p("Derivation"),
    /**
     * EmptyCollection
     */
    EmptyCollection: _NS$p("EmptyCollection"),
    /**
     * An instance of prov:End provides additional descriptions about the binary prov:wasEndedBy relation from some ended prov:Activity to an prov:Entity that ended it. For example, :ball_game prov:wasEndedBy :buzzer; prov:qualifiedEnd [ a prov:End; prov:entity :buzzer; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ].
     */
    End: _NS$p("End"),
    /**
     * An instance of prov:Generation provides additional descriptions about the binary prov:wasGeneratedBy relation from a generated prov:Entity to the prov:Activity that generated it. For example, :cake prov:wasGeneratedBy :baking; prov:qualifiedGeneration [ a prov:Generation; prov:activity :baking; :foo :bar ].
     */
    Generation: _NS$p("Generation"),
    /**
     * An instance of prov:Invalidation provides additional descriptions about the binary prov:wasInvalidatedBy relation from an invalidated prov:Entity to the prov:Activity that invalidated it. For example, :uncracked_egg prov:wasInvalidatedBy :baking; prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :baking; :foo :bar ].
     */
    Invalidation: _NS$p("Invalidation"),
    /**
     * Location
     */
    Location: _NS$p("Location"),
    /**
     * Organization
     */
    Organization: _NS$p("Organization"),
    /**
     * Person
     */
    Person: _NS$p("Person"),
    /**
     * There exist no prescriptive requirement on the nature of plans, their representation, the actions or steps they consist of, or their intended goals. Since plans may evolve over time, it may become necessary to track their provenance, so plans themselves are entities. Representing the plan explicitly in the provenance can be useful for various tasks: for example, to validate the execution as represented in the provenance record, to manage expectation failures, or to provide explanations.
     */
    Plan: _NS$p("Plan"),
    /**
     * An instance of prov:PrimarySource provides additional descriptions about the binary prov:hadPrimarySource relation from some secondary prov:Entity to an earlier, primary prov:Entity. For example, :blog prov:hadPrimarySource :newsArticle; prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :newsArticle; :foo :bar ] .
     */
    PrimarySource: _NS$p("PrimarySource"),
    /**
     * An instance of prov:Quotation provides additional descriptions about the binary prov:wasQuotedFrom relation from some taken prov:Entity from an earlier, larger prov:Entity. For example, :here_is_looking_at_you_kid prov:wasQuotedFrom :casablanca_script; prov:qualifiedQuotation [ a prov:Quotation; prov:entity :casablanca_script; :foo :bar ].
     */
    Quotation: _NS$p("Quotation"),
    /**
     * An instance of prov:Revision provides additional descriptions about the binary prov:wasRevisionOf relation from some newer prov:Entity to an earlier prov:Entity. For example, :draft_2 prov:wasRevisionOf :draft_1; prov:qualifiedRevision [ a prov:Revision; prov:entity :draft_1; :foo :bar ].
     */
    Revision: _NS$p("Revision"),
    /**
     * Role
     */
    Role: _NS$p("Role"),
    /**
     * SoftwareAgent
     */
    SoftwareAgent: _NS$p("SoftwareAgent"),
    /**
     * An instance of prov:Start provides additional descriptions about the binary prov:wasStartedBy relation from some started prov:Activity to an prov:Entity that started it. For example, :foot_race prov:wasStartedBy :bang; prov:qualifiedStart [ a prov:Start; prov:entity :bang; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ] .
     */
    Start: _NS$p("Start"),
    /**
     * An instance of prov:Usage provides additional descriptions about the binary prov:used relation from some prov:Activity to an prov:Entity that it used. For example, :keynote prov:used :podium; prov:qualifiedUsage [ a prov:Usage; prov:entity :podium; :foo :bar ].
     */
    Usage: _NS$p("Usage"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Classify prov-o terms into three categories, including 'starting-point', 'qualifed', and 'extended'. This classification is used by the prov-o html document to gently introduce prov-o terms to its users.
     */
    category: _NS$p("category"),
    /**
     * Classify prov-o terms into six components according to prov-dm, including 'agents-responsibility', 'alternate', 'annotations', 'collections', 'derivations', and 'entities-activities'. This classification is used so that readers of prov-o specification can find its correspondence with the prov-dm specification.
     */
    component: _NS$p("component"),
    /**
     * A reference to the principal section of the PROV-CONSTRAINTS document that describes this concept.
     */
    constraints: _NS$p("constraints"),
    /**
     * A definition quoted from PROV-DM or PROV-CONSTRAINTS that describes the concept expressed with this OWL term.
     */
    definition: _NS$p("definition"),
    /**
     * A reference to the principal section of the PROV-DM document that describes this concept.
     */
    dm: _NS$p("dm"),
    /**
     * A reference to the principal section of the PROV-DM document that describes this concept.
     */
    n: _NS$p("n"),
    /**
     * activity
     */
    activity: _NS$p("activity"),
    /**
     * The _optional_ Activity of an Influence, which used, generated, invalidated, or was the responsibility of some Entity. This property is _not_ used by ActivityInfluence (use prov:activity instead).
     */
    hadActivity: _NS$p("hadActivity"),
    /**
     * When the prov-o term does not have a definition drawn from prov-dm, and the prov-o editor provides one.
     */
    editorsDefinition: _NS$p("editorsDefinition"),
    /**
     * agent
     */
    agent: _NS$p("agent"),
    /**
     * Classes and properties used to qualify relationships are annotated with prov:unqualifiedForm to indicate the property used to assert an unqualified provenance relation.
     */
    unqualifiedForm: _NS$p("unqualifiedForm"),
    /**
     * An prov:Agent that had some (unspecified) responsibility for the occurrence of this prov:Activity.
     */
    wasAssociatedWith: _NS$p("wasAssociatedWith"),
    /**
     * Attribution is the ascribing of an entity to an agent.
     */
    wasAttributedTo: _NS$p("wasAttributedTo"),
    /**
     * An activity a2 is dependent on or informed by another activity a1, by way of some unspecified entity that is generated by a1 and used by a2.
     */
    wasInformedBy: _NS$p("wasInformedBy"),
    /**
     * An object property to express the accountability of an agent towards another agent. The subordinate agent acted on behalf of the responsible agent in an actual activity.
     */
    actedOnBehalfOf: _NS$p("actedOnBehalfOf"),
    /**
     * The more specific subproperties of prov:wasDerivedFrom (i.e., prov:wasQuotedFrom, prov:wasRevisionOf, prov:hadPrimarySource) should be used when applicable.
     */
    wasDerivedFrom: _NS$p("wasDerivedFrom"),
    /**
     * End is when an activity is deemed to have ended. An end may refer to an entity, known as trigger, that terminated the activity.
     */
    wasEndedBy: _NS$p("wasEndedBy"),
    /**
     * entity
     */
    entity: _NS$p("entity"),
    /**
     * wasGeneratedBy
     */
    wasGeneratedBy: _NS$p("wasGeneratedBy"),
    /**
     * Because prov:wasInfluencedBy is a broad relation, its more specific subproperties (e.g. prov:wasInformedBy, prov:actedOnBehalfOf, prov:wasEndedBy, etc.) should be used when applicable.
     */
    wasInfluencedBy: _NS$p("wasInfluencedBy"),
    /**
     * wasInvalidatedBy
     */
    wasInvalidatedBy: _NS$p("wasInvalidatedBy"),
    /**
     * The Location of any resource.
     */
    atLocation: _NS$p("atLocation"),
    /**
     * hadPrimarySource
     */
    hadPrimarySource: _NS$p("hadPrimarySource"),
    /**
     * An entity is derived from an original entity by copying, or 'quoting', some or all of it.
     */
    wasQuotedFrom: _NS$p("wasQuotedFrom"),
    /**
     * A revision is a derivation that revises an entity into a revised version.
     */
    wasRevisionOf: _NS$p("wasRevisionOf"),
    /**
     * The _optional_ Role that an Entity assumed in the context of an Activity. For example, :baking prov:used :spoon; prov:qualified [ a prov:Usage; prov:entity :spoon; prov:hadRole roles:mixing_implement ].
     */
    hadRole: _NS$p("hadRole"),
    /**
     * Start is when an activity is deemed to have started. A start may refer to an entity, known as trigger, that initiated the activity.
     */
    wasStartedBy: _NS$p("wasStartedBy"),
    /**
     * A prov:Entity that was used by this prov:Activity. For example, :baking prov:used :spoon, :egg, :oven .
     */
    used: _NS$p("used"),
    /**
     * If this Agent prov:actedOnBehalfOf Agent :ag, then it can qualify how with prov:qualifiedResponsibility [ a prov:Responsibility;  prov:agent :ag; :foo :bar ].
     */
    qualifiedDelegation: _NS$p("qualifiedDelegation"),
    /**
     * PROV-O does not define all property inverses. The directionalities defined in PROV-O should be given preference over those not defined. However, if users wish to name the inverse of a PROV-O property, the local name given by prov:inverse should be used.
     */
    inverse: _NS$p("inverse"),
    /**
     * This annotation property links a subproperty of prov:wasInfluencedBy with the subclass of prov:Influence and the qualifying property that are used to qualify it.
  
  Example annotation:
  
      prov:wasGeneratedBy prov:qualifiedForm prov:qualifiedGeneration, prov:Generation .
  
  Then this unqualified assertion:
  
      :entity1 prov:wasGeneratedBy :activity1 .
  
  can be qualified by adding:
  
     :entity1 prov:qualifiedGeneration :entity1Gen .
     :entity1Gen
         a prov:Generation, prov:Influence;
         prov:activity :activity1;
         :customValue 1337 .
  
  Note how the value of the unqualified influence (prov:wasGeneratedBy :activity1) is mirrored as the value of the prov:activity (or prov:entity, or prov:agent) property on the influence class.
     */
    qualifiedForm: _NS$p("qualifiedForm"),
    /**
     * Subproperties of prov:influencer are used to cite the object of an unqualified PROV-O triple whose predicate is a subproperty of prov:wasInfluencedBy (e.g. prov:used, prov:wasGeneratedBy). prov:influencer is used much like rdf:object is used.
     */
    influencer: _NS$p("influencer"),
    /**
     * A note by the OWL development team about how this term expresses the PROV-DM concept, or how it should be used in context of semantic web or linked data.
     */
    editorialNote: _NS$p("editorialNote"),
    /**
     * alternateOf
     */
    alternateOf: _NS$p("alternateOf"),
    /**
     * specializationOf
     */
    specializationOf: _NS$p("specializationOf"),
    /**
     *
     */
    aq: _NS$p("aq"),
    /**
     *
     */
    sharesDefinitionWith: _NS$p("sharesDefinitionWith"),
    /**
     * The time at which an InstantaneousEvent occurred, in the form of xsd:dateTime.
     */
    atTime: _NS$p("atTime"),
    /**
     * The time at which an activity ended. See also prov:startedAtTime.
     */
    endedAtTime: _NS$p("endedAtTime"),
    /**
     * The time at which an entity was completely created and is available for use.
     */
    generatedAtTime: _NS$p("generatedAtTime"),
    /**
     * The time at which an entity was invalidated (i.e., no longer usable).
     */
    invalidatedAtTime: _NS$p("invalidatedAtTime"),
    /**
     * The time at which an activity started. See also prov:endedAtTime.
     */
    startedAtTime: _NS$p("startedAtTime"),
    /**
     * generated
     */
    generated: _NS$p("generated"),
    /**
     * influenced
     */
    influenced: _NS$p("influenced"),
    /**
     * The _optional_ Generation involved in an Entity's Derivation.
     */
    hadGeneration: _NS$p("hadGeneration"),
    /**
     * hadMember
     */
    hadMember: _NS$p("hadMember"),
    /**
     * The _optional_ Plan adopted by an Agent in Association with some Activity. Plan specifications are out of the scope of this specification.
     */
    hadPlan: _NS$p("hadPlan"),
    /**
     * If this Entity prov:hadPrimarySource Entity :e, then it can qualify how using prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :e; :foo :bar ].
     */
    qualifiedPrimarySource: _NS$p("qualifiedPrimarySource"),
    /**
     * The _optional_ Usage involved in an Entity's Derivation.
     */
    hadUsage: _NS$p("hadUsage"),
    /**
     * invalidated
     */
    invalidated: _NS$p("invalidated"),
    /**
     * The position that this OWL term should be listed within documentation. The scope of the documentation (e.g., among all terms, among terms within a prov:category, among properties applying to a particular class, etc.) is unspecified.
     */
    order: _NS$p("order"),
    /**
     * If this Activity prov:wasAssociatedWith Agent :ag, then it can qualify the Association using prov:qualifiedAssociation [ a prov:Association;  prov:agent :ag; :foo :bar ].
     */
    qualifiedAssociation: _NS$p("qualifiedAssociation"),
    /**
     * Because prov:qualifiedInfluence is a broad relation, the more specific relations (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be used when applicable.
     */
    qualifiedInfluence: _NS$p("qualifiedInfluence"),
    /**
     * If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was influenced using prov:qualifiedAttribution [ a prov:Attribution;  prov:agent :ag; :foo :bar ].
     */
    qualifiedAttribution: _NS$p("qualifiedAttribution"),
    /**
     * If this Activity prov:wasInformedBy Activity :a, then it can qualify how it was influenced using prov:qualifiedCommunication [ a prov:Communication;  prov:activity :a; :foo :bar ].
     */
    qualifiedCommunication: _NS$p("qualifiedCommunication"),
    /**
     * If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was derived using prov:qualifiedDerivation [ a prov:Derivation;  prov:entity :e; :foo :bar ].
     */
    qualifiedDerivation: _NS$p("qualifiedDerivation"),
    /**
     * If this Activity prov:wasEndedBy Entity :e1, then it can qualify how it was ended using prov:qualifiedEnd [ a prov:End;  prov:entity :e1; :foo :bar ].
     */
    qualifiedEnd: _NS$p("qualifiedEnd"),
    /**
     * If this Activity prov:generated Entity :e, then it can qualify how it performed the Generation using prov:qualifiedGeneration [ a prov:Generation;  prov:entity :e; :foo :bar ].
     */
    qualifiedGeneration: _NS$p("qualifiedGeneration"),
    /**
     * If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation;  prov:activity :a; :foo :bar ].
     */
    qualifiedInvalidation: _NS$p("qualifiedInvalidation"),
    /**
     * If this Entity prov:wasQuotedFrom Entity :e, then it can qualify how using prov:qualifiedQuotation [ a prov:Quotation;  prov:entity :e; :foo :bar ].
     */
    qualifiedQuotation: _NS$p("qualifiedQuotation"),
    /**
     * If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was revised using prov:qualifiedRevision [ a prov:Revision;  prov:entity :e; :foo :bar ].
     */
    qualifiedRevision: _NS$p("qualifiedRevision"),
    /**
     * If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was started using prov:qualifiedStart [ a prov:Start;  prov:entity :e1; :foo :bar ].
     */
    qualifiedStart: _NS$p("qualifiedStart"),
    /**
     * If this Activity prov:used Entity :e, then it can qualify how it used it using prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ].
     */
    qualifiedUsage: _NS$p("qualifiedUsage"),
    /**
     *
     */
    todo: _NS$p("todo"),
    /**
     * value
     */
    value: _NS$p("value"),
};

exports.ACL = ACL;
exports.AS = AS;
exports.DCTERMS = DCTERMS;
exports.FOAF = FOAF;
exports.HTTP = HTTP;
exports.HTTPH = HTTPH;
exports.ICAL = ICAL;
exports.LDP = LDP;
exports.OLO = OLO;
exports.OWL = OWL;
exports.POSIX = POSIX;
exports.PROV_O = PROV_O;
exports.QB = QB;
exports.RDF = RDF;
exports.RDFS = RDFS;
exports.RDF_INRUPT_EXT = RDF_INRUPT_EXT;
exports.RLOG = RLOG;
exports.SCHEMA_INRUPT_EXT = SCHEMA_INRUPT_EXT;
exports.SDMX_DIMENSION = SDMX_DIMENSION;
exports.SHEX = SHEX;
exports.SKOS = SKOS;
exports.UI = UI;
exports.VANN = VANN;
exports.VCARD = VCARD;
exports.VCARD_INRUPT_EXT = VCARD_INRUPT_EXT;
exports.XSD = XSD;
