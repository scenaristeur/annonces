/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.3]
 * as part of artifact: [vocab-common-rdf], version: [0.7.2]
 * on 'Wednesday, January 13, 2021 2:32 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - HTTP Ontology - terms from the HTTP protocol
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/2011/http#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
const HTTP: any = {
  PREFIX: "http",
  NAMESPACE: "http://www.w3.org/2011/http#",
  PREFIX_AND_NAMESPACE: { "http": "http://www.w3.org/2011/http#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A connection used for HTTP transfer.
   */
  Connection: _NS("Connection"),

  /**
   * An entity header in an HTTP message.
   */
  EntityHeader: _NS("EntityHeader"),

  /**
   * A header in an HTTP message.
   */
  MessageHeader: _NS("MessageHeader"),

  /**
   * A general header in an HTTP message.
   */
  GeneralHeader: _NS("GeneralHeader"),

  /**
   * A part of a deconstructed header value.
   */
  HeaderElement: _NS("HeaderElement"),

  /**
   * A header name.
   */
  HeaderName: _NS("HeaderName"),

  /**
   * An HTTP message.
   */
  Message: _NS("Message"),

  /**
   * The HTTP method used for the request.
   */
  Method: _NS("Method"),

  /**
   * A parameter for a part of a header value.
   */
  Parameter: _NS("Parameter"),

  /**
   * An HTTP request.
   */
  Request: _NS("Request"),

  /**
   * A header in an HTTP request message.
   */
  RequestHeader: _NS("RequestHeader"),

  /**
   * An HTTP response.
   */
  Response: _NS("Response"),

  /**
   * A header in an HTTP response message.
   */
  ResponseHeader: _NS("ResponseHeader"),

  /**
   * The status code of an HTTP response.
   */
  StatusCode: _NS("StatusCode"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * The absolute request URI.
   */
  absoluteURI: _NS("absoluteURI"),

  /**
   * The request URI of an HTTP request.
   */
  requestURI: _NS("requestURI"),

  /**
   * The absolute path sort of request URI.
   */
  absolutePath: _NS("absolutePath"),

  /**
   * The authority sort of request URI.
   */
  authority: _NS("authority"),

  /**
   * The entity body of an HTTP message.
   */
  body: _NS("body"),

  /**
   * The authority of a connection used for the HTTP transfer.
   */
  connectionAuthority: _NS("connectionAuthority"),

  /**
   * The name of a header element.
   */
  elementName: _NS("elementName"),

  /**
   * The value of a header element.
   */
  elementValue: _NS("elementValue"),

  /**
   * The name of an HTTP header field.
   */
  fieldName: _NS("fieldName"),

  /**
   * The value of an HTTP header field.
   */
  fieldValue: _NS("fieldValue"),

  /**
   * The deconstructed parts of an HTTP header value.
   */
  headerElements: _NS("headerElements"),

  /**
   * The name of an HTTP header.
   */
  hdrName: _NS("hdrName"),

  /**
   * The headers in an HTTP message.
   */
  headers: _NS("headers"),

  /**
   * The HTTP version of an HTTP message.
   */
  httpVersion: _NS("httpVersion"),

  /**
   * The HTTP method used for the HTTP request.
   */
  mthd: _NS("mthd"),

  /**
   * The HTTP method name used for the HTTP request.
   */
  methodName: _NS("methodName"),

  /**
   * The name of a parameter in a part of a deconstructed HTTP header value.
   */
  paramName: _NS("paramName"),

  /**
   * The parameters in a part of a deconstructed HTTP header value.
   */
  params: _NS("params"),

  /**
   * The value of a parameter in a part of a deconstructed HTTP header value.
   */
  paramValue: _NS("paramValue"),

  /**
   * The reason phrase (status text) of an HTTP response.
   */
  reasonPhrase: _NS("reasonPhrase"),

  /**
   * The HTTP requests made via a connection.
   */
  requests: _NS("requests"),

  /**
   * The HTTP response sent in answer to an HTTP request.
   */
  resp: _NS("resp"),

  /**
   * The status code of an HTTP response.
   */
  sc: _NS("sc"),

  /**
   * The status code number.
   */
  statusCodeNumber: _NS("statusCodeNumber"),

  /**
   * The status code value of an HTTP response.
   */
  statusCodeValue: _NS("statusCodeValue"),
 }

export default HTTP;
