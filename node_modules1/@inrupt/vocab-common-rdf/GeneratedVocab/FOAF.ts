/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.3]
 * as part of artifact: [vocab-common-rdf], version: [0.7.2]
 * on 'Wednesday, January 13, 2021 2:32 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - Friend of a friend, v0.99
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://xmlns.com/foaf/0.1/${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
const FOAF: any = {
  PREFIX: "foaf",
  NAMESPACE: "http://xmlns.com/foaf/0.1/",
  PREFIX_AND_NAMESPACE: { "foaf": "http://xmlns.com/foaf/0.1/" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * An agent (eg. person, group, software or physical artifact).
   */
  Agent: _NS("Agent"),

  /**
   * A document.
   */
  Document: _NS("Document"),

  /**
   * An organization.
   */
  Organization: _NS("Organization"),

  /**
   * A project (a collective endeavour of some kind).
   */
  Project: _NS("Project"),

  /**
   * A class of Agents.
   */
  Group: _NS("Group"),

  /**
   * An image.
   */
  Image: _NS("Image"),

  /**
   * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
   */
  LabelProperty: _NS("LabelProperty"),

  /**
   * An online account.
   */
  OnlineAccount: _NS("OnlineAccount"),

  /**
   * An online chat account.
   */
  OnlineChatAccount: _NS("OnlineChatAccount"),

  /**
   * An online e-commerce account.
   */
  OnlineEcommerceAccount: _NS("OnlineEcommerceAccount"),

  /**
   * An online gaming account.
   */
  OnlineGamingAccount: _NS("OnlineGamingAccount"),

  /**
   * A person.
   */
  Person: _NS("Person"),

  /**
   * A personal profile RDF document.
   */
  PersonalProfileDocument: _NS("PersonalProfileDocument"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates an account held by this agent.
   */
  account: _NS("account"),

  /**
   * Indicates the name (identifier) associated with this online account.
   */
  accountName: _NS("accountName"),

  /**
   * Indicates a homepage of the service provide for this online account.
   */
  accountServiceHomepage: _NS("accountServiceHomepage"),

  /**
   * The age in years of some agent.
   */
  age: _NS("age"),

  /**
   * An AIM chat ID
   */
  aimChatID: _NS("aimChatID"),

  /**
   * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
   */
  nick: _NS("nick"),

  /**
   * A location that something is based near, for some broadly human notion of near.
   */
  based_near: _NS("based_near"),

  /**
   * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
   */
  birthday: _NS("birthday"),

  /**
   * A current project this person works on.
   */
  currentProject: _NS("currentProject"),

  /**
   * A depiction of some thing.
   */
  depiction: _NS("depiction"),

  /**
   * A thing depicted in this representation.
   */
  depicts: _NS("depicts"),

  /**
   * A checksum for the DNA of some thing. Joke.
   */
  dnaChecksum: _NS("dnaChecksum"),

  /**
   * The family name of some person.
   */
  familyName: _NS("familyName"),

  /**
   * The family name of some person.
   */
  family_name: _NS("family_name"),

  /**
   * The first name of a person.
   */
  firstName: _NS("firstName"),

  /**
   * The underlying or 'focal' entity associated with some SKOS-described concept.
   */
  focus: _NS("focus"),

  /**
   * An organization funding a project or person.
   */
  fundedBy: _NS("fundedBy"),

  /**
   * A textual geekcode for this person, see http://www.geekcode.com/geek.html
   */
  geekcode: _NS("geekcode"),

  /**
   * The gender of this Agent (typically but not necessarily 'male' or 'female').
   */
  gender: _NS("gender"),

  /**
   * The given name of some person.
   */
  givenName: _NS("givenName"),

  /**
   * The given name of some person.
   */
  givenname: _NS("givenname"),

  /**
   * Indicates an account held by this agent.
   */
  holdsAccount: _NS("holdsAccount"),

  /**
   * A homepage for some thing.
   */
  homepage: _NS("homepage"),

  /**
   * A page or document about this thing.
   */
  page: _NS("page"),

  /**
   * A document that this thing is the primary topic of.
   */
  isPrimaryTopicOf: _NS("isPrimaryTopicOf"),

  /**
   * An ICQ chat ID
   */
  icqChatID: _NS("icqChatID"),

  /**
   * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
   */
  img: _NS("img"),

  /**
   * A page about a topic of interest to this person.
   */
  interest: _NS("interest"),

  /**
   * The primary topic of some page or document.
   */
  primaryTopic: _NS("primaryTopic"),

  /**
   * A jabber ID for something.
   */
  jabberID: _NS("jabberID"),

  /**
   * A person known by this person (indicating some level of reciprocated interaction between the parties).
   */
  knows: _NS("knows"),

  /**
   * The last name of a person.
   */
  lastName: _NS("lastName"),

  /**
   * A logo representing some thing.
   */
  logo: _NS("logo"),

  /**
   * Something that was made by this agent.
   */
  made: _NS("made"),

  /**
   * An agent that made this thing.
   */
  maker: _NS("maker"),

  /**
   * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
   */
  mbox: _NS("mbox"),

  /**
   * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
   */
  mbox_sha1sum: _NS("mbox_sha1sum"),

  /**
   * Indicates a member of a Group
   */
  member: _NS("member"),

  /**
   * Indicates the class of individuals that are a member of a Group
   */
  membershipClass: _NS("membershipClass"),

  /**
   * An MSN chat ID
   */
  msnChatID: _NS("msnChatID"),

  /**
   * A Myers Briggs (MBTI) personality classification.
   */
  myersBriggs: _NS("myersBriggs"),

  /**
   * A name for some thing.
   */
  name: _NS("name"),

  /**
   * An OpenID for an Agent.
   */
  openid: _NS("openid"),

  /**
   * A topic of some page or document.
   */
  topic: _NS("topic"),

  /**
   * A project this person has previously worked on.
   */
  pastProject: _NS("pastProject"),

  /**
   * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
   */
  phone: _NS("phone"),

  /**
   * A .plan comment, in the tradition of finger and '.plan' files.
   */
  plan: _NS("plan"),

  /**
   * A link to the publications of this person.
   */
  publications: _NS("publications"),

  /**
   * A homepage of a school attended by the person.
   */
  schoolHomepage: _NS("schoolHomepage"),

  /**
   * A sha1sum hash, in hex.
   */
  sha1: _NS("sha1"),

  /**
   * A Skype ID
   */
  skypeID: _NS("skypeID"),

  /**
   * A string expressing what the user is happy for the general public (normally) to know about their current activity.
   */
  status: _NS("status"),

  /**
   * The surname of some person.
   */
  surname: _NS("surname"),

  /**
   * A theme.
   */
  theme: _NS("theme"),

  /**
   * A derived thumbnail image.
   */
  thumbnail: _NS("thumbnail"),

  /**
   * A tipjar document for this agent, describing means for payment and reward.
   */
  tipjar: _NS("tipjar"),

  /**
   * Title (Mr, Mrs, Ms, Dr. etc)
   */
  title: _NS("title"),

  /**
   * A thing of interest to this person.
   */
  topic_interest: _NS("topic_interest"),

  /**
   * A weblog of some thing (whether person, group, company etc.).
   */
  weblog: _NS("weblog"),

  /**
   * A work info homepage of some person; a page about their work for some organization.
   */
  workInfoHomepage: _NS("workInfoHomepage"),

  /**
   * A workplace homepage of some person; the homepage of an organization they work for.
   */
  workplaceHomepage: _NS("workplaceHomepage"),

  /**
   * A Yahoo chat ID
   */
  yahooChatID: _NS("yahooChatID"),
 }

export default FOAF;
