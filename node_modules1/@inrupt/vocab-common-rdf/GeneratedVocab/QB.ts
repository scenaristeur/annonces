/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.3]
 * as part of artifact: [vocab-common-rdf], version: [0.7.2]
 * on 'Wednesday, January 13, 2021 2:32 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - The RDF Data Cube Vocabulary
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://purl.org/linked-data/cube#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
const QB: any = {
  PREFIX: "qb",
  NAMESPACE: "http://purl.org/linked-data/cube#",
  PREFIX_AND_NAMESPACE: { "qb": "http://purl.org/linked-data/cube#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
   */
  DataSet: _NS("DataSet"),

  /**
   * Abstract superclass for everything that can have attributes and dimensions
   */
  Attachable: _NS("Attachable"),

  /**
   * A single observation in the cube, may have one or more associated measured values
   */
  Observation: _NS("Observation"),

  /**
   * A, possibly arbitrary, group of observations.
   */
  ObservationGroup: _NS("ObservationGroup"),

  /**
   * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
   */
  Slice: _NS("Slice"),

  /**
   * Abstract super-property of all properties representing dimensions, attributes or measures
   */
  ComponentProperty: _NS("ComponentProperty"),

  /**
   * The class of components which represent the dimensions of the cube
   */
  DimensionProperty: _NS("DimensionProperty"),

  /**
   * Superclass of all coded ComponentProperties
   */
  CodedProperty: _NS("CodedProperty"),

  /**
   * The class of components which represent the measured value of the phenomenon being observed
   */
  MeasureProperty: _NS("MeasureProperty"),

  /**
   * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
   */
  AttributeProperty: _NS("AttributeProperty"),

  /**
   * Defines the structure of a DataSet or slice
   */
  DataStructureDefinition: _NS("DataStructureDefinition"),

  /**
   * Abstract class of things which reference one or more ComponentProperties
   */
  ComponentSet: _NS("ComponentSet"),

  /**
   * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
   */
  ComponentSpecification: _NS("ComponentSpecification"),

  /**
   * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
   */
  SliceKey: _NS("SliceKey"),

  /**
   * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
   */
  HierarchicalCodeList: _NS("HierarchicalCodeList"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * indicates the data set of which this observation is a part
   */
  dataSet: _NS("dataSet"),

  /**
   * indicates a observation contained within this slice of the data set
   */
  observation: _NS("observation"),

  /**
   * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
   */
  observationGroup: _NS("observationGroup"),

  /**
   * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
   */
  slice: _NS("slice"),

  /**
   * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
   */
  measureType: _NS("measureType"),

  /**
   * indicates the structure to which this data set conforms
   */
  structure: _NS("structure"),

  /**
   * indicates a component specification which is included in the structure of the dataset
   */
  component: _NS("component"),

  /**
   * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
   */
  componentProperty: _NS("componentProperty"),

  /**
   * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
   */
  order: _NS("order"),

  /**
   * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
    to components correspond to an attribute. Defaults to false (optional).
   */
  componentRequired: _NS("componentRequired"),

  /**
   * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
   */
  componentAttachment: _NS("componentAttachment"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a dimension
   */
  dimension: _NS("dimension"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a measure
   */
  measure: _NS("measure"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a attribute
   */
  attribute: _NS("attribute"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
   */
  measureDimension: _NS("measureDimension"),

  /**
   * indicates the sub-key corresponding to this slice
   */
  sliceStructure: _NS("sliceStructure"),

  /**
   * indicates a slice key which is used for slices in this dataset
   */
  sliceKey: _NS("sliceKey"),

  /**
   * gives the concept which is being measured or indicated by a ComponentProperty
   */
  concept: _NS("concept"),

  /**
   * gives the code list associated with a CodedProperty
   */
  codeList: _NS("codeList"),

  /**
   * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
   */
  hierarchyRoot: _NS("hierarchyRoot"),

  /**
   * Specifies a property which relates a parent concept in the hierarchy to a child concept.
   */
  parentChildProperty: _NS("parentChildProperty"),
 }

export default QB;
