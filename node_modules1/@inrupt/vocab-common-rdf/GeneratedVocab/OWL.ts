/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.3]
 * as part of artifact: [vocab-common-rdf], version: [0.7.2]
 * on 'Wednesday, January 13, 2021 2:32 AM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - OWL (Web Ontology Language) - a Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/2002/07/owl#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
const OWL: any = {
  PREFIX: "owl",
  NAMESPACE: "http://www.w3.org/2002/07/owl#",
  PREFIX_AND_NAMESPACE: { "owl": "http://www.w3.org/2002/07/owl#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of ontologies.
   */
  Ontology: _NS("Ontology"),

  /**
   * The class of collections of pairwise different individuals.
   */
  AllDifferent: _NS("AllDifferent"),

  /**
   * The class of collections of pairwise disjoint classes.
   */
  AllDisjointClasses: _NS("AllDisjointClasses"),

  /**
   * The class of collections of pairwise disjoint properties.
   */
  AllDisjointProperties: _NS("AllDisjointProperties"),

  /**
   * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
   */
  Annotation: _NS("Annotation"),

  /**
   * The class of annotation properties.
   */
  AnnotationProperty: _NS("AnnotationProperty"),

  /**
   * The class of asymmetric properties.
   */
  AsymmetricProperty: _NS("AsymmetricProperty"),

  /**
   * The class of object properties.
   */
  ObjectProperty: _NS("ObjectProperty"),

  /**
   * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
   */
  Axiom: _NS("Axiom"),

  /**
   * The class of OWL classes.
   */
  Class: _NS("Class"),

  /**
   * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
   */
  DataRange: _NS("DataRange"),

  /**
   * The class of data properties.
   */
  DatatypeProperty: _NS("DatatypeProperty"),

  /**
   * The class of deprecated classes.
   */
  DeprecatedClass: _NS("DeprecatedClass"),

  /**
   * The class of deprecated properties.
   */
  DeprecatedProperty: _NS("DeprecatedProperty"),

  /**
   * The class of functional properties.
   */
  FunctionalProperty: _NS("FunctionalProperty"),

  /**
   * The class of inverse-functional properties.
   */
  InverseFunctionalProperty: _NS("InverseFunctionalProperty"),

  /**
   * The class of irreflexive properties.
   */
  IrreflexiveProperty: _NS("IrreflexiveProperty"),

  /**
   * The class of named individuals.
   */
  NamedIndividual: _NS("NamedIndividual"),

  /**
   * The class of OWL individuals.
   */
  Thing: _NS("Thing"),

  /**
   * The class of negative property assertions.
   */
  NegativePropertyAssertion: _NS("NegativePropertyAssertion"),

  /**
   * This is the empty class.
   */
  Nothing: _NS("Nothing"),

  /**
   * The class of ontology properties.
   */
  OntologyProperty: _NS("OntologyProperty"),

  /**
   * The class of reflexive properties.
   */
  ReflexiveProperty: _NS("ReflexiveProperty"),

  /**
   * The class of property restrictions.
   */
  Restriction: _NS("Restriction"),

  /**
   * The class of symmetric properties.
   */
  SymmetricProperty: _NS("SymmetricProperty"),

  /**
   * The class of transitive properties.
   */
  TransitiveProperty: _NS("TransitiveProperty"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * The annotation property that provides version information for an ontology or another OWL construct.
   */
  versionInfo: _NS("versionInfo"),

  /**
   * The property that determines the class that a universal property restriction refers to.
   */
  allValuesFrom: _NS("allValuesFrom"),

  /**
   * The property that determines the predicate of an annotated axiom or annotated annotation.
   */
  annotatedProperty: _NS("annotatedProperty"),

  /**
   * The property that determines the subject of an annotated axiom or annotated annotation.
   */
  annotatedSource: _NS("annotatedSource"),

  /**
   * The property that determines the object of an annotated axiom or annotated annotation.
   */
  annotatedTarget: _NS("annotatedTarget"),

  /**
   * The property that determines the predicate of a negative property assertion.
   */
  assertionProperty: _NS("assertionProperty"),

  /**
   * The annotation property that indicates that a given ontology is backward compatible with another ontology.
   */
  backwardCompatibleWith: _NS("backwardCompatibleWith"),

  /**
   * The data property that does not relate any individual to any data value.
   */
  bottomDataProperty: _NS("bottomDataProperty"),

  /**
   * The object property that does not relate any two individuals.
   */
  bottomObjectProperty: _NS("bottomObjectProperty"),

  /**
   * The property that determines the cardinality of an exact cardinality restriction.
   */
  cardinality: _NS("cardinality"),

  /**
   * The property that determines that a given class is the complement of another class.
   */
  complementOf: _NS("complementOf"),

  /**
   * The property that determines that a given data range is the complement of another data range with respect to the data domain.
   */
  datatypeComplementOf: _NS("datatypeComplementOf"),

  /**
   * The annotation property that indicates that a given entity has been deprecated.
   */
  deprecated: _NS("deprecated"),

  /**
   * The property that determines that two given individuals are different.
   */
  differentFrom: _NS("differentFrom"),

  /**
   * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
   */
  disjointUnionOf: _NS("disjointUnionOf"),

  /**
   * The property that determines that two given classes are disjoint.
   */
  disjointWith: _NS("disjointWith"),

  /**
   * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
   */
  distinctMembers: _NS("distinctMembers"),

  /**
   * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
   */
  equivalentClass: _NS("equivalentClass"),

  /**
   * The property that determines that two given properties are equivalent.
   */
  equivalentProperty: _NS("equivalentProperty"),

  /**
   * The property that determines the collection of properties that jointly build a key.
   */
  hasKey: _NS("hasKey"),

  /**
   * The property that determines the property that a self restriction refers to.
   */
  hasSelf: _NS("hasSelf"),

  /**
   * The property that determines the individual that a has-value restriction refers to.
   */
  hasValue: _NS("hasValue"),

  /**
   * The annotation property that indicates that a given ontology is incompatible with another ontology.
   */
  incompatibleWith: _NS("incompatibleWith"),

  /**
   * The property that determines the collection of classes or data ranges that build an intersection.
   */
  intersectionOf: _NS("intersectionOf"),

  /**
   * The property that determines that two given properties are inverse.
   */
  inverseOf: _NS("inverseOf"),

  /**
   * The property that determines the cardinality of a maximum cardinality restriction.
   */
  maxCardinality: _NS("maxCardinality"),

  /**
   * The property that determines the cardinality of a maximum qualified cardinality restriction.
   */
  maxQualifiedCardinality: _NS("maxQualifiedCardinality"),

  /**
   * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
   */
  members: _NS("members"),

  /**
   * The property that determines the cardinality of a minimum cardinality restriction.
   */
  minCardinality: _NS("minCardinality"),

  /**
   * The property that determines the cardinality of a minimum qualified cardinality restriction.
   */
  minQualifiedCardinality: _NS("minQualifiedCardinality"),

  /**
   * The property that determines the class that a qualified object cardinality restriction refers to.
   */
  onClass: _NS("onClass"),

  /**
   * The property that determines the data range that a qualified data cardinality restriction refers to.
   */
  onDataRange: _NS("onDataRange"),

  /**
   * The property that determines the datatype that a datatype restriction refers to.
   */
  onDatatype: _NS("onDatatype"),

  /**
   * The property that determines the collection of individuals or data values that build an enumeration.
   */
  oneOf: _NS("oneOf"),

  /**
   * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
   */
  onProperties: _NS("onProperties"),

  /**
   * The property that determines the property that a property restriction refers to.
   */
  onProperty: _NS("onProperty"),

  /**
   * The annotation property that indicates the predecessor ontology of a given ontology.
   */
  priorVersion: _NS("priorVersion"),

  /**
   * The property that determines the n-tuple of properties that build a sub property chain of a given property.
   */
  propertyChainAxiom: _NS("propertyChainAxiom"),

  /**
   * The property that determines that two given properties are disjoint.
   */
  propertyDisjointWith: _NS("propertyDisjointWith"),

  /**
   * The property that determines the cardinality of an exact qualified cardinality restriction.
   */
  qualifiedCardinality: _NS("qualifiedCardinality"),

  /**
   * The property that determines that two given individuals are equal.
   */
  sameAs: _NS("sameAs"),

  /**
   * The property that determines the class that an existential property restriction refers to.
   */
  someValuesFrom: _NS("someValuesFrom"),

  /**
   * The property that determines the subject of a negative property assertion.
   */
  sourceIndividual: _NS("sourceIndividual"),

  /**
   * The property that determines the object of a negative object property assertion.
   */
  targetIndividual: _NS("targetIndividual"),

  /**
   * The property that determines the value of a negative data property assertion.
   */
  targetValue: _NS("targetValue"),

  /**
   * The data property that relates every individual to every data value.
   */
  topDataProperty: _NS("topDataProperty"),

  /**
   * The object property that relates every two individuals.
   */
  topObjectProperty: _NS("topObjectProperty"),

  /**
   * The property that determines the collection of classes or data ranges that build a union.
   */
  unionOf: _NS("unionOf"),

  /**
   * The property that determines the collection of facet-value pairs that define a datatype restriction.
   */
  withRestrictions: _NS("withRestrictions"),
 }

export default OWL;
