"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchWithCookies = void 0;
require("reflect-metadata");
const tsyringe_1 = require("tsyringe");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
const constant_1 = require("./constant");
const IssuerConfigFetcher_1 = require("./login/oidc/IssuerConfigFetcher");
const fetchWithCookies = (info, init) => {
    return window.fetch(info, {
        ...init,
        credentials: "include",
    });
};
exports.fetchWithCookies = fetchWithCookies;
let ClientAuthentication = class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.login = async (sessionId, options) => {
            var _a, _b, _c;
            await this.sessionInfoManager.clear(sessionId);
            const redirectUrl = oidc_client_ext_1.removeOidcQueryParam((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);
            await this.loginHandler.handle({
                sessionId,
                oidcIssuer: options.oidcIssuer,
                redirectUrl,
                clientId: options.clientId,
                clientSecret: options.clientSecret,
                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,
                popUp: options.popUp || false,
                handleRedirect: options.handleRedirect,
                tokenType: (_c = options.tokenType) !== null && _c !== void 0 ? _c : "DPoP",
                prompt: options.prompt,
            });
        };
        this.fetch = exports.fetchWithCookies;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = (info, init) => window.fetch(info, init);
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.validateCurrentSession = async () => {
            const currentSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
            if (currentSessionId === null) {
                return null;
            }
            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);
            if (sessionInfo === undefined ||
                sessionInfo.idToken === undefined ||
                sessionInfo.clientAppId === undefined ||
                sessionInfo.issuer === undefined) {
                return null;
            }
            const issuerConfig = await this.issuerConfigFetcher.fetchConfig(sessionInfo.issuer);
            try {
                const jwks = await IssuerConfigFetcher_1.getJwks(issuerConfig);
                if (await oidc_client_ext_1.validateIdToken(sessionInfo.idToken, jwks, sessionInfo.issuer, sessionInfo.clientAppId)) {
                    return sessionInfo;
                }
            }
            catch (e) {
            }
            return null;
        };
        this.handleIncomingRedirect = async (url) => {
            const redirectInfo = await this.redirectHandler.handle(url);
            this.fetch = redirectInfo.fetch;
            const cleanedUpUrl = new URL(url);
            cleanedUpUrl.searchParams.delete("state");
            cleanedUpUrl.searchParams.delete("code");
            cleanedUpUrl.searchParams.delete("id_token");
            cleanedUpUrl.searchParams.delete("access_token");
            window.history.replaceState(null, "", cleanedUpUrl.toString());
            return {
                isLoggedIn: redirectInfo.isLoggedIn,
                webId: redirectInfo.webId,
                sessionId: redirectInfo.sessionId,
                expirationDate: redirectInfo.expirationDate,
            };
        };
    }
};
ClientAuthentication = __decorate([
    tsyringe_1.injectable(),
    __param(0, tsyringe_1.inject("loginHandler")),
    __param(1, tsyringe_1.inject("redirectHandler")),
    __param(2, tsyringe_1.inject("logoutHandler")),
    __param(3, tsyringe_1.inject("sessionInfoManager")),
    __param(4, tsyringe_1.inject("issuerConfigFetcher")),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object])
], ClientAuthentication);
exports.default = ClientAuthentication;
//# sourceMappingURL=ClientAuthentication.js.map