import "reflect-metadata";
import { ILoginInputOptions, ILoginHandler, ILogoutHandler, IRedirectHandler, ISessionInfo, ISessionInfoManager, IIssuerConfigFetcher, ISessionInternalInfo } from "@inrupt/solid-client-authn-core";
export declare const fetchWithCookies: (info: RequestInfo, init?: RequestInit | undefined) => ReturnType<typeof fetch>;
export default class ClientAuthentication {
    private loginHandler;
    private redirectHandler;
    private logoutHandler;
    private sessionInfoManager;
    private issuerConfigFetcher;
    constructor(loginHandler: ILoginHandler, redirectHandler: IRedirectHandler, logoutHandler: ILogoutHandler, sessionInfoManager: ISessionInfoManager, issuerConfigFetcher: IIssuerConfigFetcher);
    login: (sessionId: string, options: ILoginInputOptions & {
        prompt?: string;
    }) => Promise<void>;
    fetch: (info: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;
    logout: (sessionId: string) => Promise<void>;
    getSessionInfo: (sessionId: string) => Promise<(ISessionInfo & ISessionInternalInfo) | undefined>;
    getAllSessionInfo: () => Promise<ISessionInfo[]>;
    validateCurrentSession: () => Promise<(ISessionInfo & ISessionInternalInfo) | null>;
    handleIncomingRedirect: (url: string) => Promise<ISessionInfo | undefined>;
}
