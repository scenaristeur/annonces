{"remainingRequest":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Smag\\Documents\\dev\\bon-prix\\src\\store\\modules\\annonce\\index.js","dependencies":[{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\src\\store\\modules\\annonce\\index.js","mtime":1616527767501},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Smag/Documents/dev/bon-prix/src/store/modules/annonce/index.js"],"names":["auth","FC","fc","Notif","state","annonces","path","agora_url","getters","actions","update","context","a","storage","rootState","solid","url","id","created","undefined","Date","toISOString","modified","push","creator","webId","console","log","createFile","encodeURI","JSON","stringify","commit","notif","alert","delete","deleteFile","init","itemExists","createFolder","readFolder","folder","files","f","readFile","parse","mutations","idx","findIndex","x","Object","assign","filter","setAgoraUrl","namespaced"],"mappings":"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","sourcesContent":["import auth from 'solid-auth-client';\r\nimport FC from 'solid-file-client'\r\nconst fc = new FC( auth )\r\nimport { Notif } from '@/components/annonce/Notif.js'\r\n\r\nconst state = () => ({\r\n  annonces: [],\r\n  path: \"public/annonces/\",\r\n  agora_url:\"https://agora.solidcommunity.net/public/Annonce/annonces/\"\r\n})\r\n\r\n// getters\r\nconst getters = {}\r\n\r\n// actions\r\nconst actions = {\r\n  async update(context, a){\r\n    let storage = context.rootState.solid.storage;\r\n    if(storage != null){\r\n      a.url = storage+context.state.path+a.id+'.json'\r\n      a.created == undefined ? a.created = new Date().toISOString() : \"\"\r\n      a.modified == undefined ? a.modified = [new Date()] : a.modified.push(new Date())\r\n      a.creator = context.rootState.solid.webId;\r\n\r\n      console.log(a)\r\n      try{\r\n        await fc.createFile(encodeURI(a.url), JSON.stringify(a), 'application/json')\r\n        context.commit('update', a)\r\n        let notif = new Notif(context.state.agora_url, a)\r\n        console.log(notif)\r\n\r\n      }catch(e){\r\n        alert(e)\r\n      }\r\n    }\r\n  },\r\n\r\n  async delete(context,id){\r\n    let storage = context.rootState.solid.storage;\r\n    if(storage != null){\r\n      let url = storage+context.state.path+id+'.json'\r\n      try{\r\n        await fc.deleteFile(encodeURI(url))\r\n        context.commit('delete', id)\r\n      }catch(e){\r\n        alert(e)\r\n      }\r\n    }\r\n  },\r\n\r\n\r\n\r\n  async init(context){\r\n    let storage = context.rootState.solid.storage;\r\n    if(storage != null){\r\n      try{\r\n        let path = storage+context.state.path\r\n        if (!await fc.itemExists(path)){\r\n          await fc.createFolder(path)\r\n        }\r\n        let folder = await fc.readFolder(path)\r\n        console.log(folder)\r\n        let annonces = []\r\n\r\n        for await (const f of folder.files) {\r\n          annonces.push(JSON.parse(await fc.readFile(f.url)))\r\n        }\r\n        //  await folder.files.map( function(x) {\r\n        //   let f =  fc.readFile(x.url)\r\n        //   return `${f}`\r\n        // })\r\n        console.log(annonces)\r\n        context.state.annonces = annonces\r\n      }catch(e){\r\n        alert(e)\r\n      }\r\n    }else{\r\n      context.state.annonces = []\r\n    }\r\n  }\r\n\r\n  // async login(context, issuer){\r\n  //   console.log(context, issuer)\r\n  //   if (!getDefaultSession().info.isLoggedIn) {\r\n  //     // The `login()` redirects the user to their identity provider;\r\n  //     // i.e., moves the user away from the current page.\r\n  //     await login({\r\n  //       // Specify the URL of the user's Solid Identity Provider; e.g., \"https://inrupt.net\"\r\n  //       oidcIssuer: issuer,\r\n  //       // Specify the URL the Solid Identity Provider should redirect to after the user logs in,\r\n  //       // e.g., the current page for a single-page app.\r\n  //       redirectUrl: window.location.href,\r\n  //       restorePreviousSession: true\r\n  //     });\r\n  //   }\r\n  // },\r\n  // async logout(context){\r\n  //   console.log(context)\r\n  //   await getDefaultSession().logout()\r\n  //   context.commit('setWebId', null)\r\n  //\r\n  // },\r\n  // async webId(context, webId){\r\n  //   context.commit('setWebId',webId)\r\n  //   if (webId != null){\r\n  //\r\n  //     //  let webId = await getDefaultSession().info.webId\r\n  //     // For example, the user must be someone with Read access to the specified URL.\r\n  //     const userDataset = await getSolidDataset(\r\n  //       //  \"https://docs-example.inrupt.net/profile/card\", {\r\n  //       webId, {\r\n  //         fetch: fetch\r\n  //       });\r\n  //       console.log(userDataset)\r\n  //\r\n  //       const profile = getThing(\r\n  //         userDataset,\r\n  //         webId\r\n  //       );\r\n  //\r\n  //       const lastName = getStringNoLocale(profile, SCHEMA_INRUPT_EXT.familyName);\r\n  //       const fname = getStringNoLocale(profile, FOAF.firstName);\r\n  //       const role = getStringNoLocale(profile, VCARD.role);\r\n  //\r\n  //       console.log(lastName, fname, role)\r\n  //\r\n  //       // 3. Retrieve specific data from the retrieved thing; i.e. profile.\r\n  //\r\n  //       // 3a. Get a single string data value from the profile.\r\n  //       // Specifically, the operation returns the profile's VCARD.fn\r\n  //       // (i.e., \"http://www.w3.org/2006/vcard/ns#fn\") value as a string.\r\n  //\r\n  //       const fn = getStringNoLocale(profile, VCARD.fn);\r\n  //\r\n  //       // 3b. Get multiple URL data from the profile.\r\n  //       // Specifically , the operation returns the profile's FOAF.knows\r\n  //       // (i.e., \"http://xmlns.com/foaf/0.1/knows\") values as an array of URLs.\r\n  //       // The URLs point to the Things representing Persons.\r\n  //\r\n  //       const acquaintances = getUrlAll(profile, FOAF.knows);\r\n  //\r\n  //       console.log(fn, acquaintances)\r\n  //\r\n  //       //  console.log(\"SPACE\",SPACE)\r\n  //       let storage = getUrl(profile, WS.storage);\r\n  //       console.log(\"storage\", storage)\r\n  //\r\n  //       context.commit('setStorage', storage)\r\n  //\r\n  //     }else{\r\n  //       context.commit('setStorage', null)\r\n  //     }\r\n  //     //   if (webId != null){\r\n  //     //     let storage = `${await ldflex.data[webId].storage}`\r\n  //     //     context.commit('setStorage', storage)\r\n  //     //   //  console.log(\"rootstate\",context.rootState.ldp_store)\r\n  //     // //    context.commit('ldp_store/setServer', {name: webId+' storage', url: storage}, { root: true })\r\n  //     //   //  context.rootState.ldp_store.commit('setServer', {name: webId+' storage', url: storage})\r\n  //     //   }else{\r\n  //     //     context.commit('setStorage', null)\r\n  //     //   //  context.commit('ldp_store/setServer', {name: 'Localhost', url: 'http://localhost:3000'}, { root: true })\r\n  //     //\r\n  //     //   }\r\n  //     //   let groups = []\r\n  //     //   console.log(\"TODO: remplacer par solid-client-js peut-il eviter les nombreux appels ?\")\r\n  //     //   for await (const group of ldflex.data[webId]['http://www.w3.org/ns/org#memberOf']){\r\n  //     //     //  console.log(`${group}`)\r\n  //     //     let g = {url:`${group}`, name: await ldflex.data[`${group}`].vcard$fn}\r\n  //     //     groups.push(g)\r\n  //     //     context.commit('setGroups',groups)\r\n  //     //   }\r\n  //     //\r\n  //     // }\r\n  //   }\r\n}\r\n\r\n// mutations\r\nconst mutations = {\r\n  update(state, a){\r\n    let idx = state.annonces.findIndex(x => x.id === a.id)\r\n    if (idx === -1) {\r\n      state.annonces.push(a)\r\n    } else {\r\n      Object.assign(state.annonces[idx], a)\r\n    }\r\n    // console.log(commit)\r\n  },\r\n  delete(state, id){\r\n    state.annonces = state.annonces.filter(x => x.id != id)\r\n  },\r\n  setAgoraUrl(state, url){\r\n    state.agora_url = url\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}\r\n"]}]}