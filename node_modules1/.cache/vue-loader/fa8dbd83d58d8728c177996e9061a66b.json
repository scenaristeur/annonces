{"remainingRequest":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Smag\\Documents\\dev\\bon-prix\\src\\components\\solid\\SolidLoginButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\src\\components\\solid\\SolidLoginButton.vue","mtime":1616416053405},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Smag\\Documents\\dev\\bon-prix\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBoYW5kbGVJbmNvbWluZ1JlZGlyZWN0LCBsb2dpbiwgLypmZXRjaCwqLyBnZXREZWZhdWx0U2Vzc2lvbiwgb25TZXNzaW9uUmVzdG9yZSB9IGZyb20gJ0BpbnJ1cHQvc29saWQtY2xpZW50LWF1dGhuLWJyb3dzZXInDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ1NvbGlkTG9naW5CdXR0b24nLA0KICBkYXRhOiBmdW5jdGlvbiAoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIHdlYklkOiBudWxsDQogICAgfQ0KICB9LA0KICBhc3luYyBtb3VudGVkKCl7DQogICAgYXdhaXQgdGhpcy5jaGVja1Nlc3Npb24oKQ0KICAgIG9uU2Vzc2lvblJlc3RvcmUoKHVybCkgPT4gew0KICAgICAgY29uc29sZS5sb2codXJsKQ0KICAgIH0pOw0KICB9LA0KICBtZXRob2RzOiB7DQogICAgYXN5bmMgY2hlY2tTZXNzaW9uKCl7DQogICAgICAvLyAxLiBDYWxsIHRoZSBoYW5kbGVJbmNvbWluZ1JlZGlyZWN0KCkgZnVuY3Rpb24gdG8gY29tcGxldGUgdGhlIGF1dGhlbnRpY2F0aW9uIHByb2Nlc3MuDQogICAgICAvLyAgIElmIHRoZSBwYWdlIGlzIGJlaW5nIGxvYWRlZCBhZnRlciB0aGUgcmVkaXJlY3QgZnJvbSB0aGUgU29saWQgSWRlbnRpdHkgUHJvdmlkZXINCiAgICAgIC8vICAgICAgKGkuZS4sIHBhcnQgb2YgdGhlIGF1dGhlbnRpY2F0aW9uIGZsb3cpLCB0aGUgdXNlcidzIGNyZWRlbnRpYWxzIGFyZSBzdG9yZWQgaW4tbWVtb3J5LCBhbmQNCiAgICAgIC8vICAgICAgdGhlIGxvZ2luIHByb2Nlc3MgaXMgY29tcGxldGUuIFRoYXQgaXMsIGEgc2Vzc2lvbiBpcyBsb2dnZWQgaW4NCiAgICAgIC8vICAgICAgb25seSBhZnRlciBpdCBoYW5kbGVzIHRoZSBpbmNvbWluZyByZWRpcmVjdCBmcm9tIHRoZSBTb2xpZCBJZGVudGl0eSBQcm92aWRlci4NCiAgICAgIC8vICAgSWYgdGhlIHBhZ2UgaXMgbm90IGJlaW5nIGxvYWRlZCBhZnRlciBhIHJlZGlyZWN0IGZyb20gdGhlIFNvbGlkIElkZW50aXR5IFByb3ZpZGVyLA0KICAgICAgLy8gICAgICBub3RoaW5nIGhhcHBlbnMuDQogICAgICBhd2FpdCAgaGFuZGxlSW5jb21pbmdSZWRpcmVjdCh7DQogICAgICAgIHJlc3RvcmVQcmV2aW91c1Nlc3Npb246IHRydWUNCiAgICAgIH0pLnRoZW4oKGluZm8pID0+IHsNCiAgICAgICAgY29uc29sZS5sb2coYExvZ2dlZCBpbiB3aXRoIFdlYklEIFske2luZm8ud2ViSWR9XWApDQogICAgICAgIHRoaXMud2ViSWQgPSBpbmZvLndlYklkDQogICAgICB9KQ0KICAgIH0sDQogICAgYXN5bmMgbG9naW5BbmRGZXRjaCgpIHsNCg0KICAgICAgLy8gMi4gU3RhcnQgdGhlIExvZ2luIFByb2Nlc3MgaWYgbm90IGFscmVhZHkgbG9nZ2VkIGluLg0KICAgICAgaWYgKCFnZXREZWZhdWx0U2Vzc2lvbigpLmluZm8uaXNMb2dnZWRJbikgew0KICAgICAgICAvLyBUaGUgYGxvZ2luKClgIHJlZGlyZWN0cyB0aGUgdXNlciB0byB0aGVpciBpZGVudGl0eSBwcm92aWRlcjsNCiAgICAgICAgLy8gaS5lLiwgbW92ZXMgdGhlIHVzZXIgYXdheSBmcm9tIHRoZSBjdXJyZW50IHBhZ2UuDQogICAgICAgIGF3YWl0IGxvZ2luKHsNCiAgICAgICAgICAvLyBTcGVjaWZ5IHRoZSBVUkwgb2YgdGhlIHVzZXIncyBTb2xpZCBJZGVudGl0eSBQcm92aWRlcjsgZS5nLiwgImh0dHBzOi8vaW5ydXB0Lm5ldCINCiAgICAgICAgICBvaWRjSXNzdWVyOiAiaHR0cHM6Ly9pbnJ1cHQubmV0IiwNCiAgICAgICAgICAvLyBTcGVjaWZ5IHRoZSBVUkwgdGhlIFNvbGlkIElkZW50aXR5IFByb3ZpZGVyIHNob3VsZCByZWRpcmVjdCB0byBhZnRlciB0aGUgdXNlciBsb2dzIGluLA0KICAgICAgICAgIC8vIGUuZy4sIHRoZSBjdXJyZW50IHBhZ2UgZm9yIGEgc2luZ2xlLXBhZ2UgYXBwLg0KICAgICAgICAgIHJlZGlyZWN0VXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZiwNCiAgICAgICAgICByZXN0b3JlUHJldmlvdXNTZXNzaW9uOiB0cnVlDQogICAgICAgIH0pOw0KICAgICAgfQ0KDQogICAgICAgIH0sDQoNCiAgICAgICAgYXN5bmMgbG9naW4oKSB7DQogICAgICAgICAgdGhpcy5sb2dpbkFuZEZldGNoKCk7DQogICAgICAgICAgLy8gbGV0IHNlc3Npb24gPSBhd2FpdCBhdXRoLmN1cnJlbnRTZXNzaW9uKCk7DQogICAgICAgICAgLy8gbGV0IHBvcHVwVXJpID0gJ2h0dHBzOi8vc29saWRjb21tdW5pdHkubmV0L2NvbW1vbi9wb3B1cC5odG1sJzsNCiAgICAgICAgICAvLyBpZiAoIXNlc3Npb24pew0KICAgICAgICAgIC8vICAgc2Vzc2lvbiA9IGF3YWl0IGF1dGgucG9wdXBMb2dpbih7IHBvcHVwVXJpIH0pOw0KICAgICAgICAgIC8vIH0NCiAgICAgICAgICAvLyB0aGlzLndlYklkID0gc2Vzc2lvbi53ZWJJZA0KICAgICAgICB9LA0KICAgICAgICBhc3luYyBsb2dvdXQoKXsNCiAgICAgICAgICBhd2FpdCBnZXREZWZhdWx0U2Vzc2lvbigpLmxvZ291dCgpDQogICAgICAgICAgYXdhaXQgdGhpcy5jaGVja1Nlc3Npb24oKQ0KDQogICAgICAgICAgLy8gYXdhaXQgIGF1dGgubG9nb3V0KCkNCiAgICAgICAgICAvLyB0aGlzLndlYklkID0gbnVsbA0KICAgICAgICB9LA0KICAgICAgfQ0KICAgIH0NCiAgICA="},{"version":3,"sources":["SolidLoginButton.vue"],"names":[],"mappings":";;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"SolidLoginButton.vue","sourceRoot":"src/components/solid","sourcesContent":["<template>\r\n  <div>\r\n    {{ webId }}\r\n    <b-button variant=\"success\" v-if=\"webId == null\" @click=\"login\">Login</b-button>\r\n    <b-button variant=\"danger\" v-else @click=\"logout\">Logout</b-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { handleIncomingRedirect, login, /*fetch,*/ getDefaultSession, onSessionRestore } from '@inrupt/solid-client-authn-browser'\r\n\r\nexport default {\r\n  name: 'SolidLoginButton',\r\n  data: function () {\r\n    return {\r\n      webId: null\r\n    }\r\n  },\r\n  async mounted(){\r\n    await this.checkSession()\r\n    onSessionRestore((url) => {\r\n      console.log(url)\r\n    });\r\n  },\r\n  methods: {\r\n    async checkSession(){\r\n      // 1. Call the handleIncomingRedirect() function to complete the authentication process.\r\n      //   If the page is being loaded after the redirect from the Solid Identity Provider\r\n      //      (i.e., part of the authentication flow), the user's credentials are stored in-memory, and\r\n      //      the login process is complete. That is, a session is logged in\r\n      //      only after it handles the incoming redirect from the Solid Identity Provider.\r\n      //   If the page is not being loaded after a redirect from the Solid Identity Provider,\r\n      //      nothing happens.\r\n      await  handleIncomingRedirect({\r\n        restorePreviousSession: true\r\n      }).then((info) => {\r\n        console.log(`Logged in with WebID [${info.webId}]`)\r\n        this.webId = info.webId\r\n      })\r\n    },\r\n    async loginAndFetch() {\r\n\r\n      // 2. Start the Login Process if not already logged in.\r\n      if (!getDefaultSession().info.isLoggedIn) {\r\n        // The `login()` redirects the user to their identity provider;\r\n        // i.e., moves the user away from the current page.\r\n        await login({\r\n          // Specify the URL of the user's Solid Identity Provider; e.g., \"https://inrupt.net\"\r\n          oidcIssuer: \"https://inrupt.net\",\r\n          // Specify the URL the Solid Identity Provider should redirect to after the user logs in,\r\n          // e.g., the current page for a single-page app.\r\n          redirectUrl: window.location.href,\r\n          restorePreviousSession: true\r\n        });\r\n      }\r\n\r\n        },\r\n\r\n        async login() {\r\n          this.loginAndFetch();\r\n          // let session = await auth.currentSession();\r\n          // let popupUri = 'https://solidcommunity.net/common/popup.html';\r\n          // if (!session){\r\n          //   session = await auth.popupLogin({ popupUri });\r\n          // }\r\n          // this.webId = session.webId\r\n        },\r\n        async logout(){\r\n          await getDefaultSession().logout()\r\n          await this.checkSession()\r\n\r\n          // await  auth.logout()\r\n          // this.webId = null\r\n        },\r\n      }\r\n    }\r\n    </script>\r\n"]}]}